
AgroQuad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e8  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08006270  08006270  0000e270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006678  08006678  0000e678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800667c  0800667c  0000e67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08006680  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a4  20000090  20000090  00010090  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20000234  20000234  00010090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000729b  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000da6  00000000  00000000  0001735b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009b0  00000000  00000000  00018108  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000918  00000000  00000000  00018ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002e2c  00000000  00000000  000193d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002eee  00000000  00000000  0001c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  0001f0ea  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002724  00000000  00000000  0001f16c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006258 	.word	0x08006258

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006258 	.word	0x08006258
 80001c4:	20000094 	.word	0x20000094

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <SystemInit+0x5c>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <SystemInit+0x5c>)
 8000b64:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000b68:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SystemInit+0x60>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <SystemInit+0x60>)
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	f042 0201 	orr.w	r2, r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <SystemInit+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <SystemInit+0x60>)
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <SystemInit+0x60>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <SystemInit+0x60>)
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <SystemInit+0x64>)
 8000b96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <SystemInit+0x60>)
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <SystemInit+0x60>)
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ba2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SystemInit+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000baa:	f000 f80b 	bl	8000bc4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bae:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <SystemInit+0x5c>)
 8000bb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb4:	609a      	str	r2, [r3, #8]
#endif
}
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	24003010 	.word	0x24003010

08000bc4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <SetSysClock+0xc0>)
 8000bca:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <SetSysClock+0xc0>)
 8000bcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bd2:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <SetSysClock+0xc4>)
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <SetSysClock+0xc4>)
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000bde:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <SetSysClock+0xc0>)
 8000be2:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <SetSysClock+0xc0>)
 8000be4:	6892      	ldr	r2, [r2, #8]
 8000be6:	609a      	str	r2, [r3, #8]
      
  /* PCLK2 = HCLK / 2*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <SetSysClock+0xc0>)
 8000bea:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <SetSysClock+0xc0>)
 8000bec:	6892      	ldr	r2, [r2, #8]
 8000bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bf2:	609a      	str	r2, [r3, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <SetSysClock+0xc0>)
 8000bf6:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <SetSysClock+0xc0>)
 8000bf8:	6892      	ldr	r2, [r2, #8]
 8000bfa:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000bfe:	609a      	str	r2, [r3, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <SetSysClock+0xc0>)
 8000c02:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <SetSysClock+0xc8>)
 8000c04:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <SetSysClock+0xc0>)
 8000c08:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <SetSysClock+0xc0>)
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000c10:	601a      	str	r2, [r3, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c12:	bf00      	nop
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <SetSysClock+0xc0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <SetSysClock+0x50>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <SetSysClock+0xcc>)
 8000c22:	f240 6205 	movw	r2, #1541	; 0x605
 8000c26:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <SetSysClock+0xc0>)
 8000c2a:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <SetSysClock+0xc0>)
 8000c2c:	6892      	ldr	r2, [r2, #8]
 8000c2e:	f022 0203 	bic.w	r2, r2, #3
 8000c32:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <SetSysClock+0xc0>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <SetSysClock+0xc0>)
 8000c38:	6892      	ldr	r2, [r2, #8]
 8000c3a:	f042 0202 	orr.w	r2, r2, #2
 8000c3e:	609a      	str	r2, [r3, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000c40:	bf00      	nop
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <SetSysClock+0xc0>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d1f9      	bne.n	8000c42 <SetSysClock+0x7e>

/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <SetSysClock+0xc0>)
 8000c50:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <SetSysClock+0xc0>)
 8000c52:	6892      	ldr	r2, [r2, #8]
 8000c54:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c58:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <SetSysClock+0xc0>)
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <SetSysClock+0xd0>)
 8000c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <SetSysClock+0xc0>)
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <SetSysClock+0xc0>)
 8000c66:	6812      	ldr	r2, [r2, #0]
 8000c68:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000c6c:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8000c6e:	bf00      	nop
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SetSysClock+0xc0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f9      	beq.n	8000c70 <SetSysClock+0xac>
  {
  }
}
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	07005410 	.word	0x07005410
 8000c90:	40023c00 	.word	0x40023c00
 8000c94:	20003000 	.word	0x20003000

08000c98 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
}
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000ca8:	e7fe      	b.n	8000ca8 <HardFault_Handler+0x4>
 8000caa:	bf00      	nop

08000cac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>
 8000cb2:	bf00      	nop

08000cb4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000cb8:	e7fe      	b.n	8000cb8 <BusFault_Handler+0x4>
 8000cba:	bf00      	nop

08000cbc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>
 8000cc2:	bf00      	nop

08000cc4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
}
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
}
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
}
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

__IO uint32_t TimingDelay;
__IO uint32_t ConState;

void SysTick_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	if(TimingDelay != 0) TimingDelay--;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <SysTick_Handler+0x3c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <SysTick_Handler+0x16>
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <SysTick_Handler+0x3c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <SysTick_Handler+0x3c>)
 8000cfc:	601a      	str	r2, [r3, #0]
	if(ConState != 0)	ConState--;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <SysTick_Handler+0x40>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d005      	beq.n	8000d12 <SysTick_Handler+0x2a>
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <SysTick_Handler+0x40>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SysTick_Handler+0x40>)
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	e003      	b.n	8000d1a <SysTick_Handler+0x32>
	else ConState = 4000;
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Handler+0x40>)
 8000d14:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000d18:	601a      	str	r2, [r3, #0]
}
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000154 	.word	0x20000154
 8000d28:	20000158 	.word	0x20000158

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d2c:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8000d6c <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d32:	f000 b804 	b.w	8000d3e <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000d38:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d3a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d3c:	3104      	adds	r1, #4

08000d3e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000d42:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d44:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d46:	f4ff aff6 	bcc.w	8000d36 <CopyDataInit>
  ldr  r2, =_sbss
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000d4c:	f000 b803 	b.w	8000d56 <LoopFillZerobss>

08000d50 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d50:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d52:	f842 3b04 	str.w	r3, [r2], #4

08000d56 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000d58:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d5a:	f4ff aff9 	bcc.w	8000d50 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d5e:	f7ff fefd 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f003 f92f 	bl	8003fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f001 fa2f 	bl	80021c8 <main>
  bx  lr    
 8000d6a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d6c:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000d70:	08006680 	.word	0x08006680
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d78:	20000090 	.word	0x20000090
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000d7c:	20000090 	.word	0x20000090
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d80:	20000234 	.word	0x20000234

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	f7ff bffe 	b.w	8000d84 <ADC_IRQHandler>

08000d88 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	da0b      	bge.n	8000db4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000d9c:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <NVIC_SetPriority+0x4c>)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 030f 	and.w	r3, r3, #15
 8000da4:	3b04      	subs	r3, #4
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	761a      	strb	r2, [r3, #24]
 8000db2:	e009      	b.n	8000dc8 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000db4:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <NVIC_SetPriority+0x50>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dea:	d301      	bcc.n	8000df0 <SysTick_Config+0x14>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e011      	b.n	8000e14 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <SysTick_Config+0x40>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	210f      	movs	r1, #15
 8000e02:	f7ff ffc1 	bl	8000d88 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x40>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <SysTick_Config+0x40>)
 8000e0e:	2207      	movs	r2, #7
 8000e10:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <init_I2C1>:

uint8_t returnVal = 0;
uint8_t data = 0;

void init_I2C1(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	I2C_InitTypeDef I2C_InitStruct;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000e26:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	f002 fd26 	bl	800387c <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000e30:	2002      	movs	r0, #2
 8000e32:	2101      	movs	r1, #1
 8000e34:	f002 fd04 	bl	8003840 <RCC_AHB1PeriphClockCmd>

	GPIO_StructInit(&GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 ffe7 	bl	8003e10 <GPIO_StructInit>
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // PB6 and PB7
 8000e42:	23c0      	movs	r3, #192	; 0xc0
 8000e44:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000e46:	2302      	movs	r3, #2
 8000e48:	753b      	strb	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	757b      	strb	r3, [r7, #21]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <init_I2C1+0x94>)
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f002 ff49 	bl	8003cf4 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);	// SCL
 8000e62:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <init_I2C1+0x94>)
 8000e64:	2106      	movs	r1, #6
 8000e66:	2204      	movs	r2, #4
 8000e68:	f003 f808 	bl	8003e7c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA
 8000e6c:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <init_I2C1+0x94>)
 8000e6e:	2107      	movs	r1, #7
 8000e70:	2204      	movs	r2, #4
 8000e72:	f003 f803 	bl	8003e7c <GPIO_PinAFConfig>

	I2C_StructInit(&I2C_InitStruct);
 8000e76:	463b      	mov	r3, r7
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fdfd 	bl	8003a78 <I2C_StructInit>
	I2C_InitStruct.I2C_ClockSpeed = 400000;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <init_I2C1+0x98>)
 8000e80:	603b      	str	r3, [r7, #0]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8000e82:	2300      	movs	r3, #0
 8000e84:	80bb      	strh	r3, [r7, #4]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8000e86:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000e8a:	80fb      	strh	r3, [r7, #6]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	813b      	strh	r3, [r7, #8]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Disable;
 8000e90:	2300      	movs	r3, #0
 8000e92:	817b      	strh	r3, [r7, #10]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000e94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e98:	81bb      	strh	r3, [r7, #12]
	I2C_Init(I2C1, &I2C_InitStruct);
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4807      	ldr	r0, [pc, #28]	; (8000ebc <init_I2C1+0x9c>)
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f002 fd28 	bl	80038f4 <I2C_Init>

	I2C_Cmd(I2C1, ENABLE);
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <init_I2C1+0x9c>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f002 fe04 	bl	8003ab4 <I2C_Cmd>
}
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	00061a80 	.word	0x00061a80
 8000ebc:	40005400 	.word	0x40005400

08000ec0 <I2C_Start>:


int I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	460a      	mov	r2, r1
 8000ecc:	70fa      	strb	r2, [r7, #3]
 8000ece:	70bb      	strb	r3, [r7, #2]
	while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000ed0:	bf00      	nop
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000ed8:	f002 fed8 	bl	8003c8c <I2C_GetFlagStatus>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f7      	bne.n	8000ed2 <I2C_Start+0x12>
	I2C_GenerateSTART(I2Cx, ENABLE);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	f002 fe05 	bl	8003af4 <I2C_GenerateSTART>

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8000eea:	bf00      	nop
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	4914      	ldr	r1, [pc, #80]	; (8000f40 <I2C_Start+0x80>)
 8000ef0:	f002 fe9c 	bl	8003c2c <I2C_CheckEvent>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f8      	beq.n	8000eec <I2C_Start+0x2c>
	I2C_Send7bitAddress(I2Cx, address, direction);
 8000efa:	78fa      	ldrb	r2, [r7, #3]
 8000efc:	78bb      	ldrb	r3, [r7, #2]
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	4611      	mov	r1, r2
 8000f02:	461a      	mov	r2, r3
 8000f04:	f002 fe36 	bl	8003b74 <I2C_Send7bitAddress>

	if(direction == I2C_Direction_Transmitter){
 8000f08:	78bb      	ldrb	r3, [r7, #2]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d108      	bne.n	8000f20 <I2C_Start+0x60>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8000f0e:	bf00      	nop
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	490c      	ldr	r1, [pc, #48]	; (8000f44 <I2C_Start+0x84>)
 8000f14:	f002 fe8a 	bl	8003c2c <I2C_CheckEvent>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f8      	beq.n	8000f10 <I2C_Start+0x50>
 8000f1e:	e00a      	b.n	8000f36 <I2C_Start+0x76>
	}

	else if(direction == I2C_Direction_Receiver){
 8000f20:	78bb      	ldrb	r3, [r7, #2]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d107      	bne.n	8000f36 <I2C_Start+0x76>
		while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8000f26:	bf00      	nop
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	4907      	ldr	r1, [pc, #28]	; (8000f48 <I2C_Start+0x88>)
 8000f2c:	f002 fe7e 	bl	8003c2c <I2C_CheckEvent>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f8      	beq.n	8000f28 <I2C_Start+0x68>
	}

	return 1;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	00030001 	.word	0x00030001
 8000f44:	00070082 	.word	0x00070082
 8000f48:	00030002 	.word	0x00030002

08000f4c <I2C_Write>:


void I2C_Write(I2C_TypeDef* I2Cx, uint8_t data)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
	I2C_SendData(I2Cx, data);
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f002 fe47 	bl	8003bf0 <I2C_SendData>
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8000f62:	bf00      	nop
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4904      	ldr	r1, [pc, #16]	; (8000f78 <I2C_Write+0x2c>)
 8000f68:	f002 fe60 	bl	8003c2c <I2C_CheckEvent>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f8      	beq.n	8000f64 <I2C_Write+0x18>
}
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	00070084 	.word	0x00070084

08000f7c <I2C_WritetoReg>:


void I2C_WritetoReg(I2C_TypeDef* I2Cx, uint8_t reg_address, uint8_t data)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	460a      	mov	r2, r1
 8000f88:	70fa      	strb	r2, [r7, #3]
 8000f8a:	70bb      	strb	r3, [r7, #2]
	I2C_Write(I2Cx, reg_address);
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff ffdb 	bl	8000f4c <I2C_Write>
	I2C_Write(I2Cx, data);
 8000f96:	78bb      	ldrb	r3, [r7, #2]
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff ffd6 	bl	8000f4c <I2C_Write>
}
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop

08000fa8 <I2C_Read_NAck>:
	return data;
}


uint8_t I2C_Read_NAck(I2C_TypeDef* I2Cx)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	I2C_AcknowledgeConfig(I2Cx, DISABLE);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f002 fdfc 	bl	8003bb0 <I2C_AcknowledgeConfig>
	while( !I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 8000fb8:	bf00      	nop
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	4909      	ldr	r1, [pc, #36]	; (8000fe4 <I2C_Read_NAck+0x3c>)
 8000fbe:	f002 fe35 	bl	8003c2c <I2C_CheckEvent>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f8      	beq.n	8000fba <I2C_Read_NAck+0x12>
	data = I2C_ReceiveData(I2Cx);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f002 fe21 	bl	8003c10 <I2C_ReceiveData>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <I2C_Read_NAck+0x40>)
 8000fd4:	701a      	strb	r2, [r3, #0]
	return data;
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <I2C_Read_NAck+0x40>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	00030040 	.word	0x00030040
 8000fe8:	200000ac 	.word	0x200000ac

08000fec <I2C_Stop>:


void I2C_Stop(I2C_TypeDef* I2Cx)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	f002 fd9c 	bl	8003b34 <I2C_GenerateSTOP>
}
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop

08001004 <I2C_Initialize_WritetoReg>:


void I2C_Initialize_WritetoReg(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t reg_address, uint8_t data)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	70f9      	strb	r1, [r7, #3]
 800100e:	70ba      	strb	r2, [r7, #2]
 8001010:	707b      	strb	r3, [r7, #1]
	if(I2C_Start(I2Cx, device_address, I2C_Direction_Transmitter) == 1)
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	4619      	mov	r1, r3
 8001018:	2200      	movs	r2, #0
 800101a:	f7ff ff51 	bl	8000ec0 <I2C_Start>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d109      	bne.n	8001038 <I2C_Initialize_WritetoReg+0x34>
	{
		I2C_WritetoReg(I2Cx, reg_address, data);
 8001024:	78ba      	ldrb	r2, [r7, #2]
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	4611      	mov	r1, r2
 800102c:	461a      	mov	r2, r3
 800102e:	f7ff ffa5 	bl	8000f7c <I2C_WritetoReg>
		I2C_Stop(I2Cx);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffda 	bl	8000fec <I2C_Stop>
	}
}
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop

08001040 <I2C_Initialize_ReadfromReg_NAck>:
	I2C_Stop(I2Cx);
	return returnVal;
}

uint8_t I2C_Initialize_ReadfromReg_NAck(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t reg_address)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	460a      	mov	r2, r1
 800104c:	70fa      	strb	r2, [r7, #3]
 800104e:	70bb      	strb	r3, [r7, #2]
	I2C_GenerateSTART(I2Cx, ENABLE);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	2101      	movs	r1, #1
 8001054:	f002 fd4e 	bl	8003af4 <I2C_GenerateSTART>
	uint8_t returnVal;
	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8001058:	bf00      	nop
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	491f      	ldr	r1, [pc, #124]	; (80010dc <I2C_Initialize_ReadfromReg_NAck+0x9c>)
 800105e:	f002 fde5 	bl	8003c2c <I2C_CheckEvent>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f8      	beq.n	800105a <I2C_Initialize_ReadfromReg_NAck+0x1a>
	I2C_Send7bitAddress(I2Cx, device_address, I2C_Direction_Transmitter);
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	4619      	mov	r1, r3
 800106e:	2200      	movs	r2, #0
 8001070:	f002 fd80 	bl	8003b74 <I2C_Send7bitAddress>

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001074:	bf00      	nop
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	4919      	ldr	r1, [pc, #100]	; (80010e0 <I2C_Initialize_ReadfromReg_NAck+0xa0>)
 800107a:	f002 fdd7 	bl	8003c2c <I2C_CheckEvent>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f8      	beq.n	8001076 <I2C_Initialize_ReadfromReg_NAck+0x36>
	I2C_Write(I2Cx, reg_address);
 8001084:	78bb      	ldrb	r3, [r7, #2]
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff ff5f 	bl	8000f4c <I2C_Write>
	I2C_GenerateSTART(I2Cx, ENABLE);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	2101      	movs	r1, #1
 8001092:	f002 fd2f 	bl	8003af4 <I2C_GenerateSTART>

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8001096:	bf00      	nop
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	4910      	ldr	r1, [pc, #64]	; (80010dc <I2C_Initialize_ReadfromReg_NAck+0x9c>)
 800109c:	f002 fdc6 	bl	8003c2c <I2C_CheckEvent>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f8      	beq.n	8001098 <I2C_Initialize_ReadfromReg_NAck+0x58>
	I2C_Send7bitAddress(I2Cx, device_address, I2C_Direction_Receiver);
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	4619      	mov	r1, r3
 80010ac:	2201      	movs	r2, #1
 80010ae:	f002 fd61 	bl	8003b74 <I2C_Send7bitAddress>

	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 80010b2:	bf00      	nop
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	490b      	ldr	r1, [pc, #44]	; (80010e4 <I2C_Initialize_ReadfromReg_NAck+0xa4>)
 80010b8:	f002 fdb8 	bl	8003c2c <I2C_CheckEvent>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f8      	beq.n	80010b4 <I2C_Initialize_ReadfromReg_NAck+0x74>
	returnVal = I2C_Read_NAck(I2Cx);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff70 	bl	8000fa8 <I2C_Read_NAck>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]

	I2C_Stop(I2Cx);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff8d 	bl	8000fec <I2C_Stop>
	return returnVal;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	00030001 	.word	0x00030001
 80010e0:	00070082 	.word	0x00070082
 80010e4:	00030002 	.word	0x00030002

080010e8 <Read_RawGyroParams>:
void Read_RawBaroParams(int16_t *, int16_t *);
void Read_RawMagnetometerParams(int16_t *, int16_t *, int16_t *, int16_t *, int16_t *, int16_t *);
*/

void Read_RawGyroParams(int16_t *Gyro_X, int16_t *Gyro_Y, int16_t *Gyro_Z, int16_t *Cal_Gyro_X, int16_t *Cal_Gyro_Y, int16_t *Cal_Gyro_Z)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
	uint8_t Gyro_Y_H;
	uint8_t Gyro_Y_L;
	uint8_t Gyro_Z_H;
	uint8_t Gyro_Z_L;

	Gyro_X_H = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H);
 80010f6:	4834      	ldr	r0, [pc, #208]	; (80011c8 <Read_RawGyroParams+0xe0>)
 80010f8:	21d0      	movs	r1, #208	; 0xd0
 80010fa:	2243      	movs	r2, #67	; 0x43
 80010fc:	f7ff ffa0 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 8001100:	4603      	mov	r3, r0
 8001102:	75fb      	strb	r3, [r7, #23]
	Gyro_X_L = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L);
 8001104:	4830      	ldr	r0, [pc, #192]	; (80011c8 <Read_RawGyroParams+0xe0>)
 8001106:	21d0      	movs	r1, #208	; 0xd0
 8001108:	2244      	movs	r2, #68	; 0x44
 800110a:	f7ff ff99 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 800110e:	4603      	mov	r3, r0
 8001110:	75bb      	strb	r3, [r7, #22]
	Gyro_Y_H = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H);
 8001112:	482d      	ldr	r0, [pc, #180]	; (80011c8 <Read_RawGyroParams+0xe0>)
 8001114:	21d0      	movs	r1, #208	; 0xd0
 8001116:	2245      	movs	r2, #69	; 0x45
 8001118:	f7ff ff92 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 800111c:	4603      	mov	r3, r0
 800111e:	757b      	strb	r3, [r7, #21]
	Gyro_Y_L = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L);
 8001120:	4829      	ldr	r0, [pc, #164]	; (80011c8 <Read_RawGyroParams+0xe0>)
 8001122:	21d0      	movs	r1, #208	; 0xd0
 8001124:	2246      	movs	r2, #70	; 0x46
 8001126:	f7ff ff8b 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 800112a:	4603      	mov	r3, r0
 800112c:	753b      	strb	r3, [r7, #20]
	Gyro_Z_H = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H);
 800112e:	4826      	ldr	r0, [pc, #152]	; (80011c8 <Read_RawGyroParams+0xe0>)
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	2247      	movs	r2, #71	; 0x47
 8001134:	f7ff ff84 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 8001138:	4603      	mov	r3, r0
 800113a:	74fb      	strb	r3, [r7, #19]
	Gyro_Z_L = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L);
 800113c:	4822      	ldr	r0, [pc, #136]	; (80011c8 <Read_RawGyroParams+0xe0>)
 800113e:	21d0      	movs	r1, #208	; 0xd0
 8001140:	2248      	movs	r2, #72	; 0x48
 8001142:	f7ff ff7d 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 8001146:	4603      	mov	r3, r0
 8001148:	74bb      	strb	r3, [r7, #18]

	*Gyro_X = ((Gyro_X_H<<8)|Gyro_X_L) - *Cal_Gyro_X;
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b29a      	uxth	r2, r3
 8001150:	7dbb      	ldrb	r3, [r7, #22]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	b29b      	uxth	r3, r3
 8001164:	b29a      	uxth	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	801a      	strh	r2, [r3, #0]
	*Gyro_Y = ((Gyro_Y_H<<8)|Gyro_Y_L) - *Cal_Gyro_Y;
 800116a:	7d7b      	ldrb	r3, [r7, #21]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b29a      	uxth	r2, r3
 8001170:	7d3b      	ldrb	r3, [r7, #20]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b29b      	uxth	r3, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	b29b      	uxth	r3, r3
 8001184:	b29a      	uxth	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	801a      	strh	r2, [r3, #0]
	*Gyro_Z = ((Gyro_Z_H<<8)|Gyro_Z_L) - *Cal_Gyro_Z;
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b29a      	uxth	r2, r3
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	b29b      	uxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b29b      	uxth	r3, r3
 8001198:	b29a      	uxth	r2, r3
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	801a      	strh	r2, [r3, #0]

	*Gyro_X = *Gyro_X; //&& 0b1111111111111000;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	881a      	ldrh	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	801a      	strh	r2, [r3, #0]
	*Gyro_Y = *Gyro_Y; // && 0b1111111111111000;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	881a      	ldrh	r2, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	801a      	strh	r2, [r3, #0]
	*Gyro_Z = *Gyro_Z; // && 0b1111111111111000;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	801a      	strh	r2, [r3, #0]
}
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400

080011cc <Read_RawAccelerometerParams>:


void Read_RawAccelerometerParams(int16_t *Acc_X, int16_t *Acc_Y, int16_t *Acc_Z, int16_t *Cal_Acc_X, int16_t *Cal_Acc_Y, int16_t *Cal_Acc_Z)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
	uint8_t Acc_Y_H;
	uint8_t Acc_Y_L;
	uint8_t Acc_Z_H;
	uint8_t Acc_Z_L;

	Acc_X_H = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H);
 80011da:	4824      	ldr	r0, [pc, #144]	; (800126c <Read_RawAccelerometerParams+0xa0>)
 80011dc:	21d0      	movs	r1, #208	; 0xd0
 80011de:	223b      	movs	r2, #59	; 0x3b
 80011e0:	f7ff ff2e 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]
	Acc_X_L = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L);
 80011e8:	4820      	ldr	r0, [pc, #128]	; (800126c <Read_RawAccelerometerParams+0xa0>)
 80011ea:	21d0      	movs	r1, #208	; 0xd0
 80011ec:	223c      	movs	r2, #60	; 0x3c
 80011ee:	f7ff ff27 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 80011f2:	4603      	mov	r3, r0
 80011f4:	75bb      	strb	r3, [r7, #22]
	Acc_Y_H = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H);
 80011f6:	481d      	ldr	r0, [pc, #116]	; (800126c <Read_RawAccelerometerParams+0xa0>)
 80011f8:	21d0      	movs	r1, #208	; 0xd0
 80011fa:	223d      	movs	r2, #61	; 0x3d
 80011fc:	f7ff ff20 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 8001200:	4603      	mov	r3, r0
 8001202:	757b      	strb	r3, [r7, #21]
	Acc_Y_L = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L);
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <Read_RawAccelerometerParams+0xa0>)
 8001206:	21d0      	movs	r1, #208	; 0xd0
 8001208:	223e      	movs	r2, #62	; 0x3e
 800120a:	f7ff ff19 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 800120e:	4603      	mov	r3, r0
 8001210:	753b      	strb	r3, [r7, #20]
	Acc_Z_H = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H);
 8001212:	4816      	ldr	r0, [pc, #88]	; (800126c <Read_RawAccelerometerParams+0xa0>)
 8001214:	21d0      	movs	r1, #208	; 0xd0
 8001216:	223f      	movs	r2, #63	; 0x3f
 8001218:	f7ff ff12 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 800121c:	4603      	mov	r3, r0
 800121e:	74fb      	strb	r3, [r7, #19]
	Acc_Z_L = I2C_Initialize_ReadfromReg_NAck(I2C1, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L);
 8001220:	4812      	ldr	r0, [pc, #72]	; (800126c <Read_RawAccelerometerParams+0xa0>)
 8001222:	21d0      	movs	r1, #208	; 0xd0
 8001224:	2240      	movs	r2, #64	; 0x40
 8001226:	f7ff ff0b 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 800122a:	4603      	mov	r3, r0
 800122c:	74bb      	strb	r3, [r7, #18]

	*Acc_X = ((Acc_X_H<<8)|Acc_X_L);
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b29a      	uxth	r2, r3
 8001234:	7dbb      	ldrb	r3, [r7, #22]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	801a      	strh	r2, [r3, #0]
	*Acc_Y = ((Acc_Y_H<<8)|Acc_Y_L);
 8001240:	7d7b      	ldrb	r3, [r7, #21]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b29a      	uxth	r2, r3
 8001246:	7d3b      	ldrb	r3, [r7, #20]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b29a      	uxth	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	801a      	strh	r2, [r3, #0]
	*Acc_Z = ((Acc_Z_H<<8)|Acc_Z_L);
 8001252:	7cfb      	ldrb	r3, [r7, #19]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b29a      	uxth	r2, r3
 8001258:	7cbb      	ldrb	r3, [r7, #18]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b29a      	uxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	801a      	strh	r2, [r3, #0]
}
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40005400 	.word	0x40005400

08001270 <Read_RawBaroParams>:


void Read_RawBaroParams(int16_t *Baro_Val, int16_t *Cal_Baro_Val)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	uint8_t Baro_Val_H;
	uint8_t Baro_Val_L;

	Baro_Val_H = I2C_Initialize_ReadfromReg_NAck(I2C1, BMP085_ADDRESS, BMP085_Val_MSB);
 800127a:	4810      	ldr	r0, [pc, #64]	; (80012bc <Read_RawBaroParams+0x4c>)
 800127c:	21ee      	movs	r1, #238	; 0xee
 800127e:	22f6      	movs	r2, #246	; 0xf6
 8001280:	f7ff fede 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]
	Baro_Val_L = I2C_Initialize_ReadfromReg_NAck(I2C1, BMP085_ADDRESS, BMP085_Val_LSB);
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <Read_RawBaroParams+0x4c>)
 800128a:	21ee      	movs	r1, #238	; 0xee
 800128c:	22f7      	movs	r2, #247	; 0xf7
 800128e:	f7ff fed7 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 8001292:	4603      	mov	r3, r0
 8001294:	73bb      	strb	r3, [r7, #14]

	*Baro_Val = ((Baro_Val_H<<8)|Baro_Val_L) - *Cal_Baro_Val;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b29a      	uxth	r2, r3
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	801a      	strh	r2, [r3, #0]
}
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40005400 	.word	0x40005400

080012c0 <Read_RawMagnetometerParams>:


void Read_RawMagnetometerParams(int16_t *Mag_X, int16_t *Mag_Y, int16_t *Mag_Z, int16_t *Cal_Mag_X, int16_t *Cal_Mag_Y, int16_t *Cal_Mag_Z)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
	uint8_t Mag_Y_H;
	uint8_t Mag_Y_L;
	uint8_t Mag_Z_H;
	uint8_t Mag_Z_L;

	Mag_X_H = I2C_Initialize_ReadfromReg_NAck(I2C1, HMC5883L_ADDRESS, HMC5883L_X_MSB);
 80012ce:	482e      	ldr	r0, [pc, #184]	; (8001388 <Read_RawMagnetometerParams+0xc8>)
 80012d0:	213c      	movs	r1, #60	; 0x3c
 80012d2:	2203      	movs	r2, #3
 80012d4:	f7ff feb4 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 80012d8:	4603      	mov	r3, r0
 80012da:	75fb      	strb	r3, [r7, #23]
	Mag_X_L = I2C_Initialize_ReadfromReg_NAck(I2C1, HMC5883L_ADDRESS, HMC5883L_X_LSB);
 80012dc:	482a      	ldr	r0, [pc, #168]	; (8001388 <Read_RawMagnetometerParams+0xc8>)
 80012de:	213c      	movs	r1, #60	; 0x3c
 80012e0:	2204      	movs	r2, #4
 80012e2:	f7ff fead 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 80012e6:	4603      	mov	r3, r0
 80012e8:	75bb      	strb	r3, [r7, #22]
	Mag_Y_H = I2C_Initialize_ReadfromReg_NAck(I2C1, HMC5883L_ADDRESS, HMC5883L_Y_MSB);
 80012ea:	4827      	ldr	r0, [pc, #156]	; (8001388 <Read_RawMagnetometerParams+0xc8>)
 80012ec:	213c      	movs	r1, #60	; 0x3c
 80012ee:	2205      	movs	r2, #5
 80012f0:	f7ff fea6 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 80012f4:	4603      	mov	r3, r0
 80012f6:	757b      	strb	r3, [r7, #21]
	Mag_Y_L = I2C_Initialize_ReadfromReg_NAck(I2C1, HMC5883L_ADDRESS, HMC5883L_Y_LSB);
 80012f8:	4823      	ldr	r0, [pc, #140]	; (8001388 <Read_RawMagnetometerParams+0xc8>)
 80012fa:	213c      	movs	r1, #60	; 0x3c
 80012fc:	2206      	movs	r2, #6
 80012fe:	f7ff fe9f 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 8001302:	4603      	mov	r3, r0
 8001304:	753b      	strb	r3, [r7, #20]
	Mag_Z_H = I2C_Initialize_ReadfromReg_NAck(I2C1, HMC5883L_ADDRESS, HMC5883L_Z_MSB);
 8001306:	4820      	ldr	r0, [pc, #128]	; (8001388 <Read_RawMagnetometerParams+0xc8>)
 8001308:	213c      	movs	r1, #60	; 0x3c
 800130a:	2207      	movs	r2, #7
 800130c:	f7ff fe98 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 8001310:	4603      	mov	r3, r0
 8001312:	74fb      	strb	r3, [r7, #19]
	Mag_Z_L = I2C_Initialize_ReadfromReg_NAck(I2C1, HMC5883L_ADDRESS, HMC5883L_Z_LSB);
 8001314:	481c      	ldr	r0, [pc, #112]	; (8001388 <Read_RawMagnetometerParams+0xc8>)
 8001316:	213c      	movs	r1, #60	; 0x3c
 8001318:	2208      	movs	r2, #8
 800131a:	f7ff fe91 	bl	8001040 <I2C_Initialize_ReadfromReg_NAck>
 800131e:	4603      	mov	r3, r0
 8001320:	74bb      	strb	r3, [r7, #18]

	*Mag_X = ((Mag_X_H<<8)|Mag_X_L) - *Cal_Mag_X;
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b29a      	uxth	r2, r3
 8001328:	7dbb      	ldrb	r3, [r7, #22]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b29b      	uxth	r3, r3
 8001330:	b29a      	uxth	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	801a      	strh	r2, [r3, #0]
	*Mag_Y = ((Mag_Y_H<<8)|Mag_Y_L) - *Cal_Mag_Y;
 8001342:	7d7b      	ldrb	r3, [r7, #21]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b29a      	uxth	r2, r3
 8001348:	7d3b      	ldrb	r3, [r7, #20]
 800134a:	b29b      	uxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b29b      	uxth	r3, r3
 8001350:	b29a      	uxth	r2, r3
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	b29a      	uxth	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	801a      	strh	r2, [r3, #0]
	*Mag_Z = ((Mag_Z_H<<8)|Mag_Z_L) - *Cal_Mag_Z;
 8001362:	7cfb      	ldrb	r3, [r7, #19]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b29a      	uxth	r2, r3
 8001368:	7cbb      	ldrb	r3, [r7, #18]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	b29a      	uxth	r2, r3
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	801a      	strh	r2, [r3, #0]

	//AcMag_X = (*Mag_X )/16384;
	//AcMag_Y	= (*Mag_Y )/16384;
	//AcMag_Z = (*Mag_Z )/16384;
}
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40005400 	.word	0x40005400

0800138c <Delay_us>:
#define AQDELAY_H_

extern __IO uint32_t TimingDelay;

void Delay_us(__IO uint32_t time)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
		TimingDelay = time;
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <Delay_us+0x24>)
 8001398:	601a      	str	r2, [r3, #0]
		while(TimingDelay != 0);
 800139a:	bf00      	nop
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <Delay_us+0x24>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1fb      	bne.n	800139c <Delay_us+0x10>
}
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000154 	.word	0x20000154

080013b4 <Delay>:

void Delay(__IO uint32_t time)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	Delay_us(time*1000);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ffe0 	bl	800138c <Delay_us>
}
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop

080013d4 <init_USART1>:
#define USART_COMMUNICATION_H_



void init_USART1(uint32_t baudrate)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80013dc:	2001      	movs	r0, #1
 80013de:	2101      	movs	r1, #1
 80013e0:	f002 fa2e 	bl	8003840 <RCC_AHB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 80013e4:	4827      	ldr	r0, [pc, #156]	; (8001484 <init_USART1+0xb0>)
 80013e6:	2109      	movs	r1, #9
 80013e8:	2207      	movs	r2, #7
 80013ea:	f002 fd47 	bl	8003e7c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 80013ee:	4825      	ldr	r0, [pc, #148]	; (8001484 <init_USART1+0xb0>)
 80013f0:	210a      	movs	r1, #10
 80013f2:	2207      	movs	r2, #7
 80013f4:	f002 fd42 	bl	8003e7c <GPIO_PinAFConfig>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 80013f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013fc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80013fe:	2302      	movs	r3, #2
 8001400:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001410:	2303      	movs	r3, #3
 8001412:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	481a      	ldr	r0, [pc, #104]	; (8001484 <init_USART1+0xb0>)
 800141c:	4619      	mov	r1, r3
 800141e:	f002 fc69 	bl	8003cf4 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8001422:	2010      	movs	r0, #16
 8001424:	2101      	movs	r1, #1
 8001426:	f002 fa47 	bl	80038b8 <RCC_APB2PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = baudrate;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800142e:	2300      	movs	r3, #0
 8001430:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8001432:	230c      	movs	r3, #12
 8001434:	837b      	strh	r3, [r7, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8001436:	2300      	movs	r3, #0
 8001438:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 800143a:	2300      	movs	r3, #0
 800143c:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 800143e:	2300      	movs	r3, #0
 8001440:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART1, &USART_InitStruct);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4810      	ldr	r0, [pc, #64]	; (8001488 <init_USART1+0xb4>)
 8001448:	4619      	mov	r1, r3
 800144a:	f001 ff63 	bl	8003314 <USART_Init>
	USART_Cmd(USART1, ENABLE);
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <init_USART1+0xb4>)
 8001450:	2101      	movs	r1, #1
 8001452:	f002 f819 	bl	8003488 <USART_Cmd>

	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8001456:	480c      	ldr	r0, [pc, #48]	; (8001488 <init_USART1+0xb4>)
 8001458:	f240 5125 	movw	r1, #1317	; 0x525
 800145c:	2201      	movs	r2, #1
 800145e:	f002 f845 	bl	80034ec <USART_ITConfig>

	NVIC_InitStruct.NVIC_IRQChannel = USART1_IRQn;
 8001462:	2325      	movs	r3, #37	; 0x25
 8001464:	733b      	strb	r3, [r7, #12]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	737b      	strb	r3, [r7, #13]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	73bb      	strb	r3, [r7, #14]
	NVIC_Init(&NVIC_InitStruct);
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fd46 	bl	8003f08 <NVIC_Init>
}
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40020000 	.word	0x40020000
 8001488:	40011000 	.word	0x40011000

0800148c <USART_puts>:




void USART_puts(USART_TypeDef* USARTx, volatile char *s)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]

	while(*s)
 8001496:	e012      	b.n	80014be <USART_puts+0x32>
	{
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 8001498:	bf00      	nop
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f8      	beq.n	800149a <USART_puts+0xe>
		USART_SendData(USARTx, *s);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f002 f809 	bl	80034c8 <USART_SendData>
		*s++;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	603a      	str	r2, [r7, #0]
 80014bc:	781b      	ldrb	r3, [r3, #0]


void USART_puts(USART_TypeDef* USARTx, volatile char *s)
{

	while(*s)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1e7      	bne.n	8001498 <USART_puts+0xc>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
		USART_SendData(USARTx, *s);
		*s++;
	}
}
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop

080014d0 <myMotorFL_write>:

#include "AQDelay.h"
#include "USART_COmmunication.h"

void myMotorFL_write(uint32_t deg)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	TIM_Cmd(TIM2, DISABLE);
 80014d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014dc:	2100      	movs	r1, #0
 80014de:	f002 f8c1 	bl	8003664 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
 80014e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014e6:	2101      	movs	r1, #1
 80014e8:	2200      	movs	r2, #0
 80014ea:	f002 f8db 	bl	80036a4 <TIM_ITConfig>

	//0 deg -> 1000 us
	//180 deg -> 2000 us

	GPIO_ResetBits(GPIOA, GPIO_Pin_0);
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <myMotorFL_write+0x50>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	f002 fcb5 	bl	8003e60 <GPIO_ResetBits>
	Delay_us(deg);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff48 	bl	800138c <Delay_us>
	GPIO_SetBits(GPIOA, GPIO_Pin_0);
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <myMotorFL_write+0x50>)
 80014fe:	2101      	movs	r1, #1
 8001500:	f002 fca0 	bl	8003e44 <GPIO_SetBits>

	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8001504:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001508:	2101      	movs	r1, #1
 800150a:	2201      	movs	r2, #1
 800150c:	f002 f8ca 	bl	80036a4 <TIM_ITConfig>
	TIM_Cmd(TIM2, ENABLE);
 8001510:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001514:	2101      	movs	r1, #1
 8001516:	f002 f8a5 	bl	8003664 <TIM_Cmd>
}
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40020000 	.word	0x40020000

08001524 <myMotorFR_write>:

void myMotorFR_write(uint32_t deg)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	TIM_Cmd(TIM2, DISABLE);
 800152c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001530:	2100      	movs	r1, #0
 8001532:	f002 f897 	bl	8003664 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
 8001536:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800153a:	2101      	movs	r1, #1
 800153c:	2200      	movs	r2, #0
 800153e:	f002 f8b1 	bl	80036a4 <TIM_ITConfig>

	GPIO_ResetBits(GPIOA, GPIO_Pin_1);
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <myMotorFR_write+0x50>)
 8001544:	2102      	movs	r1, #2
 8001546:	f002 fc8b 	bl	8003e60 <GPIO_ResetBits>
	Delay_us(deg);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff1e 	bl	800138c <Delay_us>
	GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <myMotorFR_write+0x50>)
 8001552:	2102      	movs	r1, #2
 8001554:	f002 fc76 	bl	8003e44 <GPIO_SetBits>

	TIM_Cmd(TIM2, ENABLE);
 8001558:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800155c:	2101      	movs	r1, #1
 800155e:	f002 f881 	bl	8003664 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8001562:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001566:	2101      	movs	r1, #1
 8001568:	2201      	movs	r2, #1
 800156a:	f002 f89b 	bl	80036a4 <TIM_ITConfig>

}
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40020000 	.word	0x40020000

08001578 <myMotorBL_write>:

void myMotorBL_write(uint32_t deg)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	TIM_Cmd(TIM2, DISABLE);
 8001580:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001584:	2100      	movs	r1, #0
 8001586:	f002 f86d 	bl	8003664 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
 800158a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800158e:	2101      	movs	r1, #1
 8001590:	2200      	movs	r2, #0
 8001592:	f002 f887 	bl	80036a4 <TIM_ITConfig>

	GPIO_ResetBits(GPIOA, GPIO_Pin_2);
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <myMotorBL_write+0x50>)
 8001598:	2104      	movs	r1, #4
 800159a:	f002 fc61 	bl	8003e60 <GPIO_ResetBits>
	Delay_us(deg);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fef4 	bl	800138c <Delay_us>
	GPIO_SetBits(GPIOA, GPIO_Pin_2);
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <myMotorBL_write+0x50>)
 80015a6:	2104      	movs	r1, #4
 80015a8:	f002 fc4c 	bl	8003e44 <GPIO_SetBits>

	TIM_Cmd(TIM2, ENABLE);
 80015ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015b0:	2101      	movs	r1, #1
 80015b2:	f002 f857 	bl	8003664 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80015b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015ba:	2101      	movs	r1, #1
 80015bc:	2201      	movs	r2, #1
 80015be:	f002 f871 	bl	80036a4 <TIM_ITConfig>

}
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020000 	.word	0x40020000

080015cc <myMotorBR_write>:

void myMotorBR_write(uint32_t deg)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	TIM_Cmd(TIM2, DISABLE);
 80015d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015d8:	2100      	movs	r1, #0
 80015da:	f002 f843 	bl	8003664 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, DISABLE);
 80015de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015e2:	2101      	movs	r1, #1
 80015e4:	2200      	movs	r2, #0
 80015e6:	f002 f85d 	bl	80036a4 <TIM_ITConfig>

	GPIO_ResetBits(GPIOA, GPIO_Pin_3);
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <myMotorBR_write+0x50>)
 80015ec:	2108      	movs	r1, #8
 80015ee:	f002 fc37 	bl	8003e60 <GPIO_ResetBits>
	Delay_us(deg);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff feca 	bl	800138c <Delay_us>
	GPIO_SetBits(GPIOA, GPIO_Pin_3);
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <myMotorBR_write+0x50>)
 80015fa:	2108      	movs	r1, #8
 80015fc:	f002 fc22 	bl	8003e44 <GPIO_SetBits>

	TIM_Cmd(TIM2, ENABLE);
 8001600:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001604:	2101      	movs	r1, #1
 8001606:	f002 f82d 	bl	8003664 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 800160a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800160e:	2101      	movs	r1, #1
 8001610:	2201      	movs	r2, #1
 8001612:	f002 f847 	bl	80036a4 <TIM_ITConfig>
}
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40020000 	.word	0x40020000

08001620 <Init_Motors>:

void Init_Motors()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	USART_puts(USART1, "Enabling ESCs \n");
 8001626:	483b      	ldr	r0, [pc, #236]	; (8001714 <Init_Motors+0xf4>)
 8001628:	493b      	ldr	r1, [pc, #236]	; (8001718 <Init_Motors+0xf8>)
 800162a:	f7ff ff2f 	bl	800148c <USART_puts>
	int i = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]

	USART_puts(USART1, "Setting High Speed\n");
 8001632:	4838      	ldr	r0, [pc, #224]	; (8001714 <Init_Motors+0xf4>)
 8001634:	4939      	ldr	r1, [pc, #228]	; (800171c <Init_Motors+0xfc>)
 8001636:	f7ff ff29 	bl	800148c <USART_puts>
	for(i = 0; i<300; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	e016      	b.n	800166e <Init_Motors+0x4e>
	{
		myMotorFL_write(2000);	//2400
 8001640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001644:	f7ff ff44 	bl	80014d0 <myMotorFL_write>
		myMotorFR_write(2000);
 8001648:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800164c:	f7ff ff6a 	bl	8001524 <myMotorFR_write>
		myMotorBL_write(2000);
 8001650:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001654:	f7ff ff90 	bl	8001578 <myMotorBL_write>
		myMotorBR_write(2000);
 8001658:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800165c:	f7ff ffb6 	bl	80015cc <myMotorBR_write>
		Delay_us(4000);
 8001660:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001664:	f7ff fe92 	bl	800138c <Delay_us>
{
	USART_puts(USART1, "Enabling ESCs \n");
	int i = 0;

	USART_puts(USART1, "Setting High Speed\n");
	for(i = 0; i<300; i++)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001674:	dbe4      	blt.n	8001640 <Init_Motors+0x20>
		myMotorBL_write(2000);
		myMotorBR_write(2000);
		Delay_us(4000);
	}

	USART_puts(USART1, "Setting Low Speed\n");
 8001676:	4827      	ldr	r0, [pc, #156]	; (8001714 <Init_Motors+0xf4>)
 8001678:	4929      	ldr	r1, [pc, #164]	; (8001720 <Init_Motors+0x100>)
 800167a:	f7ff ff07 	bl	800148c <USART_puts>
	for(i = 0; i<300; i++)
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	e016      	b.n	80016b2 <Init_Motors+0x92>
	{
		myMotorFL_write(1000);		//1000
 8001684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001688:	f7ff ff22 	bl	80014d0 <myMotorFL_write>
		myMotorFR_write(1000);
 800168c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001690:	f7ff ff48 	bl	8001524 <myMotorFR_write>
		myMotorBL_write(1000);
 8001694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001698:	f7ff ff6e 	bl	8001578 <myMotorBL_write>
		myMotorBR_write(1000);
 800169c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a0:	f7ff ff94 	bl	80015cc <myMotorBR_write>
		Delay_us(8000);
 80016a4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80016a8:	f7ff fe70 	bl	800138c <Delay_us>
		myMotorBR_write(2000);
		Delay_us(4000);
	}

	USART_puts(USART1, "Setting Low Speed\n");
	for(i = 0; i<300; i++)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3301      	adds	r3, #1
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016b8:	dbe4      	blt.n	8001684 <Init_Motors+0x64>
		myMotorBR_write(1000);
		Delay_us(8000);
	}
	//Delay(4000);

	USART_puts(USART1, "Calibrated\n");
 80016ba:	4816      	ldr	r0, [pc, #88]	; (8001714 <Init_Motors+0xf4>)
 80016bc:	4919      	ldr	r1, [pc, #100]	; (8001724 <Init_Motors+0x104>)
 80016be:	f7ff fee5 	bl	800148c <USART_puts>
	for(i = 0; i<300; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	e016      	b.n	80016f6 <Init_Motors+0xd6>
	{
		myMotorFL_write(1010);	//1010
 80016c8:	f240 30f2 	movw	r0, #1010	; 0x3f2
 80016cc:	f7ff ff00 	bl	80014d0 <myMotorFL_write>
		myMotorFR_write(1010);
 80016d0:	f240 30f2 	movw	r0, #1010	; 0x3f2
 80016d4:	f7ff ff26 	bl	8001524 <myMotorFR_write>
		myMotorBL_write(1010);
 80016d8:	f240 30f2 	movw	r0, #1010	; 0x3f2
 80016dc:	f7ff ff4c 	bl	8001578 <myMotorBL_write>
		myMotorBR_write(1010);
 80016e0:	f240 30f2 	movw	r0, #1010	; 0x3f2
 80016e4:	f7ff ff72 	bl	80015cc <myMotorBR_write>

		Delay_us(7800);
 80016e8:	f641 6078 	movw	r0, #7800	; 0x1e78
 80016ec:	f7ff fe4e 	bl	800138c <Delay_us>
		Delay_us(8000);
	}
	//Delay(4000);

	USART_puts(USART1, "Calibrated\n");
	for(i = 0; i<300; i++)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3301      	adds	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016fc:	dbe4      	blt.n	80016c8 <Init_Motors+0xa8>
		myMotorBR_write(1010);

		Delay_us(7800);
	}

	USART_puts(USART1, "Starting\n");
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <Init_Motors+0xf4>)
 8001700:	4909      	ldr	r1, [pc, #36]	; (8001728 <Init_Motors+0x108>)
 8001702:	f7ff fec3 	bl	800148c <USART_puts>
	Delay(2000);
 8001706:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800170a:	f7ff fe53 	bl	80013b4 <Delay>
}
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40011000 	.word	0x40011000
 8001718:	08006270 	.word	0x08006270
 800171c:	08006280 	.word	0x08006280
 8001720:	08006294 	.word	0x08006294
 8001724:	080062a8 	.word	0x080062a8
 8001728:	080062b4 	.word	0x080062b4

0800172c <Motors_write>:


void Motors_write(uint32_t deg_FL, uint32_t deg_FR, uint32_t deg_BL, uint32_t deg_BR)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]

	GPIO_ResetBits(GPIOA, GPIO_Pin_0);
 800173a:	48a8      	ldr	r0, [pc, #672]	; (80019dc <Motors_write+0x2b0>)
 800173c:	2101      	movs	r1, #1
 800173e:	f002 fb8f 	bl	8003e60 <GPIO_ResetBits>
	GPIO_ResetBits(GPIOA, GPIO_Pin_1);
 8001742:	48a6      	ldr	r0, [pc, #664]	; (80019dc <Motors_write+0x2b0>)
 8001744:	2102      	movs	r1, #2
 8001746:	f002 fb8b 	bl	8003e60 <GPIO_ResetBits>
	GPIO_ResetBits(GPIOA, GPIO_Pin_2);
 800174a:	48a4      	ldr	r0, [pc, #656]	; (80019dc <Motors_write+0x2b0>)
 800174c:	2104      	movs	r1, #4
 800174e:	f002 fb87 	bl	8003e60 <GPIO_ResetBits>
	GPIO_ResetBits(GPIOA, GPIO_Pin_3);
 8001752:	48a2      	ldr	r0, [pc, #648]	; (80019dc <Motors_write+0x2b0>)
 8001754:	2108      	movs	r1, #8
 8001756:	f002 fb83 	bl	8003e60 <GPIO_ResetBits>

	if(deg_FL <= deg_FR && deg_FL <= deg_BL && deg_FL <= deg_BR)
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	429a      	cmp	r2, r3
 8001760:	f200 80e0 	bhi.w	8001924 <Motors_write+0x1f8>
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	f200 80db 	bhi.w	8001924 <Motors_write+0x1f8>
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	f200 80d6 	bhi.w	8001924 <Motors_write+0x1f8>
	{

		Delay_us(deg_FL);
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7ff fe07 	bl	800138c <Delay_us>
		GPIO_SetBits(GPIOA, GPIO_Pin_0);
 800177e:	4897      	ldr	r0, [pc, #604]	; (80019dc <Motors_write+0x2b0>)
 8001780:	2101      	movs	r1, #1
 8001782:	f002 fb5f 	bl	8003e44 <GPIO_SetBits>

		if(deg_FR <= deg_BL && deg_FR <= deg_BR)
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	d840      	bhi.n	8001810 <Motors_write+0xe4>
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d83c      	bhi.n	8001810 <Motors_write+0xe4>
		{
			Delay_us(deg_FR - deg_FL);
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fdf5 	bl	800138c <Delay_us>
			GPIO_SetBits(GPIOA, GPIO_Pin_1);
 80017a2:	488e      	ldr	r0, [pc, #568]	; (80019dc <Motors_write+0x2b0>)
 80017a4:	2102      	movs	r1, #2
 80017a6:	f002 fb4d 	bl	8003e44 <GPIO_SetBits>

			if(deg_BL <= deg_BR)
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d814      	bhi.n	80017dc <Motors_write+0xb0>
			{
				Delay_us(deg_BL - deg_FR);
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fde7 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_2);
 80017be:	4887      	ldr	r0, [pc, #540]	; (80019dc <Motors_write+0x2b0>)
 80017c0:	2104      	movs	r1, #4
 80017c2:	f002 fb3f 	bl	8003e44 <GPIO_SetBits>
				Delay_us(deg_BR - deg_BL);
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fddd 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_3);
 80017d2:	4882      	ldr	r0, [pc, #520]	; (80019dc <Motors_write+0x2b0>)
 80017d4:	2108      	movs	r1, #8
 80017d6:	f002 fb35 	bl	8003e44 <GPIO_SetBits>
 80017da:	e018      	b.n	800180e <Motors_write+0xe2>
			}

			else if(deg_BR < deg_BL)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d214      	bcs.n	800180e <Motors_write+0xe2>
			{
				Delay_us(deg_BR - deg_FR);
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fdce 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_3);
 80017f0:	487a      	ldr	r0, [pc, #488]	; (80019dc <Motors_write+0x2b0>)
 80017f2:	2108      	movs	r1, #8
 80017f4:	f002 fb26 	bl	8003e44 <GPIO_SetBits>
				Delay_us(deg_BL - deg_BR);
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fdc4 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001804:	4875      	ldr	r0, [pc, #468]	; (80019dc <Motors_write+0x2b0>)
 8001806:	2104      	movs	r1, #4
 8001808:	f002 fb1c 	bl	8003e44 <GPIO_SetBits>
		if(deg_FR <= deg_BL && deg_FR <= deg_BR)
		{
			Delay_us(deg_FR - deg_FL);
			GPIO_SetBits(GPIOA, GPIO_Pin_1);

			if(deg_BL <= deg_BR)
 800180c:	e089      	b.n	8001922 <Motors_write+0x1f6>
 800180e:	e088      	b.n	8001922 <Motors_write+0x1f6>
				Delay_us(deg_BL - deg_BR);
				GPIO_SetBits(GPIOA, GPIO_Pin_2);
			}
		}

		else if(deg_BL < deg_FR && deg_BL <= deg_BR)
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d240      	bcs.n	800189a <Motors_write+0x16e>
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d83c      	bhi.n	800189a <Motors_write+0x16e>
		{
			Delay_us(deg_BL - deg_FL);
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fdb0 	bl	800138c <Delay_us>
			GPIO_SetBits(GPIOA, GPIO_Pin_2);
 800182c:	486b      	ldr	r0, [pc, #428]	; (80019dc <Motors_write+0x2b0>)
 800182e:	2104      	movs	r1, #4
 8001830:	f002 fb08 	bl	8003e44 <GPIO_SetBits>

			if(deg_FR <= deg_BR)
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d814      	bhi.n	8001866 <Motors_write+0x13a>
			{
				Delay_us(deg_FR - deg_BL);
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fda2 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001848:	4864      	ldr	r0, [pc, #400]	; (80019dc <Motors_write+0x2b0>)
 800184a:	2102      	movs	r1, #2
 800184c:	f002 fafa 	bl	8003e44 <GPIO_SetBits>
				Delay_us(deg_BR - deg_FR);
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fd98 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_3);
 800185c:	485f      	ldr	r0, [pc, #380]	; (80019dc <Motors_write+0x2b0>)
 800185e:	2108      	movs	r1, #8
 8001860:	f002 faf0 	bl	8003e44 <GPIO_SetBits>
 8001864:	e018      	b.n	8001898 <Motors_write+0x16c>
			}

			else if(deg_BR < deg_FR)
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	429a      	cmp	r2, r3
 800186c:	d214      	bcs.n	8001898 <Motors_write+0x16c>
			{
				Delay_us(deg_BR - deg_BL);
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fd89 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_3);
 800187a:	4858      	ldr	r0, [pc, #352]	; (80019dc <Motors_write+0x2b0>)
 800187c:	2108      	movs	r1, #8
 800187e:	f002 fae1 	bl	8003e44 <GPIO_SetBits>
				Delay_us(deg_FR - deg_BR);
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fd7f 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_1);
 800188e:	4853      	ldr	r0, [pc, #332]	; (80019dc <Motors_write+0x2b0>)
 8001890:	2102      	movs	r1, #2
 8001892:	f002 fad7 	bl	8003e44 <GPIO_SetBits>
		else if(deg_BL < deg_FR && deg_BL <= deg_BR)
		{
			Delay_us(deg_BL - deg_FL);
			GPIO_SetBits(GPIOA, GPIO_Pin_2);

			if(deg_FR <= deg_BR)
 8001896:	e044      	b.n	8001922 <Motors_write+0x1f6>
 8001898:	e043      	b.n	8001922 <Motors_write+0x1f6>
				Delay_us(deg_FR - deg_BR);
				GPIO_SetBits(GPIOA, GPIO_Pin_1);
			}
		}

		else if(deg_BR < deg_FR && deg_BR < deg_BL)
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d23f      	bcs.n	8001922 <Motors_write+0x1f6>
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d23b      	bcs.n	8001922 <Motors_write+0x1f6>
		{
			Delay_us(deg_BR - deg_FL);
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fd6b 	bl	800138c <Delay_us>
			GPIO_SetBits(GPIOA, GPIO_Pin_3);
 80018b6:	4849      	ldr	r0, [pc, #292]	; (80019dc <Motors_write+0x2b0>)
 80018b8:	2108      	movs	r1, #8
 80018ba:	f002 fac3 	bl	8003e44 <GPIO_SetBits>

			if(deg_FR <= deg_BL)
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d814      	bhi.n	80018f0 <Motors_write+0x1c4>
			{
				Delay_us(deg_FR - deg_BR);
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fd5d 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_1);
 80018d2:	4842      	ldr	r0, [pc, #264]	; (80019dc <Motors_write+0x2b0>)
 80018d4:	2102      	movs	r1, #2
 80018d6:	f002 fab5 	bl	8003e44 <GPIO_SetBits>
				Delay_us(deg_BL - deg_FR);
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fd53 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_2);
 80018e6:	483d      	ldr	r0, [pc, #244]	; (80019dc <Motors_write+0x2b0>)
 80018e8:	2104      	movs	r1, #4
 80018ea:	f002 faab 	bl	8003e44 <GPIO_SetBits>
 80018ee:	e018      	b.n	8001922 <Motors_write+0x1f6>
			}

			else if(deg_BL < deg_FR)
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d214      	bcs.n	8001922 <Motors_write+0x1f6>
			{
				Delay_us(deg_BL - deg_BR);
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fd44 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001904:	4835      	ldr	r0, [pc, #212]	; (80019dc <Motors_write+0x2b0>)
 8001906:	2104      	movs	r1, #4
 8001908:	f002 fa9c 	bl	8003e44 <GPIO_SetBits>
				Delay_us(deg_FR - deg_BL);
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fd3a 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001918:	4830      	ldr	r0, [pc, #192]	; (80019dc <Motors_write+0x2b0>)
 800191a:	2102      	movs	r1, #2
 800191c:	f002 fa92 	bl	8003e44 <GPIO_SetBits>
	{

		Delay_us(deg_FL);
		GPIO_SetBits(GPIOA, GPIO_Pin_0);

		if(deg_FR <= deg_BL && deg_FR <= deg_BR)
 8001920:	e2ad      	b.n	8001e7e <Motors_write+0x752>
 8001922:	e2ac      	b.n	8001e7e <Motors_write+0x752>
			}
		}

	}

	else if(deg_FR < deg_FL && deg_FR <= deg_BL && deg_FR <= deg_BR)
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	f080 80e3 	bcs.w	8001af4 <Motors_write+0x3c8>
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	f200 80de 	bhi.w	8001af4 <Motors_write+0x3c8>
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	f200 80d9 	bhi.w	8001af4 <Motors_write+0x3c8>
		{
			Delay_us(deg_FR);
 8001942:	68b8      	ldr	r0, [r7, #8]
 8001944:	f7ff fd22 	bl	800138c <Delay_us>
			GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001948:	4824      	ldr	r0, [pc, #144]	; (80019dc <Motors_write+0x2b0>)
 800194a:	2102      	movs	r1, #2
 800194c:	f002 fa7a 	bl	8003e44 <GPIO_SetBits>

			if(deg_FL <= deg_BL && deg_FL <= deg_BR)
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	d843      	bhi.n	80019e0 <Motors_write+0x2b4>
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d83f      	bhi.n	80019e0 <Motors_write+0x2b4>
			{
				Delay_us(deg_FL - deg_FR);
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fd10 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_0);
 800196c:	481b      	ldr	r0, [pc, #108]	; (80019dc <Motors_write+0x2b0>)
 800196e:	2101      	movs	r1, #1
 8001970:	f002 fa68 	bl	8003e44 <GPIO_SetBits>

				if(deg_BL <= deg_BR)
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d814      	bhi.n	80019a6 <Motors_write+0x27a>
				{
					Delay_us(deg_BL - deg_FL);
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fd02 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001988:	4814      	ldr	r0, [pc, #80]	; (80019dc <Motors_write+0x2b0>)
 800198a:	2104      	movs	r1, #4
 800198c:	f002 fa5a 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_BR - deg_FL);
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fcf8 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_3);
 800199c:	480f      	ldr	r0, [pc, #60]	; (80019dc <Motors_write+0x2b0>)
 800199e:	2108      	movs	r1, #8
 80019a0:	f002 fa50 	bl	8003e44 <GPIO_SetBits>
 80019a4:	e018      	b.n	80019d8 <Motors_write+0x2ac>
				}

				else if(deg_BR < deg_BL)
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d214      	bcs.n	80019d8 <Motors_write+0x2ac>
				{
					Delay_us(deg_BR - deg_FL);
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fce9 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_3);
 80019ba:	4808      	ldr	r0, [pc, #32]	; (80019dc <Motors_write+0x2b0>)
 80019bc:	2108      	movs	r1, #8
 80019be:	f002 fa41 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_BL - deg_BR);
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fcdf 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_2);
 80019ce:	4803      	ldr	r0, [pc, #12]	; (80019dc <Motors_write+0x2b0>)
 80019d0:	2104      	movs	r1, #4
 80019d2:	f002 fa37 	bl	8003e44 <GPIO_SetBits>
			if(deg_FL <= deg_BL && deg_FL <= deg_BR)
			{
				Delay_us(deg_FL - deg_FR);
				GPIO_SetBits(GPIOA, GPIO_Pin_0);

				if(deg_BL <= deg_BR)
 80019d6:	e08c      	b.n	8001af2 <Motors_write+0x3c6>
 80019d8:	e08b      	b.n	8001af2 <Motors_write+0x3c6>
 80019da:	bf00      	nop
 80019dc:	40020000 	.word	0x40020000
					Delay_us(deg_BL - deg_BR);
					GPIO_SetBits(GPIOA, GPIO_Pin_2);
				}
			}

			else if(deg_BL < deg_FL && deg_BL <= deg_BR)
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d240      	bcs.n	8001a6a <Motors_write+0x33e>
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d83c      	bhi.n	8001a6a <Motors_write+0x33e>
			{
				Delay_us(deg_BL - deg_FR);
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fcc8 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_2);
 80019fc:	48a0      	ldr	r0, [pc, #640]	; (8001c80 <Motors_write+0x554>)
 80019fe:	2104      	movs	r1, #4
 8001a00:	f002 fa20 	bl	8003e44 <GPIO_SetBits>

				if(deg_FL <= deg_BR)
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d814      	bhi.n	8001a36 <Motors_write+0x30a>
				{
					Delay_us(deg_FL - deg_BL);
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fcba 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001a18:	4899      	ldr	r0, [pc, #612]	; (8001c80 <Motors_write+0x554>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	f002 fa12 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_BR - deg_FL);
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fcb0 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001a2c:	4894      	ldr	r0, [pc, #592]	; (8001c80 <Motors_write+0x554>)
 8001a2e:	2108      	movs	r1, #8
 8001a30:	f002 fa08 	bl	8003e44 <GPIO_SetBits>
 8001a34:	e018      	b.n	8001a68 <Motors_write+0x33c>
				}

				else if(deg_BR < deg_FL)
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d214      	bcs.n	8001a68 <Motors_write+0x33c>
				{
					Delay_us(deg_BR - deg_BL);
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fca1 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001a4a:	488d      	ldr	r0, [pc, #564]	; (8001c80 <Motors_write+0x554>)
 8001a4c:	2108      	movs	r1, #8
 8001a4e:	f002 f9f9 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FL - deg_BR);
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fc97 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001a5e:	4888      	ldr	r0, [pc, #544]	; (8001c80 <Motors_write+0x554>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	f002 f9ef 	bl	8003e44 <GPIO_SetBits>
			else if(deg_BL < deg_FL && deg_BL <= deg_BR)
			{
				Delay_us(deg_BL - deg_FR);
				GPIO_SetBits(GPIOA, GPIO_Pin_2);

				if(deg_FL <= deg_BR)
 8001a66:	e044      	b.n	8001af2 <Motors_write+0x3c6>
 8001a68:	e043      	b.n	8001af2 <Motors_write+0x3c6>
					Delay_us(deg_FL - deg_BR);
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
				}
			}

			else if(deg_BR < deg_FL && deg_BR < deg_BL)
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d23f      	bcs.n	8001af2 <Motors_write+0x3c6>
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d23b      	bcs.n	8001af2 <Motors_write+0x3c6>
			{
				Delay_us(deg_BR - deg_FR);
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc83 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001a86:	487e      	ldr	r0, [pc, #504]	; (8001c80 <Motors_write+0x554>)
 8001a88:	2108      	movs	r1, #8
 8001a8a:	f002 f9db 	bl	8003e44 <GPIO_SetBits>

				if(deg_FL <= deg_BL)
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d814      	bhi.n	8001ac0 <Motors_write+0x394>
				{
					Delay_us(deg_FL - deg_BR);
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fc75 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001aa2:	4877      	ldr	r0, [pc, #476]	; (8001c80 <Motors_write+0x554>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	f002 f9cd 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_BL - deg_FL);
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fc6b 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001ab6:	4872      	ldr	r0, [pc, #456]	; (8001c80 <Motors_write+0x554>)
 8001ab8:	2104      	movs	r1, #4
 8001aba:	f002 f9c3 	bl	8003e44 <GPIO_SetBits>
 8001abe:	e018      	b.n	8001af2 <Motors_write+0x3c6>
				}

				else if(deg_BL < deg_FL)
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d214      	bcs.n	8001af2 <Motors_write+0x3c6>
				{
					Delay_us(deg_BL - deg_BR);
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fc5c 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001ad4:	486a      	ldr	r0, [pc, #424]	; (8001c80 <Motors_write+0x554>)
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	f002 f9b4 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FL - deg_BL);
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fc52 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001ae8:	4865      	ldr	r0, [pc, #404]	; (8001c80 <Motors_write+0x554>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	f002 f9aa 	bl	8003e44 <GPIO_SetBits>
	else if(deg_FR < deg_FL && deg_FR <= deg_BL && deg_FR <= deg_BR)
		{
			Delay_us(deg_FR);
			GPIO_SetBits(GPIOA, GPIO_Pin_1);

			if(deg_FL <= deg_BL && deg_FL <= deg_BR)
 8001af0:	e1c5      	b.n	8001e7e <Motors_write+0x752>
 8001af2:	e1c4      	b.n	8001e7e <Motors_write+0x752>
				}
			}

		}

	else if(deg_BL < deg_FL && deg_BL < deg_FR && deg_BL <= deg_BR)
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f080 80dd 	bcs.w	8001cb8 <Motors_write+0x58c>
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	f080 80d8 	bcs.w	8001cb8 <Motors_write+0x58c>
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f200 80d3 	bhi.w	8001cb8 <Motors_write+0x58c>
		{
			Delay_us(deg_BL);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fc3a 	bl	800138c <Delay_us>
			GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001b18:	4859      	ldr	r0, [pc, #356]	; (8001c80 <Motors_write+0x554>)
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	f002 f992 	bl	8003e44 <GPIO_SetBits>

			if(deg_FL <= deg_FR && deg_FL <= deg_BR)
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d83b      	bhi.n	8001ba0 <Motors_write+0x474>
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d837      	bhi.n	8001ba0 <Motors_write+0x474>
			{
				Delay_us(deg_FL - deg_BL);
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fc28 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001b3c:	4850      	ldr	r0, [pc, #320]	; (8001c80 <Motors_write+0x554>)
 8001b3e:	2101      	movs	r1, #1
 8001b40:	f002 f980 	bl	8003e44 <GPIO_SetBits>

				if(deg_FR <= deg_BR)
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d814      	bhi.n	8001b76 <Motors_write+0x44a>
				{
					Delay_us(deg_FR - deg_FL);
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fc1a 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001b58:	4849      	ldr	r0, [pc, #292]	; (8001c80 <Motors_write+0x554>)
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	f002 f972 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_BR - deg_FR);
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fc10 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001b6c:	4844      	ldr	r0, [pc, #272]	; (8001c80 <Motors_write+0x554>)
 8001b6e:	2108      	movs	r1, #8
 8001b70:	f002 f968 	bl	8003e44 <GPIO_SetBits>
			if(deg_FL <= deg_FR && deg_FL <= deg_BR)
			{
				Delay_us(deg_FL - deg_BL);
				GPIO_SetBits(GPIOA, GPIO_Pin_0);

				if(deg_FR <= deg_BR)
 8001b74:	e09f      	b.n	8001cb6 <Motors_write+0x58a>
					GPIO_SetBits(GPIOA, GPIO_Pin_3);
				}

				else
				{
					Delay_us(deg_BR - deg_FL);
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fc05 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001b82:	483f      	ldr	r0, [pc, #252]	; (8001c80 <Motors_write+0x554>)
 8001b84:	2108      	movs	r1, #8
 8001b86:	f002 f95d 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FR - deg_BR);
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fbfb 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001b96:	483a      	ldr	r0, [pc, #232]	; (8001c80 <Motors_write+0x554>)
 8001b98:	2102      	movs	r1, #2
 8001b9a:	f002 f953 	bl	8003e44 <GPIO_SetBits>
			if(deg_FL <= deg_FR && deg_FL <= deg_BR)
			{
				Delay_us(deg_FL - deg_BL);
				GPIO_SetBits(GPIOA, GPIO_Pin_0);

				if(deg_FR <= deg_BR)
 8001b9e:	e08a      	b.n	8001cb6 <Motors_write+0x58a>
					Delay_us(deg_FR - deg_BR);
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
				}
			}

			else if(deg_FR < deg_FL && deg_FR <= deg_BR)
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d240      	bcs.n	8001c2a <Motors_write+0x4fe>
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d83c      	bhi.n	8001c2a <Motors_write+0x4fe>
			{
				Delay_us(deg_FR - deg_BL);
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fbe8 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001bbc:	4830      	ldr	r0, [pc, #192]	; (8001c80 <Motors_write+0x554>)
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	f002 f940 	bl	8003e44 <GPIO_SetBits>

				if(deg_FL <= deg_BR)
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d814      	bhi.n	8001bf6 <Motors_write+0x4ca>
				{
					Delay_us(deg_FL - deg_FR);
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fbda 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001bd8:	4829      	ldr	r0, [pc, #164]	; (8001c80 <Motors_write+0x554>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	f002 f932 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_BR - deg_FL);
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fbd0 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001bec:	4824      	ldr	r0, [pc, #144]	; (8001c80 <Motors_write+0x554>)
 8001bee:	2108      	movs	r1, #8
 8001bf0:	f002 f928 	bl	8003e44 <GPIO_SetBits>
 8001bf4:	e018      	b.n	8001c28 <Motors_write+0x4fc>
				}

				else if(deg_BR < deg_FL)
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d214      	bcs.n	8001c28 <Motors_write+0x4fc>
				{
					Delay_us(deg_BR - deg_FR);
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fbc1 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001c0a:	481d      	ldr	r0, [pc, #116]	; (8001c80 <Motors_write+0x554>)
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	f002 f919 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FL - deg_BR);
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fbb7 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001c1e:	4818      	ldr	r0, [pc, #96]	; (8001c80 <Motors_write+0x554>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	f002 f90f 	bl	8003e44 <GPIO_SetBits>
			else if(deg_FR < deg_FL && deg_FR <= deg_BR)
			{
				Delay_us(deg_FR - deg_BL);
				GPIO_SetBits(GPIOA, GPIO_Pin_1);

				if(deg_FL <= deg_BR)
 8001c26:	e046      	b.n	8001cb6 <Motors_write+0x58a>
 8001c28:	e045      	b.n	8001cb6 <Motors_write+0x58a>
					Delay_us(deg_FL - deg_BR);
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
				}
			}

			else if(deg_BR < deg_FL && deg_BR < deg_FR)
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d241      	bcs.n	8001cb6 <Motors_write+0x58a>
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d23d      	bcs.n	8001cb6 <Motors_write+0x58a>
			{
				Delay_us(deg_BR - deg_BL);
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fba3 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001c46:	480e      	ldr	r0, [pc, #56]	; (8001c80 <Motors_write+0x554>)
 8001c48:	2108      	movs	r1, #8
 8001c4a:	f002 f8fb 	bl	8003e44 <GPIO_SetBits>

				if(deg_FL <= deg_FR)
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d816      	bhi.n	8001c84 <Motors_write+0x558>
				{
					Delay_us(deg_FL - deg_BR);
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fb95 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001c62:	4807      	ldr	r0, [pc, #28]	; (8001c80 <Motors_write+0x554>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	f002 f8ed 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FR - deg_FL);
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fb8b 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001c76:	4802      	ldr	r0, [pc, #8]	; (8001c80 <Motors_write+0x554>)
 8001c78:	2102      	movs	r1, #2
 8001c7a:	f002 f8e3 	bl	8003e44 <GPIO_SetBits>
 8001c7e:	e01a      	b.n	8001cb6 <Motors_write+0x58a>
 8001c80:	40020000 	.word	0x40020000
				}

				else if(deg_FR < deg_FL)
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d214      	bcs.n	8001cb6 <Motors_write+0x58a>
				{
					Delay_us(deg_FR - deg_BR);
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fb7a 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001c98:	487a      	ldr	r0, [pc, #488]	; (8001e84 <Motors_write+0x758>)
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	f002 f8d2 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FL - deg_FR);
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fb70 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001cac:	4875      	ldr	r0, [pc, #468]	; (8001e84 <Motors_write+0x758>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	f002 f8c8 	bl	8003e44 <GPIO_SetBits>
	else if(deg_BL < deg_FL && deg_BL < deg_FR && deg_BL <= deg_BR)
		{
			Delay_us(deg_BL);
			GPIO_SetBits(GPIOA, GPIO_Pin_2);

			if(deg_FL <= deg_FR && deg_FL <= deg_BR)
 8001cb4:	e0e3      	b.n	8001e7e <Motors_write+0x752>
 8001cb6:	e0e2      	b.n	8001e7e <Motors_write+0x752>
			}

		}


	else if(deg_BR < deg_FL && deg_BR < deg_FR && deg_BR < deg_BL)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f080 80de 	bcs.w	8001e7e <Motors_write+0x752>
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	f080 80d9 	bcs.w	8001e7e <Motors_write+0x752>
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f080 80d4 	bcs.w	8001e7e <Motors_write+0x752>
		{
			Delay_us(deg_BR);
 8001cd6:	6838      	ldr	r0, [r7, #0]
 8001cd8:	f7ff fb58 	bl	800138c <Delay_us>
			GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8001cdc:	4869      	ldr	r0, [pc, #420]	; (8001e84 <Motors_write+0x758>)
 8001cde:	2108      	movs	r1, #8
 8001ce0:	f002 f8b0 	bl	8003e44 <GPIO_SetBits>

			if(deg_FL <= deg_FR && deg_FL <= deg_BL)
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d840      	bhi.n	8001d6e <Motors_write+0x642>
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d83c      	bhi.n	8001d6e <Motors_write+0x642>
			{
				Delay_us(deg_FL - deg_BR);
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fb46 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001d00:	4860      	ldr	r0, [pc, #384]	; (8001e84 <Motors_write+0x758>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	f002 f89e 	bl	8003e44 <GPIO_SetBits>

				if(deg_FR <= deg_BL)
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d814      	bhi.n	8001d3a <Motors_write+0x60e>
				{
					Delay_us(deg_FR - deg_FL);
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fb38 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001d1c:	4859      	ldr	r0, [pc, #356]	; (8001e84 <Motors_write+0x758>)
 8001d1e:	2102      	movs	r1, #2
 8001d20:	f002 f890 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_BL - deg_FR);
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fb2e 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001d30:	4854      	ldr	r0, [pc, #336]	; (8001e84 <Motors_write+0x758>)
 8001d32:	2104      	movs	r1, #4
 8001d34:	f002 f886 	bl	8003e44 <GPIO_SetBits>
 8001d38:	e018      	b.n	8001d6c <Motors_write+0x640>
				}

				else if(deg_BL < deg_FR)
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d214      	bcs.n	8001d6c <Motors_write+0x640>
				{
					Delay_us(deg_BL - deg_FL);
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fb1f 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001d4e:	484d      	ldr	r0, [pc, #308]	; (8001e84 <Motors_write+0x758>)
 8001d50:	2104      	movs	r1, #4
 8001d52:	f002 f877 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FR - deg_BL);
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fb15 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001d62:	4848      	ldr	r0, [pc, #288]	; (8001e84 <Motors_write+0x758>)
 8001d64:	2102      	movs	r1, #2
 8001d66:	f002 f86d 	bl	8003e44 <GPIO_SetBits>
			if(deg_FL <= deg_FR && deg_FL <= deg_BL)
			{
				Delay_us(deg_FL - deg_BR);
				GPIO_SetBits(GPIOA, GPIO_Pin_0);

				if(deg_FR <= deg_BL)
 8001d6a:	e088      	b.n	8001e7e <Motors_write+0x752>
 8001d6c:	e087      	b.n	8001e7e <Motors_write+0x752>
					Delay_us(deg_FR - deg_BL);
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
				}
			}

			else if(deg_FR < deg_FL && deg_FR <= deg_BL)
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d240      	bcs.n	8001df8 <Motors_write+0x6cc>
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d83c      	bhi.n	8001df8 <Motors_write+0x6cc>
			{
				Delay_us(deg_FR - deg_BR);
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fb01 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001d8a:	483e      	ldr	r0, [pc, #248]	; (8001e84 <Motors_write+0x758>)
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	f002 f859 	bl	8003e44 <GPIO_SetBits>

				if(deg_FL <= deg_BL)
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d814      	bhi.n	8001dc4 <Motors_write+0x698>
				{
					Delay_us(deg_FL - deg_FR);
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff faf3 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001da6:	4837      	ldr	r0, [pc, #220]	; (8001e84 <Motors_write+0x758>)
 8001da8:	2101      	movs	r1, #1
 8001daa:	f002 f84b 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_BL - deg_FL);
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fae9 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001dba:	4832      	ldr	r0, [pc, #200]	; (8001e84 <Motors_write+0x758>)
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	f002 f841 	bl	8003e44 <GPIO_SetBits>
 8001dc2:	e018      	b.n	8001df6 <Motors_write+0x6ca>
				}

				else if(deg_BL < deg_FL)
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d214      	bcs.n	8001df6 <Motors_write+0x6ca>
				{
					Delay_us(deg_BL - deg_FR);
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fada 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001dd8:	482a      	ldr	r0, [pc, #168]	; (8001e84 <Motors_write+0x758>)
 8001dda:	2104      	movs	r1, #4
 8001ddc:	f002 f832 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FL - deg_BL);
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fad0 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001dec:	4825      	ldr	r0, [pc, #148]	; (8001e84 <Motors_write+0x758>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	f002 f828 	bl	8003e44 <GPIO_SetBits>
			else if(deg_FR < deg_FL && deg_FR <= deg_BL)
			{
				Delay_us(deg_FR - deg_BR);
				GPIO_SetBits(GPIOA, GPIO_Pin_1);

				if(deg_FL <= deg_BL)
 8001df4:	e043      	b.n	8001e7e <Motors_write+0x752>
 8001df6:	e042      	b.n	8001e7e <Motors_write+0x752>
					Delay_us(deg_FL - deg_BL);
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
				}
			}

			else if(deg_BL < deg_FL && deg_BL < deg_FR)
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d23e      	bcs.n	8001e7e <Motors_write+0x752>
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d23a      	bcs.n	8001e7e <Motors_write+0x752>
			{
				Delay_us(deg_BL - deg_BR);
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fabc 	bl	800138c <Delay_us>
				GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8001e14:	481b      	ldr	r0, [pc, #108]	; (8001e84 <Motors_write+0x758>)
 8001e16:	2104      	movs	r1, #4
 8001e18:	f002 f814 	bl	8003e44 <GPIO_SetBits>

				if(deg_FL <= deg_FR)
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d814      	bhi.n	8001e4e <Motors_write+0x722>
				{
					Delay_us(deg_FL - deg_BL);
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff faae 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001e30:	4814      	ldr	r0, [pc, #80]	; (8001e84 <Motors_write+0x758>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	f002 f806 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FR - deg_FL);
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff faa4 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001e44:	480f      	ldr	r0, [pc, #60]	; (8001e84 <Motors_write+0x758>)
 8001e46:	2102      	movs	r1, #2
 8001e48:	f001 fffc 	bl	8003e44 <GPIO_SetBits>
 8001e4c:	e017      	b.n	8001e7e <Motors_write+0x752>
				}

				else if(deg_FR < deg_FL)
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d213      	bcs.n	8001e7e <Motors_write+0x752>
				{
					Delay_us(deg_FR - deg_BL);
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fa95 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8001e62:	4808      	ldr	r0, [pc, #32]	; (8001e84 <Motors_write+0x758>)
 8001e64:	2102      	movs	r1, #2
 8001e66:	f001 ffed 	bl	8003e44 <GPIO_SetBits>
					Delay_us(deg_FL - deg_FR);
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fa8b 	bl	800138c <Delay_us>
					GPIO_SetBits(GPIOA, GPIO_Pin_0);
 8001e76:	4803      	ldr	r0, [pc, #12]	; (8001e84 <Motors_write+0x758>)
 8001e78:	2101      	movs	r1, #1
 8001e7a:	f001 ffe3 	bl	8003e44 <GPIO_SetBits>
				}
			}

		}
}
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40020000 	.word	0x40020000

08001e88 <Setup_MPU6050>:
#define SENSORS_SETUP_H_

#include "I2C_SensorCom.h"

void Setup_MPU6050()
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
    //Sets sample rate to 8000/1+7 = 1000Hz
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 0x07);
 8001e8e:	4889      	ldr	r0, [pc, #548]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001e90:	21d0      	movs	r1, #208	; 0xd0
 8001e92:	2219      	movs	r2, #25
 8001e94:	2307      	movs	r3, #7
 8001e96:	f7ff f8b5 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Disable FSync, 256Hz DLPF
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 0x00);
 8001e9a:	4886      	ldr	r0, [pc, #536]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001e9c:	21d0      	movs	r1, #208	; 0xd0
 8001e9e:	221a      	movs	r2, #26
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f7ff f8af 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Disable gyro self tests, scale of 500 degrees/s
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 0b00001000);  //0b00001000 for 500 deg/s
 8001ea6:	4883      	ldr	r0, [pc, #524]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001ea8:	21d0      	movs	r1, #208	; 0xd0
 8001eaa:	221b      	movs	r2, #27
 8001eac:	2308      	movs	r3, #8
 8001eae:	f7ff f8a9 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Disable accel self tests, scale of +-2g, no DHPF
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 0x00);
 8001eb2:	4880      	ldr	r0, [pc, #512]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001eb4:	21d0      	movs	r1, #208	; 0xd0
 8001eb6:	221c      	movs	r2, #28
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f7ff f8a3 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Freefall threshold of |0mg|
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_FF_THR, 0x00);
 8001ebe:	487d      	ldr	r0, [pc, #500]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001ec0:	21d0      	movs	r1, #208	; 0xd0
 8001ec2:	221d      	movs	r2, #29
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f7ff f89d 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Freefall duration limit of 0
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_FF_DUR, 0x00);
 8001eca:	487a      	ldr	r0, [pc, #488]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001ecc:	21d0      	movs	r1, #208	; 0xd0
 8001ece:	221e      	movs	r2, #30
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f7ff f897 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Motion threshold of 0mg
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_MOT_THR, 0x00);
 8001ed6:	4877      	ldr	r0, [pc, #476]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001ed8:	21d0      	movs	r1, #208	; 0xd0
 8001eda:	221f      	movs	r2, #31
 8001edc:	2300      	movs	r3, #0
 8001ede:	f7ff f891 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Motion duration of 0s
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_MOT_DUR, 0x00);
 8001ee2:	4874      	ldr	r0, [pc, #464]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001ee4:	21d0      	movs	r1, #208	; 0xd0
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f7ff f88b 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Zero motion threshold
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_ZRMOT_THR, 0x00);
 8001eee:	4871      	ldr	r0, [pc, #452]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001ef0:	21d0      	movs	r1, #208	; 0xd0
 8001ef2:	2221      	movs	r2, #33	; 0x21
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f7ff f885 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Zero motion duration threshold
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_ZRMOT_DUR, 0x00);
 8001efa:	486e      	ldr	r0, [pc, #440]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001efc:	21d0      	movs	r1, #208	; 0xd0
 8001efe:	2222      	movs	r2, #34	; 0x22
 8001f00:	2300      	movs	r3, #0
 8001f02:	f7ff f87f 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Disable sensor output to FIFO buffer
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_FIFO_EN, 0x00);
 8001f06:	486b      	ldr	r0, [pc, #428]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f08:	21d0      	movs	r1, #208	; 0xd0
 8001f0a:	2223      	movs	r2, #35	; 0x23
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f7ff f879 	bl	8001004 <I2C_Initialize_WritetoReg>

    //AUX I2C setup
    //Sets AUX I2C to single master control, plus other config
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_MST_CTRL, 0x00);
 8001f12:	4868      	ldr	r0, [pc, #416]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f14:	21d0      	movs	r1, #208	; 0xd0
 8001f16:	2224      	movs	r2, #36	; 0x24
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f7ff f873 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Setup AUX I2C slaves
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV0_ADDR, 0x00);
 8001f1e:	4865      	ldr	r0, [pc, #404]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f20:	21d0      	movs	r1, #208	; 0xd0
 8001f22:	2225      	movs	r2, #37	; 0x25
 8001f24:	2300      	movs	r3, #0
 8001f26:	f7ff f86d 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV0_REG, 0x00);
 8001f2a:	4862      	ldr	r0, [pc, #392]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f2c:	21d0      	movs	r1, #208	; 0xd0
 8001f2e:	2226      	movs	r2, #38	; 0x26
 8001f30:	2300      	movs	r3, #0
 8001f32:	f7ff f867 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV0_CTRL, 0x00);
 8001f36:	485f      	ldr	r0, [pc, #380]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f38:	21d0      	movs	r1, #208	; 0xd0
 8001f3a:	2227      	movs	r2, #39	; 0x27
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f7ff f861 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV1_ADDR, 0x00);
 8001f42:	485c      	ldr	r0, [pc, #368]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f44:	21d0      	movs	r1, #208	; 0xd0
 8001f46:	2228      	movs	r2, #40	; 0x28
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f7ff f85b 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV1_REG, 0x00);
 8001f4e:	4859      	ldr	r0, [pc, #356]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f50:	21d0      	movs	r1, #208	; 0xd0
 8001f52:	2229      	movs	r2, #41	; 0x29
 8001f54:	2300      	movs	r3, #0
 8001f56:	f7ff f855 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV1_CTRL, 0x00);
 8001f5a:	4856      	ldr	r0, [pc, #344]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f5c:	21d0      	movs	r1, #208	; 0xd0
 8001f5e:	222a      	movs	r2, #42	; 0x2a
 8001f60:	2300      	movs	r3, #0
 8001f62:	f7ff f84f 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV2_ADDR, 0x00);
 8001f66:	4853      	ldr	r0, [pc, #332]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f68:	21d0      	movs	r1, #208	; 0xd0
 8001f6a:	222b      	movs	r2, #43	; 0x2b
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f7ff f849 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV2_REG, 0x00);
 8001f72:	4850      	ldr	r0, [pc, #320]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f74:	21d0      	movs	r1, #208	; 0xd0
 8001f76:	222c      	movs	r2, #44	; 0x2c
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f7ff f843 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV2_CTRL, 0x00);
 8001f7e:	484d      	ldr	r0, [pc, #308]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f80:	21d0      	movs	r1, #208	; 0xd0
 8001f82:	222d      	movs	r2, #45	; 0x2d
 8001f84:	2300      	movs	r3, #0
 8001f86:	f7ff f83d 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV3_ADDR, 0x00);
 8001f8a:	484a      	ldr	r0, [pc, #296]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f8c:	21d0      	movs	r1, #208	; 0xd0
 8001f8e:	222e      	movs	r2, #46	; 0x2e
 8001f90:	2300      	movs	r3, #0
 8001f92:	f7ff f837 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV3_REG, 0x00);
 8001f96:	4847      	ldr	r0, [pc, #284]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001f98:	21d0      	movs	r1, #208	; 0xd0
 8001f9a:	222f      	movs	r2, #47	; 0x2f
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f7ff f831 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV3_CTRL, 0x00);
 8001fa2:	4844      	ldr	r0, [pc, #272]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001fa4:	21d0      	movs	r1, #208	; 0xd0
 8001fa6:	2230      	movs	r2, #48	; 0x30
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f7ff f82b 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV4_ADDR, 0x00);
 8001fae:	4841      	ldr	r0, [pc, #260]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001fb0:	21d0      	movs	r1, #208	; 0xd0
 8001fb2:	2231      	movs	r2, #49	; 0x31
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f7ff f825 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV4_REG, 0x00);
 8001fba:	483e      	ldr	r0, [pc, #248]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001fbc:	21d0      	movs	r1, #208	; 0xd0
 8001fbe:	2232      	movs	r2, #50	; 0x32
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f7ff f81f 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV4_DO, 0x00);
 8001fc6:	483b      	ldr	r0, [pc, #236]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001fc8:	21d0      	movs	r1, #208	; 0xd0
 8001fca:	2233      	movs	r2, #51	; 0x33
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f7ff f819 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV4_CTRL, 0x00);
 8001fd2:	4838      	ldr	r0, [pc, #224]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001fd4:	21d0      	movs	r1, #208	; 0xd0
 8001fd6:	2234      	movs	r2, #52	; 0x34
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f7ff f813 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV4_DI, 0x00);
 8001fde:	4835      	ldr	r0, [pc, #212]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001fe0:	21d0      	movs	r1, #208	; 0xd0
 8001fe2:	2235      	movs	r2, #53	; 0x35
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f7ff f80d 	bl	8001004 <I2C_Initialize_WritetoReg>

    //MPU6050_RA_I2C_MST_STATUS //Read-only
    //Setup INT pin and AUX I2C pass through
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 0x00);
 8001fea:	4832      	ldr	r0, [pc, #200]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001fec:	21d0      	movs	r1, #208	; 0xd0
 8001fee:	2237      	movs	r2, #55	; 0x37
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f7ff f807 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Enable data ready interrupt
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 0x00);
 8001ff6:	482f      	ldr	r0, [pc, #188]	; (80020b4 <Setup_MPU6050+0x22c>)
 8001ff8:	21d0      	movs	r1, #208	; 0xd0
 8001ffa:	2238      	movs	r2, #56	; 0x38
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f7ff f801 	bl	8001004 <I2C_Initialize_WritetoReg>
    //MPU6050_RA_EXT_SENS_DATA_22     //Read-only
    //MPU6050_RA_EXT_SENS_DATA_23     //Read-only
    //MPU6050_RA_MOT_DETECT_STATUS     //Read-only

    //Slave out, dont care
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV0_DO, 0x00);
 8002002:	482c      	ldr	r0, [pc, #176]	; (80020b4 <Setup_MPU6050+0x22c>)
 8002004:	21d0      	movs	r1, #208	; 0xd0
 8002006:	2263      	movs	r2, #99	; 0x63
 8002008:	2300      	movs	r3, #0
 800200a:	f7fe fffb 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV1_DO, 0x00);
 800200e:	4829      	ldr	r0, [pc, #164]	; (80020b4 <Setup_MPU6050+0x22c>)
 8002010:	21d0      	movs	r1, #208	; 0xd0
 8002012:	2264      	movs	r2, #100	; 0x64
 8002014:	2300      	movs	r3, #0
 8002016:	f7fe fff5 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV2_DO, 0x00);
 800201a:	4826      	ldr	r0, [pc, #152]	; (80020b4 <Setup_MPU6050+0x22c>)
 800201c:	21d0      	movs	r1, #208	; 0xd0
 800201e:	2265      	movs	r2, #101	; 0x65
 8002020:	2300      	movs	r3, #0
 8002022:	f7fe ffef 	bl	8001004 <I2C_Initialize_WritetoReg>
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_SLV3_DO, 0x00);
 8002026:	4823      	ldr	r0, [pc, #140]	; (80020b4 <Setup_MPU6050+0x22c>)
 8002028:	21d0      	movs	r1, #208	; 0xd0
 800202a:	2266      	movs	r2, #102	; 0x66
 800202c:	2300      	movs	r3, #0
 800202e:	f7fe ffe9 	bl	8001004 <I2C_Initialize_WritetoReg>
    //More slave config
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_I2C_MST_DELAY_CTRL, 0x00);
 8002032:	4820      	ldr	r0, [pc, #128]	; (80020b4 <Setup_MPU6050+0x22c>)
 8002034:	21d0      	movs	r1, #208	; 0xd0
 8002036:	2267      	movs	r2, #103	; 0x67
 8002038:	2300      	movs	r3, #0
 800203a:	f7fe ffe3 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Reset sensor signal paths
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_SIGNAL_PATH_RESET, 0x00);
 800203e:	481d      	ldr	r0, [pc, #116]	; (80020b4 <Setup_MPU6050+0x22c>)
 8002040:	21d0      	movs	r1, #208	; 0xd0
 8002042:	2268      	movs	r2, #104	; 0x68
 8002044:	2300      	movs	r3, #0
 8002046:	f7fe ffdd 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Motion detection control
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_MOT_DETECT_CTRL, 0x00);
 800204a:	481a      	ldr	r0, [pc, #104]	; (80020b4 <Setup_MPU6050+0x22c>)
 800204c:	21d0      	movs	r1, #208	; 0xd0
 800204e:	2269      	movs	r2, #105	; 0x69
 8002050:	2300      	movs	r3, #0
 8002052:	f7fe ffd7 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Disables FIFO, AUX I2C, FIFO and I2C reset bits to 0
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 0x00);
 8002056:	4817      	ldr	r0, [pc, #92]	; (80020b4 <Setup_MPU6050+0x22c>)
 8002058:	21d0      	movs	r1, #208	; 0xd0
 800205a:	226a      	movs	r2, #106	; 0x6a
 800205c:	2300      	movs	r3, #0
 800205e:	f7fe ffd1 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Sets clock source to gyro reference w/ PLL
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 0b00000010);
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <Setup_MPU6050+0x22c>)
 8002064:	21d0      	movs	r1, #208	; 0xd0
 8002066:	226b      	movs	r2, #107	; 0x6b
 8002068:	2302      	movs	r3, #2
 800206a:	f7fe ffcb 	bl	8001004 <I2C_Initialize_WritetoReg>
    //Controls frequency of wakeups in accel low power mode plus the sensor standby modes
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 0x00);
 800206e:	4811      	ldr	r0, [pc, #68]	; (80020b4 <Setup_MPU6050+0x22c>)
 8002070:	21d0      	movs	r1, #208	; 0xd0
 8002072:	226c      	movs	r2, #108	; 0x6c
 8002074:	2300      	movs	r3, #0
 8002076:	f7fe ffc5 	bl	8001004 <I2C_Initialize_WritetoReg>
    //MPU6050_RA_DMP_CFG_1            //Not in datasheet
    //MPU6050_RA_DMP_CFG_2            //Not in datasheet
    //MPU6050_RA_FIFO_COUNTH        //Read-only
    //MPU6050_RA_FIFO_COUNTL        //Read-only
    //Data transfer to and from the FIFO buffer
    I2C_Initialize_WritetoReg(I2C1, MPU6050_ADDRESS, MPU6050_RA_FIFO_R_W, 0x00);
 800207a:	480e      	ldr	r0, [pc, #56]	; (80020b4 <Setup_MPU6050+0x22c>)
 800207c:	21d0      	movs	r1, #208	; 0xd0
 800207e:	2274      	movs	r2, #116	; 0x74
 8002080:	2300      	movs	r3, #0
 8002082:	f7fe ffbf 	bl	8001004 <I2C_Initialize_WritetoReg>
    //MPU6050_RA_WHO_AM_I             //Read-only, I2C address

    GPIO_InitTypeDef  GPIO_InitStructure;
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002086:	2008      	movs	r0, #8
 8002088:	2101      	movs	r1, #1
 800208a:	f001 fbd9 	bl	8003840 <RCC_AHB1PeriphClockCmd>

    /* Configure PD12, PD13, PD14 and PD15 in output pushpull mode */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 800208e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002092:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002094:	2301      	movs	r3, #1
 8002096:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002098:	2300      	movs	r3, #0
 800209a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800209c:	2303      	movs	r3, #3
 800209e:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 80020a4:	463b      	mov	r3, r7
 80020a6:	4804      	ldr	r0, [pc, #16]	; (80020b8 <Setup_MPU6050+0x230>)
 80020a8:	4619      	mov	r1, r3
 80020aa:	f001 fe23 	bl	8003cf4 <GPIO_Init>

}
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40005400 	.word	0x40005400
 80020b8:	40020c00 	.word	0x40020c00

080020bc <Setup_HMC5883L>:

void Setup_HMC5883L()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	I2C_Initialize_WritetoReg(I2C1, HMC5883L_ADDRESS, HMC5883L_Reg_A, 0b01010100);
 80020c0:	4809      	ldr	r0, [pc, #36]	; (80020e8 <Setup_HMC5883L+0x2c>)
 80020c2:	213c      	movs	r1, #60	; 0x3c
 80020c4:	2200      	movs	r2, #0
 80020c6:	2354      	movs	r3, #84	; 0x54
 80020c8:	f7fe ff9c 	bl	8001004 <I2C_Initialize_WritetoReg>
	I2C_Initialize_WritetoReg(I2C1, HMC5883L_ADDRESS, HMC5883L_Reg_B, 0b00100000);
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <Setup_HMC5883L+0x2c>)
 80020ce:	213c      	movs	r1, #60	; 0x3c
 80020d0:	2201      	movs	r2, #1
 80020d2:	2320      	movs	r3, #32
 80020d4:	f7fe ff96 	bl	8001004 <I2C_Initialize_WritetoReg>
	I2C_Initialize_WritetoReg(I2C1, HMC5883L_ADDRESS, HMC5883L_Mode, 0b00000000);
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <Setup_HMC5883L+0x2c>)
 80020da:	213c      	movs	r1, #60	; 0x3c
 80020dc:	2202      	movs	r2, #2
 80020de:	2300      	movs	r3, #0
 80020e0:	f7fe ff90 	bl	8001004 <I2C_Initialize_WritetoReg>
}
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40005400 	.word	0x40005400

080020ec <Setup_BMP085>:


void Setup_BMP085()
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	I2C_Initialize_WritetoReg(I2C1, BMP085_ADDRESS, BMP085_Control, BMP085_PressureMode1);
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <Setup_BMP085+0x14>)
 80020f2:	21ee      	movs	r1, #238	; 0xee
 80020f4:	22f4      	movs	r2, #244	; 0xf4
 80020f6:	2334      	movs	r3, #52	; 0x34
 80020f8:	f7fe ff84 	bl	8001004 <I2C_Initialize_WritetoReg>
}
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40005400 	.word	0x40005400

08002104 <init_Discovery_LEDS>:
    NVIC_Init(&nvicStructure);
}


void init_Discovery_LEDS()
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800210a:	2004      	movs	r0, #4
 800210c:	2101      	movs	r1, #1
 800210e:	f001 fb97 	bl	8003840 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002112:	2010      	movs	r0, #16
 8002114:	2101      	movs	r1, #1
 8002116:	f001 fb93 	bl	8003840 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800211a:	2002      	movs	r0, #2
 800211c:	2101      	movs	r1, #1
 800211e:	f001 fb8f 	bl	8003840 <RCC_AHB1PeriphClockCmd>

    /* Configure PC13, PC14 and PC15 in output pushpull mode */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 8002122:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002126:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002128:	2301      	movs	r3, #1
 800212a:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800212c:	2300      	movs	r3, #0
 800212e:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002130:	2303      	movs	r3, #3
 8002132:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002138:	463b      	mov	r3, r7
 800213a:	4812      	ldr	r0, [pc, #72]	; (8002184 <init_Discovery_LEDS+0x80>)
 800213c:	4619      	mov	r1, r3
 800213e:	f001 fdd9 	bl	8003cf4 <GPIO_Init>

    /* Configure PE6 in output pushpull mode */

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002146:	2301      	movs	r3, #1
 8002148:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800214a:	2300      	movs	r3, #0
 800214c:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800214e:	2303      	movs	r3, #3
 8002150:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002156:	463b      	mov	r3, r7
 8002158:	480b      	ldr	r0, [pc, #44]	; (8002188 <init_Discovery_LEDS+0x84>)
 800215a:	4619      	mov	r1, r3
 800215c:	f001 fdca 	bl	8003cf4 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8002160:	23c0      	movs	r3, #192	; 0xc0
 8002162:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002164:	2301      	movs	r3, #1
 8002166:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002168:	2300      	movs	r3, #0
 800216a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800216c:	2303      	movs	r3, #3
 800216e:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002174:	463b      	mov	r3, r7
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <init_Discovery_LEDS+0x88>)
 8002178:	4619      	mov	r1, r3
 800217a:	f001 fdbb 	bl	8003cf4 <GPIO_Init>


}
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40020800 	.word	0x40020800
 8002188:	40021000 	.word	0x40021000
 800218c:	40020400 	.word	0x40020400

08002190 <init_MotorPortPins>:


void init_MotorPortPins()
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002196:	2001      	movs	r0, #1
 8002198:	2101      	movs	r1, #1
 800219a:	f001 fb51 	bl	8003840 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1| GPIO_Pin_2| GPIO_Pin_3;
 800219e:	230f      	movs	r3, #15
 80021a0:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80021a2:	2301      	movs	r3, #1
 80021a4:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80021a6:	2300      	movs	r3, #0
 80021a8:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80021aa:	2303      	movs	r3, #3
 80021ac:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80021b2:	463b      	mov	r3, r7
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <init_MotorPortPins+0x34>)
 80021b6:	4619      	mov	r1, r3
 80021b8:	f001 fd9c 	bl	8003cf4 <GPIO_Init>
}
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40020000 	.word	0x40020000

080021c8 <main>:


int main(void)
{
 80021c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021cc:	b090      	sub	sp, #64	; 0x40
 80021ce:	af08      	add	r7, sp, #32

	int i = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]

	ConState = 4000;
 80021d4:	4b44      	ldr	r3, [pc, #272]	; (80022e8 <main+0x120>)
 80021d6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80021da:	601a      	str	r2, [r3, #0]
	SysTick_Config(SystemCoreClock/1000000);
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <main+0x124>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <main+0x128>)
 80021e2:	fba3 1302 	umull	r1, r3, r3, r2
 80021e6:	0c9b      	lsrs	r3, r3, #18
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fdf7 	bl	8000ddc <SysTick_Config>

	for(i = 0; i <25; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e011      	b.n	8002218 <main+0x50>
	{
		CalAcc_X[i] = 0;
 80021f4:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <main+0x12c>)
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	2100      	movs	r1, #0
 80021fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		CalAcc_Y[i] = 0;
 80021fe:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <main+0x130>)
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	2100      	movs	r1, #0
 8002204:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		CalAcc_Z[i] = 0;
 8002208:	4b3c      	ldr	r3, [pc, #240]	; (80022fc <main+0x134>)
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	2100      	movs	r1, #0
 800220e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	int i = 0;

	ConState = 4000;
	SysTick_Config(SystemCoreClock/1000000);

	for(i = 0; i <25; i++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b18      	cmp	r3, #24
 800221c:	ddea      	ble.n	80021f4 <main+0x2c>
		CalAcc_X[i] = 0;
		CalAcc_Y[i] = 0;
		CalAcc_Z[i] = 0;
	}

    init_USART1(115200);
 800221e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002222:	f7ff f8d7 	bl	80013d4 <init_USART1>

	init_Discovery_LEDS();
 8002226:	f7ff ff6d 	bl	8002104 <init_Discovery_LEDS>

	GPIO_ResetBits(GPIOE, GPIO_Pin_6);
 800222a:	4835      	ldr	r0, [pc, #212]	; (8002300 <main+0x138>)
 800222c:	2140      	movs	r1, #64	; 0x40
 800222e:	f001 fe17 	bl	8003e60 <GPIO_ResetBits>
	GPIO_SetBits(GPIOC, GPIO_Pin_14);
 8002232:	4834      	ldr	r0, [pc, #208]	; (8002304 <main+0x13c>)
 8002234:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002238:	f001 fe04 	bl	8003e44 <GPIO_SetBits>
	GPIO_SetBits(GPIOC, GPIO_Pin_15);
 800223c:	4831      	ldr	r0, [pc, #196]	; (8002304 <main+0x13c>)
 800223e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002242:	f001 fdff 	bl	8003e44 <GPIO_SetBits>

	init_MotorPortPins();
 8002246:	f7ff ffa3 	bl	8002190 <init_MotorPortPins>

	GPIO_SetBits(GPIOA, GPIO_Pin_0);
 800224a:	482f      	ldr	r0, [pc, #188]	; (8002308 <main+0x140>)
 800224c:	2101      	movs	r1, #1
 800224e:	f001 fdf9 	bl	8003e44 <GPIO_SetBits>
	GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8002252:	482d      	ldr	r0, [pc, #180]	; (8002308 <main+0x140>)
 8002254:	2102      	movs	r1, #2
 8002256:	f001 fdf5 	bl	8003e44 <GPIO_SetBits>
	GPIO_SetBits(GPIOA, GPIO_Pin_2);
 800225a:	482b      	ldr	r0, [pc, #172]	; (8002308 <main+0x140>)
 800225c:	2104      	movs	r1, #4
 800225e:	f001 fdf1 	bl	8003e44 <GPIO_SetBits>
	GPIO_SetBits(GPIOA, GPIO_Pin_3);
 8002262:	4829      	ldr	r0, [pc, #164]	; (8002308 <main+0x140>)
 8002264:	2108      	movs	r1, #8
 8002266:	f001 fded 	bl	8003e44 <GPIO_SetBits>

	GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 800226a:	4826      	ldr	r0, [pc, #152]	; (8002304 <main+0x13c>)
 800226c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002270:	f001 fdf6 	bl	8003e60 <GPIO_ResetBits>

	Delay(2000);
 8002274:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002278:	f7ff f89c 	bl	80013b4 <Delay>

	init_I2C1();
 800227c:	f7fe fdd0 	bl	8000e20 <init_I2C1>

	Setup_MPU6050();
 8002280:	f7ff fe02 	bl	8001e88 <Setup_MPU6050>
	Setup_BMP085();
 8002284:	f7ff ff32 	bl	80020ec <Setup_BMP085>
	Setup_HMC5883L();
 8002288:	f7ff ff18 	bl	80020bc <Setup_HMC5883L>

	GPIO_ResetBits(GPIOC, GPIO_Pin_14);
 800228c:	481d      	ldr	r0, [pc, #116]	; (8002304 <main+0x13c>)
 800228e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002292:	f001 fde5 	bl	8003e60 <GPIO_ResetBits>

	char c[15];

	Init_Motors(); //---------------------> Careful Here!!!
 8002296:	f7ff f9c3 	bl	8001620 <Init_Motors>

	GPIO_ResetBits(GPIOC, GPIO_Pin_15);
 800229a:	481a      	ldr	r0, [pc, #104]	; (8002304 <main+0x13c>)
 800229c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a0:	f001 fdde 	bl	8003e60 <GPIO_ResetBits>

	throttle = 1010;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <main+0x144>)
 80022a6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80022aa:	601a      	str	r2, [r3, #0]

	sprintf(c, "Calibrating Values");
 80022ac:	463a      	mov	r2, r7
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <main+0x148>)
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b8:	682b      	ldr	r3, [r5, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	8022      	strh	r2, [r4, #0]
 80022be:	3402      	adds	r4, #2
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	7023      	strb	r3, [r4, #0]
	USART_puts(USART1, c);
 80022c4:	463b      	mov	r3, r7
 80022c6:	4813      	ldr	r0, [pc, #76]	; (8002314 <main+0x14c>)
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7ff f8df 	bl	800148c <USART_puts>

	float new_roll = 0;
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]
	float new_pitch = 0;
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
	float new_yaw = 0;
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	613b      	str	r3, [r7, #16]

	for(i = 0; i < 500; i++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	e098      	b.n	8002418 <main+0x250>
 80022e6:	bf00      	nop
 80022e8:	20000158 	.word	0x20000158
 80022ec:	20000000 	.word	0x20000000
 80022f0:	431bde83 	.word	0x431bde83
 80022f4:	2000016c 	.word	0x2000016c
 80022f8:	200001e8 	.word	0x200001e8
 80022fc:	200001a8 	.word	0x200001a8
 8002300:	40021000 	.word	0x40021000
 8002304:	40020800 	.word	0x40020800
 8002308:	40020000 	.word	0x40020000
 800230c:	200000d4 	.word	0x200000d4
 8002310:	080062c0 	.word	0x080062c0
 8002314:	40011000 	.word	0x40011000
	{
		while(ConState % 8000 != 0);
 8002318:	bf00      	nop
 800231a:	4bb1      	ldr	r3, [pc, #708]	; (80025e0 <main+0x418>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4bb1      	ldr	r3, [pc, #708]	; (80025e4 <main+0x41c>)
 8002320:	fba3 1302 	umull	r1, r3, r3, r2
 8002324:	0a5b      	lsrs	r3, r3, #9
 8002326:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f2      	bne.n	800231a <main+0x152>
		Read_RawAccelerometerParams(&Acc_X, &Acc_Y, &Acc_Z, &Cal_Acc_X, &Cal_Acc_Y, &Cal_Acc_Z);
 8002334:	4bac      	ldr	r3, [pc, #688]	; (80025e8 <main+0x420>)
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4bac      	ldr	r3, [pc, #688]	; (80025ec <main+0x424>)
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	48ac      	ldr	r0, [pc, #688]	; (80025f0 <main+0x428>)
 800233e:	49ad      	ldr	r1, [pc, #692]	; (80025f4 <main+0x42c>)
 8002340:	4aad      	ldr	r2, [pc, #692]	; (80025f8 <main+0x430>)
 8002342:	4bae      	ldr	r3, [pc, #696]	; (80025fc <main+0x434>)
 8002344:	f7fe ff42 	bl	80011cc <Read_RawAccelerometerParams>
		Read_RawGyroParams(&Gyro_X, &Gyro_Y, &Gyro_Z, &Cal_Gyro_X, &Cal_Gyro_Y, &Cal_Gyro_Z);
 8002348:	4bad      	ldr	r3, [pc, #692]	; (8002600 <main+0x438>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4bad      	ldr	r3, [pc, #692]	; (8002604 <main+0x43c>)
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	48ad      	ldr	r0, [pc, #692]	; (8002608 <main+0x440>)
 8002352:	49ae      	ldr	r1, [pc, #696]	; (800260c <main+0x444>)
 8002354:	4aae      	ldr	r2, [pc, #696]	; (8002610 <main+0x448>)
 8002356:	4baf      	ldr	r3, [pc, #700]	; (8002614 <main+0x44c>)
 8002358:	f7fe fec6 	bl	80010e8 <Read_RawGyroParams>
		ComplementaryFilter(Acc_X, Acc_Y, Acc_Z, Gyro_X, Gyro_Y, Gyro_Z, Mag_X, Mag_Y, Mag_Z, &roll, &pitch, &yaw, Cal_roll, Cal_pitch, Cal_yaw);
 800235c:	4ba4      	ldr	r3, [pc, #656]	; (80025f0 <main+0x428>)
 800235e:	8818      	ldrh	r0, [r3, #0]
 8002360:	4ba4      	ldr	r3, [pc, #656]	; (80025f4 <main+0x42c>)
 8002362:	8819      	ldrh	r1, [r3, #0]
 8002364:	4ba4      	ldr	r3, [pc, #656]	; (80025f8 <main+0x430>)
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	4ba7      	ldr	r3, [pc, #668]	; (8002608 <main+0x440>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	4ca7      	ldr	r4, [pc, #668]	; (800260c <main+0x444>)
 800236e:	f8b4 c000 	ldrh.w	ip, [r4]
 8002372:	4ca7      	ldr	r4, [pc, #668]	; (8002610 <main+0x448>)
 8002374:	f8b4 e000 	ldrh.w	lr, [r4]
 8002378:	4ca7      	ldr	r4, [pc, #668]	; (8002618 <main+0x450>)
 800237a:	8826      	ldrh	r6, [r4, #0]
 800237c:	4ca7      	ldr	r4, [pc, #668]	; (800261c <main+0x454>)
 800237e:	8825      	ldrh	r5, [r4, #0]
 8002380:	4ca7      	ldr	r4, [pc, #668]	; (8002620 <main+0x458>)
 8002382:	8824      	ldrh	r4, [r4, #0]
 8002384:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8002634 <main+0x46c>
 8002388:	edd8 6a00 	vldr	s13, [r8]
 800238c:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 8002638 <main+0x470>
 8002390:	ed98 7a00 	vldr	s14, [r8]
 8002394:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 800263c <main+0x474>
 8002398:	edd8 7a00 	vldr	s15, [r8]
 800239c:	b200      	sxth	r0, r0
 800239e:	b209      	sxth	r1, r1
 80023a0:	b212      	sxth	r2, r2
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	fa0f fc8c 	sxth.w	ip, ip
 80023a8:	f8cd c000 	str.w	ip, [sp]
 80023ac:	fa0f fe8e 	sxth.w	lr, lr
 80023b0:	f8cd e004 	str.w	lr, [sp, #4]
 80023b4:	b236      	sxth	r6, r6
 80023b6:	9602      	str	r6, [sp, #8]
 80023b8:	b22d      	sxth	r5, r5
 80023ba:	9503      	str	r5, [sp, #12]
 80023bc:	b224      	sxth	r4, r4
 80023be:	9404      	str	r4, [sp, #16]
 80023c0:	4c98      	ldr	r4, [pc, #608]	; (8002624 <main+0x45c>)
 80023c2:	9405      	str	r4, [sp, #20]
 80023c4:	4c98      	ldr	r4, [pc, #608]	; (8002628 <main+0x460>)
 80023c6:	9406      	str	r4, [sp, #24]
 80023c8:	4c98      	ldr	r4, [pc, #608]	; (800262c <main+0x464>)
 80023ca:	9407      	str	r4, [sp, #28]
 80023cc:	eeb0 0a66 	vmov.f32	s0, s13
 80023d0:	eef0 0a47 	vmov.f32	s1, s14
 80023d4:	eeb0 1a67 	vmov.f32	s2, s15
 80023d8:	f000 fc26 	bl	8002c28 <ComplementaryFilter>

		new_roll += roll;
 80023dc:	4b91      	ldr	r3, [pc, #580]	; (8002624 <main+0x45c>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80023e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ea:	edc7 7a06 	vstr	s15, [r7, #24]
		new_pitch += pitch;
 80023ee:	4b8e      	ldr	r3, [pc, #568]	; (8002628 <main+0x460>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fc:	edc7 7a05 	vstr	s15, [r7, #20]
		new_yaw += yaw;
 8002400:	4b8a      	ldr	r3, [pc, #552]	; (800262c <main+0x464>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	ed97 7a04 	vldr	s14, [r7, #16]
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	edc7 7a04 	vstr	s15, [r7, #16]

	float new_roll = 0;
	float new_pitch = 0;
	float new_yaw = 0;

	for(i = 0; i < 500; i++)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3301      	adds	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800241e:	f6ff af7b 	blt.w	8002318 <main+0x150>
		new_roll += roll;
		new_pitch += pitch;
		new_yaw += yaw;
	}

	Cal_roll = new_roll/500;
 8002422:	ed97 7a06 	vldr	s14, [r7, #24]
 8002426:	eddf 7a82 	vldr	s15, [pc, #520]	; 8002630 <main+0x468>
 800242a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800242e:	4b81      	ldr	r3, [pc, #516]	; (8002634 <main+0x46c>)
 8002430:	edc3 7a00 	vstr	s15, [r3]
	Cal_pitch = new_pitch/500;
 8002434:	ed97 7a05 	vldr	s14, [r7, #20]
 8002438:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8002630 <main+0x468>
 800243c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002440:	4b7d      	ldr	r3, [pc, #500]	; (8002638 <main+0x470>)
 8002442:	edc3 7a00 	vstr	s15, [r3]
	Cal_yaw = new_yaw/500;
 8002446:	ed97 7a04 	vldr	s14, [r7, #16]
 800244a:	eddf 7a79 	vldr	s15, [pc, #484]	; 8002630 <main+0x468>
 800244e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002452:	4b7a      	ldr	r3, [pc, #488]	; (800263c <main+0x474>)
 8002454:	edc3 7a00 	vstr	s15, [r3]

	d_roll = 0;
 8002458:	4b79      	ldr	r3, [pc, #484]	; (8002640 <main+0x478>)
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
	d_pitch = 0;
 8002460:	4b78      	ldr	r3, [pc, #480]	; (8002644 <main+0x47c>)
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
	d_yaw = 0;
 8002468:	4b77      	ldr	r3, [pc, #476]	; (8002648 <main+0x480>)
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

	sprintf(c, "Done. Going for it!");
 8002470:	463a      	mov	r2, r7
 8002472:	4b76      	ldr	r3, [pc, #472]	; (800264c <main+0x484>)
 8002474:	4614      	mov	r4, r2
 8002476:	461d      	mov	r5, r3
 8002478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	6023      	str	r3, [r4, #0]
	USART_puts(USART1, c);
 8002480:	463b      	mov	r3, r7
 8002482:	4873      	ldr	r0, [pc, #460]	; (8002650 <main+0x488>)
 8002484:	4619      	mov	r1, r3
 8002486:	f7ff f801 	bl	800148c <USART_puts>


	while (1)
	{
		if(ConState % 4000 == 0)
 800248a:	4b55      	ldr	r3, [pc, #340]	; (80025e0 <main+0x418>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <main+0x41c>)
 8002490:	fba3 1302 	umull	r1, r3, r3, r2
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 81b3 	bne.w	800280c <main+0x644>
		{
			GPIO_SetBits(GPIOC, GPIO_Pin_14);
 80024a6:	486b      	ldr	r0, [pc, #428]	; (8002654 <main+0x48c>)
 80024a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024ac:	f001 fcca 	bl	8003e44 <GPIO_SetBits>

			Read_RawAccelerometerParams(&Acc_X, &Acc_Y, &Acc_Z, &Cal_Acc_X, &Cal_Acc_Y, &Cal_Acc_Z);
 80024b0:	4b4d      	ldr	r3, [pc, #308]	; (80025e8 <main+0x420>)
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4b4d      	ldr	r3, [pc, #308]	; (80025ec <main+0x424>)
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	484d      	ldr	r0, [pc, #308]	; (80025f0 <main+0x428>)
 80024ba:	494e      	ldr	r1, [pc, #312]	; (80025f4 <main+0x42c>)
 80024bc:	4a4e      	ldr	r2, [pc, #312]	; (80025f8 <main+0x430>)
 80024be:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <main+0x434>)
 80024c0:	f7fe fe84 	bl	80011cc <Read_RawAccelerometerParams>
			Read_RawGyroParams(&Gyro_X, &Gyro_Y, &Gyro_Z, &Cal_Gyro_X, &Cal_Gyro_Y, &Cal_Gyro_Z);
 80024c4:	4b4e      	ldr	r3, [pc, #312]	; (8002600 <main+0x438>)
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <main+0x43c>)
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	484e      	ldr	r0, [pc, #312]	; (8002608 <main+0x440>)
 80024ce:	494f      	ldr	r1, [pc, #316]	; (800260c <main+0x444>)
 80024d0:	4a4f      	ldr	r2, [pc, #316]	; (8002610 <main+0x448>)
 80024d2:	4b50      	ldr	r3, [pc, #320]	; (8002614 <main+0x44c>)
 80024d4:	f7fe fe08 	bl	80010e8 <Read_RawGyroParams>
			Read_RawBaroParams(&Baro_Val, &Cal_Baro_Val);
 80024d8:	485f      	ldr	r0, [pc, #380]	; (8002658 <main+0x490>)
 80024da:	4960      	ldr	r1, [pc, #384]	; (800265c <main+0x494>)
 80024dc:	f7fe fec8 	bl	8001270 <Read_RawBaroParams>
			Read_RawMagnetometerParams(&Mag_X, &Mag_Y, &Mag_Z, &Cal_Mag_X, &Cal_Mag_Y, &Cal_Mag_Z);
 80024e0:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <main+0x498>)
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	4b5f      	ldr	r3, [pc, #380]	; (8002664 <main+0x49c>)
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	484b      	ldr	r0, [pc, #300]	; (8002618 <main+0x450>)
 80024ea:	494c      	ldr	r1, [pc, #304]	; (800261c <main+0x454>)
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <main+0x458>)
 80024ee:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <main+0x4a0>)
 80024f0:	f7fe fee6 	bl	80012c0 <Read_RawMagnetometerParams>

			GPIO_ResetBits(GPIOC, GPIO_Pin_14);
 80024f4:	4857      	ldr	r0, [pc, #348]	; (8002654 <main+0x48c>)
 80024f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024fa:	f001 fcb1 	bl	8003e60 <GPIO_ResetBits>

			ComplementaryFilter(Acc_X, Acc_Y, Acc_Z, Gyro_X, Gyro_Y, Gyro_Z, Mag_X, Mag_Y, Mag_Z, &roll, &pitch, &yaw, Cal_roll, Cal_pitch, Cal_yaw);
 80024fe:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <main+0x428>)
 8002500:	8818      	ldrh	r0, [r3, #0]
 8002502:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <main+0x42c>)
 8002504:	8819      	ldrh	r1, [r3, #0]
 8002506:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <main+0x430>)
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <main+0x440>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	4c3f      	ldr	r4, [pc, #252]	; (800260c <main+0x444>)
 8002510:	f8b4 c000 	ldrh.w	ip, [r4]
 8002514:	4c3e      	ldr	r4, [pc, #248]	; (8002610 <main+0x448>)
 8002516:	f8b4 e000 	ldrh.w	lr, [r4]
 800251a:	4c3f      	ldr	r4, [pc, #252]	; (8002618 <main+0x450>)
 800251c:	8826      	ldrh	r6, [r4, #0]
 800251e:	4c3f      	ldr	r4, [pc, #252]	; (800261c <main+0x454>)
 8002520:	8825      	ldrh	r5, [r4, #0]
 8002522:	4c3f      	ldr	r4, [pc, #252]	; (8002620 <main+0x458>)
 8002524:	8824      	ldrh	r4, [r4, #0]
 8002526:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002634 <main+0x46c>
 800252a:	edd8 6a00 	vldr	s13, [r8]
 800252e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002638 <main+0x470>
 8002532:	ed98 7a00 	vldr	s14, [r8]
 8002536:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800263c <main+0x474>
 800253a:	edd8 7a00 	vldr	s15, [r8]
 800253e:	b200      	sxth	r0, r0
 8002540:	b209      	sxth	r1, r1
 8002542:	b212      	sxth	r2, r2
 8002544:	b21b      	sxth	r3, r3
 8002546:	fa0f fc8c 	sxth.w	ip, ip
 800254a:	f8cd c000 	str.w	ip, [sp]
 800254e:	fa0f fe8e 	sxth.w	lr, lr
 8002552:	f8cd e004 	str.w	lr, [sp, #4]
 8002556:	b236      	sxth	r6, r6
 8002558:	9602      	str	r6, [sp, #8]
 800255a:	b22d      	sxth	r5, r5
 800255c:	9503      	str	r5, [sp, #12]
 800255e:	b224      	sxth	r4, r4
 8002560:	9404      	str	r4, [sp, #16]
 8002562:	4c30      	ldr	r4, [pc, #192]	; (8002624 <main+0x45c>)
 8002564:	9405      	str	r4, [sp, #20]
 8002566:	4c30      	ldr	r4, [pc, #192]	; (8002628 <main+0x460>)
 8002568:	9406      	str	r4, [sp, #24]
 800256a:	4c30      	ldr	r4, [pc, #192]	; (800262c <main+0x464>)
 800256c:	9407      	str	r4, [sp, #28]
 800256e:	eeb0 0a66 	vmov.f32	s0, s13
 8002572:	eef0 0a47 	vmov.f32	s1, s14
 8002576:	eeb0 1a67 	vmov.f32	s2, s15
 800257a:	f000 fb55 	bl	8002c28 <ComplementaryFilter>

			new_roll = roll - Cal_roll;
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <main+0x45c>)
 8002580:	ed93 7a00 	vldr	s14, [r3]
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <main+0x46c>)
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258e:	edc7 7a06 	vstr	s15, [r7, #24]
			new_pitch = pitch - Cal_pitch;
 8002592:	4b25      	ldr	r3, [pc, #148]	; (8002628 <main+0x460>)
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <main+0x470>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a2:	edc7 7a05 	vstr	s15, [r7, #20]
			new_yaw = yaw - Cal_yaw;
 80025a6:	4b21      	ldr	r3, [pc, #132]	; (800262c <main+0x464>)
 80025a8:	ed93 7a00 	vldr	s14, [r3]
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <main+0x474>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b6:	edc7 7a04 	vstr	s15, [r7, #16]

			PID_Control(new_roll, new_pitch, &roll_pid, &pitch_pid, d_roll, d_pitch);
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <main+0x478>)
 80025bc:	ed93 7a00 	vldr	s14, [r3]
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <main+0x47c>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ed97 0a06 	vldr	s0, [r7, #24]
 80025ca:	edd7 0a05 	vldr	s1, [r7, #20]
 80025ce:	4827      	ldr	r0, [pc, #156]	; (800266c <main+0x4a4>)
 80025d0:	4927      	ldr	r1, [pc, #156]	; (8002670 <main+0x4a8>)
 80025d2:	eeb0 1a47 	vmov.f32	s2, s14
 80025d6:	eef0 1a67 	vmov.f32	s3, s15
 80025da:	f000 fda9 	bl	8003130 <PID_Control>
 80025de:	e049      	b.n	8002674 <main+0x4ac>
 80025e0:	20000158 	.word	0x20000158
 80025e4:	10624dd3 	.word	0x10624dd3
 80025e8:	20000132 	.word	0x20000132
 80025ec:	20000134 	.word	0x20000134
 80025f0:	2000011c 	.word	0x2000011c
 80025f4:	2000011e 	.word	0x2000011e
 80025f8:	20000120 	.word	0x20000120
 80025fc:	20000130 	.word	0x20000130
 8002600:	20000138 	.word	0x20000138
 8002604:	2000013a 	.word	0x2000013a
 8002608:	20000122 	.word	0x20000122
 800260c:	20000124 	.word	0x20000124
 8002610:	20000126 	.word	0x20000126
 8002614:	20000136 	.word	0x20000136
 8002618:	20000128 	.word	0x20000128
 800261c:	2000012a 	.word	0x2000012a
 8002620:	2000012c 	.word	0x2000012c
 8002624:	20000108 	.word	0x20000108
 8002628:	2000010c 	.word	0x2000010c
 800262c:	20000110 	.word	0x20000110
 8002630:	43fa0000 	.word	0x43fa0000
 8002634:	200000cc 	.word	0x200000cc
 8002638:	200000c8 	.word	0x200000c8
 800263c:	200000d0 	.word	0x200000d0
 8002640:	200000bc 	.word	0x200000bc
 8002644:	200000c0 	.word	0x200000c0
 8002648:	200000c4 	.word	0x200000c4
 800264c:	080062d4 	.word	0x080062d4
 8002650:	40011000 	.word	0x40011000
 8002654:	40020800 	.word	0x40020800
 8002658:	2000012e 	.word	0x2000012e
 800265c:	20000142 	.word	0x20000142
 8002660:	2000013e 	.word	0x2000013e
 8002664:	20000140 	.word	0x20000140
 8002668:	2000013c 	.word	0x2000013c
 800266c:	200000f0 	.word	0x200000f0
 8002670:	200000f4 	.word	0x200000f4
			PID_Yaw(new_yaw, &yaw_pid, d_yaw);
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <main+0x648>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ed97 0a04 	vldr	s0, [r7, #16]
 800267e:	4865      	ldr	r0, [pc, #404]	; (8002814 <main+0x64c>)
 8002680:	eef0 0a67 	vmov.f32	s1, s15
 8002684:	f000 fdf2 	bl	800326c <PID_Yaw>

			Throttle_FL = (int)(throttle + Delta_FLBR - pitch_pid + yaw_pid);
 8002688:	4b63      	ldr	r3, [pc, #396]	; (8002818 <main+0x650>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b63      	ldr	r3, [pc, #396]	; (800281c <main+0x654>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4413      	add	r3, r2
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800269a:	4b61      	ldr	r3, [pc, #388]	; (8002820 <main+0x658>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a4:	4b5b      	ldr	r3, [pc, #364]	; (8002814 <main+0x64c>)
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b2:	ee17 2a90 	vmov	r2, s15
 80026b6:	4b5b      	ldr	r3, [pc, #364]	; (8002824 <main+0x65c>)
 80026b8:	601a      	str	r2, [r3, #0]
			Throttle_BR = (int)(throttle - Delta_FLBR + pitch_pid + yaw_pid);
 80026ba:	4b57      	ldr	r3, [pc, #348]	; (8002818 <main+0x650>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4b57      	ldr	r3, [pc, #348]	; (800281c <main+0x654>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026cc:	4b54      	ldr	r3, [pc, #336]	; (8002820 <main+0x658>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d6:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <main+0x64c>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e4:	ee17 2a90 	vmov	r2, s15
 80026e8:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <main+0x660>)
 80026ea:	601a      	str	r2, [r3, #0]

			Throttle_FR = (int)(throttle + Delta_FRBL + roll_pid - yaw_pid);
 80026ec:	4b4a      	ldr	r3, [pc, #296]	; (8002818 <main+0x650>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b4e      	ldr	r3, [pc, #312]	; (800282c <main+0x664>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fe:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <main+0x668>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002708:	4b42      	ldr	r3, [pc, #264]	; (8002814 <main+0x64c>)
 800270a:	edd3 7a00 	vldr	s15, [r3]
 800270e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002716:	ee17 2a90 	vmov	r2, s15
 800271a:	4b46      	ldr	r3, [pc, #280]	; (8002834 <main+0x66c>)
 800271c:	601a      	str	r2, [r3, #0]
			Throttle_BL = (int)(throttle - Delta_FRBL - roll_pid - yaw_pid);
 800271e:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <main+0x650>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <main+0x664>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002730:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <main+0x668>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ee37 7a67 	vsub.f32	s14, s14, s15
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <main+0x64c>)
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002748:	ee17 2a90 	vmov	r2, s15
 800274c:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <main+0x670>)
 800274e:	601a      	str	r2, [r3, #0]
				USART_puts(USART1, c);
			}

			 */

			if(Throttle_FL < 1010)
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <main+0x65c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8002758:	429a      	cmp	r2, r3
 800275a:	dc03      	bgt.n	8002764 <main+0x59c>
			{
				Throttle_FL = 1010;
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <main+0x65c>)
 800275e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8002762:	601a      	str	r2, [r3, #0]
			}

			if(Throttle_FR < 1010)
 8002764:	4b33      	ldr	r3, [pc, #204]	; (8002834 <main+0x66c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	f240 33f1 	movw	r3, #1009	; 0x3f1
 800276c:	429a      	cmp	r2, r3
 800276e:	dc03      	bgt.n	8002778 <main+0x5b0>
			{
				Throttle_FR = 1010;
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <main+0x66c>)
 8002772:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8002776:	601a      	str	r2, [r3, #0]
			}

			if(Throttle_BL < 1010)
 8002778:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <main+0x670>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8002780:	429a      	cmp	r2, r3
 8002782:	dc03      	bgt.n	800278c <main+0x5c4>
			{
				Throttle_BL = 1010;
 8002784:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <main+0x670>)
 8002786:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800278a:	601a      	str	r2, [r3, #0]
			}

			if(Throttle_BR < 1010)
 800278c:	4b26      	ldr	r3, [pc, #152]	; (8002828 <main+0x660>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8002794:	429a      	cmp	r2, r3
 8002796:	dc03      	bgt.n	80027a0 <main+0x5d8>
			{
				Throttle_BR = 1010;
 8002798:	4b23      	ldr	r3, [pc, #140]	; (8002828 <main+0x660>)
 800279a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800279e:	601a      	str	r2, [r3, #0]
			}

			if(Throttle_FL > 1950)
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <main+0x65c>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	f240 739e 	movw	r3, #1950	; 0x79e
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dd03      	ble.n	80027b4 <main+0x5ec>
			{
				Throttle_FL = 1950;
 80027ac:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <main+0x65c>)
 80027ae:	f240 729e 	movw	r2, #1950	; 0x79e
 80027b2:	601a      	str	r2, [r3, #0]
			}

			if(Throttle_FR > 1950)
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <main+0x66c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f240 739e 	movw	r3, #1950	; 0x79e
 80027bc:	429a      	cmp	r2, r3
 80027be:	dd03      	ble.n	80027c8 <main+0x600>
			{
				Throttle_FR = 1950;
 80027c0:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <main+0x66c>)
 80027c2:	f240 729e 	movw	r2, #1950	; 0x79e
 80027c6:	601a      	str	r2, [r3, #0]
			}

			if(Throttle_BL > 1950)
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <main+0x670>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f240 739e 	movw	r3, #1950	; 0x79e
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dd03      	ble.n	80027dc <main+0x614>
			{
				Throttle_BL = 1950;
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <main+0x670>)
 80027d6:	f240 729e 	movw	r2, #1950	; 0x79e
 80027da:	601a      	str	r2, [r3, #0]
			}

			if(Throttle_BR > 1950)
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <main+0x660>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	f240 739e 	movw	r3, #1950	; 0x79e
 80027e4:	429a      	cmp	r2, r3
 80027e6:	dd03      	ble.n	80027f0 <main+0x628>
			{
				Throttle_BR = 1950;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <main+0x660>)
 80027ea:	f240 729e 	movw	r2, #1950	; 0x79e
 80027ee:	601a      	str	r2, [r3, #0]
			}

			Motors_write(Throttle_FL, Throttle_FR, Throttle_BL, Throttle_BR);
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <main+0x65c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <main+0x66c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <main+0x670>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <main+0x660>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f7fe ff91 	bl	800172c <Motors_write>
		}
	}
 800280a:	e63e      	b.n	800248a <main+0x2c2>
 800280c:	e63d      	b.n	800248a <main+0x2c2>
 800280e:	bf00      	nop
 8002810:	200000c4 	.word	0x200000c4
 8002814:	200000f8 	.word	0x200000f8
 8002818:	200000d4 	.word	0x200000d4
 800281c:	20000114 	.word	0x20000114
 8002820:	200000f4 	.word	0x200000f4
 8002824:	2000021c 	.word	0x2000021c
 8002828:	200001e0 	.word	0x200001e0
 800282c:	20000118 	.word	0x20000118
 8002830:	200000f0 	.word	0x200000f0
 8002834:	200001e4 	.word	0x200001e4
 8002838:	200001a4 	.word	0x200001a4

0800283c <USART2_IRQHandler>:
}


void USART2_IRQHandler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

}
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <USART1_IRQHandler>:
	----------------------------------------------------------------------------
	----------------------------------------------------------------------------
	----------------------------------------------------------------------------*/

void USART1_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
	static uint8_t cnt = 0; // this counter is used to determine the string length
	char t;
	char c[25];

	if( USART_GetITStatus(USART1, USART_IT_RXNE) )
 800284e:	488c      	ldr	r0, [pc, #560]	; (8002a80 <USART1_IRQHandler+0x238>)
 8002850:	f240 5125 	movw	r1, #1317	; 0x525
 8002854:	f000 fe92 	bl	800357c <USART_GetITStatus>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <USART1_IRQHandler+0x1e>
	{
		t = USART1->DR; // the character from the USART1 data register is saved in t
 800285e:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <USART1_IRQHandler+0x238>)
 8002860:	889b      	ldrh	r3, [r3, #4]
 8002862:	b29b      	uxth	r3, r3
 8002864:	77fb      	strb	r3, [r7, #31]
	}

	if( t == '\n' )
 8002866:	7ffb      	ldrb	r3, [r7, #31]
 8002868:	2b0a      	cmp	r3, #10
 800286a:	d102      	bne.n	8002872 <USART1_IRQHandler+0x2a>
	{
		cnt = 0;
 800286c:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <USART1_IRQHandler+0x23c>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
	}


	if( t == 'u' || t == 'U')
 8002872:	7ffb      	ldrb	r3, [r7, #31]
 8002874:	2b75      	cmp	r3, #117	; 0x75
 8002876:	d002      	beq.n	800287e <USART1_IRQHandler+0x36>
 8002878:	7ffb      	ldrb	r3, [r7, #31]
 800287a:	2b55      	cmp	r3, #85	; 0x55
 800287c:	d116      	bne.n	80028ac <USART1_IRQHandler+0x64>
	{
		throttle = throttle + 10;
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <USART1_IRQHandler+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f103 020a 	add.w	r2, r3, #10
 8002886:	4b80      	ldr	r3, [pc, #512]	; (8002a88 <USART1_IRQHandler+0x240>)
 8002888:	601a      	str	r2, [r3, #0]
		sprintf(c, "Throttle = %d\n", throttle);
 800288a:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <USART1_IRQHandler+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	1d3a      	adds	r2, r7, #4
 8002890:	4610      	mov	r0, r2
 8002892:	497e      	ldr	r1, [pc, #504]	; (8002a8c <USART1_IRQHandler+0x244>)
 8002894:	461a      	mov	r2, r3
 8002896:	f001 fbbb 	bl	8004010 <siprintf>
		USART_puts(USART1, c);
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	4878      	ldr	r0, [pc, #480]	; (8002a80 <USART1_IRQHandler+0x238>)
 800289e:	4619      	mov	r1, r3
 80028a0:	f7fe fdf4 	bl	800148c <USART_puts>
		cnt = 0;
 80028a4:	4b77      	ldr	r3, [pc, #476]	; (8002a84 <USART1_IRQHandler+0x23c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e191      	b.n	8002bd0 <USART1_IRQHandler+0x388>
	}

	else if( t == 'q' || t == 'Q')
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	2b71      	cmp	r3, #113	; 0x71
 80028b0:	d002      	beq.n	80028b8 <USART1_IRQHandler+0x70>
 80028b2:	7ffb      	ldrb	r3, [r7, #31]
 80028b4:	2b51      	cmp	r3, #81	; 0x51
 80028b6:	d106      	bne.n	80028c6 <USART1_IRQHandler+0x7e>
	{
		d_pitch = 15;
 80028b8:	4b75      	ldr	r3, [pc, #468]	; (8002a90 <USART1_IRQHandler+0x248>)
 80028ba:	4a76      	ldr	r2, [pc, #472]	; (8002a94 <USART1_IRQHandler+0x24c>)
 80028bc:	601a      	str	r2, [r3, #0]
		cnt = 0;
 80028be:	4b71      	ldr	r3, [pc, #452]	; (8002a84 <USART1_IRQHandler+0x23c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	e184      	b.n	8002bd0 <USART1_IRQHandler+0x388>
	}


	else if( t == 'f' || t == 'F')
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
 80028c8:	2b66      	cmp	r3, #102	; 0x66
 80028ca:	d002      	beq.n	80028d2 <USART1_IRQHandler+0x8a>
 80028cc:	7ffb      	ldrb	r3, [r7, #31]
 80028ce:	2b46      	cmp	r3, #70	; 0x46
 80028d0:	d116      	bne.n	8002900 <USART1_IRQHandler+0xb8>
	{
		throttle = throttle + 50;
 80028d2:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <USART1_IRQHandler+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028da:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <USART1_IRQHandler+0x240>)
 80028dc:	601a      	str	r2, [r3, #0]
		sprintf(c, "Throttle = %d\n", throttle);
 80028de:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <USART1_IRQHandler+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1d3a      	adds	r2, r7, #4
 80028e4:	4610      	mov	r0, r2
 80028e6:	4969      	ldr	r1, [pc, #420]	; (8002a8c <USART1_IRQHandler+0x244>)
 80028e8:	461a      	mov	r2, r3
 80028ea:	f001 fb91 	bl	8004010 <siprintf>
		USART_puts(USART1, c);
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	4863      	ldr	r0, [pc, #396]	; (8002a80 <USART1_IRQHandler+0x238>)
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe fdca 	bl	800148c <USART_puts>
		cnt = 0;
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <USART1_IRQHandler+0x23c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e167      	b.n	8002bd0 <USART1_IRQHandler+0x388>
	}

	else if( t == 'l' || t == 'L')
 8002900:	7ffb      	ldrb	r3, [r7, #31]
 8002902:	2b6c      	cmp	r3, #108	; 0x6c
 8002904:	d002      	beq.n	800290c <USART1_IRQHandler+0xc4>
 8002906:	7ffb      	ldrb	r3, [r7, #31]
 8002908:	2b4c      	cmp	r3, #76	; 0x4c
 800290a:	d116      	bne.n	800293a <USART1_IRQHandler+0xf2>
	{
		throttle = throttle - 30;
 800290c:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <USART1_IRQHandler+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1a3 021e 	sub.w	r2, r3, #30
 8002914:	4b5c      	ldr	r3, [pc, #368]	; (8002a88 <USART1_IRQHandler+0x240>)
 8002916:	601a      	str	r2, [r3, #0]
		sprintf(c, "Throttle = %d\n", throttle);
 8002918:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <USART1_IRQHandler+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	1d3a      	adds	r2, r7, #4
 800291e:	4610      	mov	r0, r2
 8002920:	495a      	ldr	r1, [pc, #360]	; (8002a8c <USART1_IRQHandler+0x244>)
 8002922:	461a      	mov	r2, r3
 8002924:	f001 fb74 	bl	8004010 <siprintf>
		USART_puts(USART1, c);
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	4855      	ldr	r0, [pc, #340]	; (8002a80 <USART1_IRQHandler+0x238>)
 800292c:	4619      	mov	r1, r3
 800292e:	f7fe fdad 	bl	800148c <USART_puts>
		cnt = 0;
 8002932:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <USART1_IRQHandler+0x23c>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e14a      	b.n	8002bd0 <USART1_IRQHandler+0x388>
	}

	else if( t == 'b' || t == 'B')
 800293a:	7ffb      	ldrb	r3, [r7, #31]
 800293c:	2b62      	cmp	r3, #98	; 0x62
 800293e:	d002      	beq.n	8002946 <USART1_IRQHandler+0xfe>
 8002940:	7ffb      	ldrb	r3, [r7, #31]
 8002942:	2b42      	cmp	r3, #66	; 0x42
 8002944:	d115      	bne.n	8002972 <USART1_IRQHandler+0x12a>
	{
		Delta_FLBR = Delta_FLBR + 1;
 8002946:	4b54      	ldr	r3, [pc, #336]	; (8002a98 <USART1_IRQHandler+0x250>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	4b52      	ldr	r3, [pc, #328]	; (8002a98 <USART1_IRQHandler+0x250>)
 800294e:	601a      	str	r2, [r3, #0]
		sprintf(c, "Delta_FLBR = %d\n", Delta_FLBR);
 8002950:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <USART1_IRQHandler+0x250>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1d3a      	adds	r2, r7, #4
 8002956:	4610      	mov	r0, r2
 8002958:	4950      	ldr	r1, [pc, #320]	; (8002a9c <USART1_IRQHandler+0x254>)
 800295a:	461a      	mov	r2, r3
 800295c:	f001 fb58 	bl	8004010 <siprintf>
		USART_puts(USART1, c);
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	4847      	ldr	r0, [pc, #284]	; (8002a80 <USART1_IRQHandler+0x238>)
 8002964:	4619      	mov	r1, r3
 8002966:	f7fe fd91 	bl	800148c <USART_puts>
		cnt = 0;
 800296a:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <USART1_IRQHandler+0x23c>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e12e      	b.n	8002bd0 <USART1_IRQHandler+0x388>
	}

	else if( t == 'z' || t == 'Z')
 8002972:	7ffb      	ldrb	r3, [r7, #31]
 8002974:	2b7a      	cmp	r3, #122	; 0x7a
 8002976:	d002      	beq.n	800297e <USART1_IRQHandler+0x136>
 8002978:	7ffb      	ldrb	r3, [r7, #31]
 800297a:	2b5a      	cmp	r3, #90	; 0x5a
 800297c:	d115      	bne.n	80029aa <USART1_IRQHandler+0x162>
	{
		Delta_FRBL = Delta_FRBL + 1;
 800297e:	4b48      	ldr	r3, [pc, #288]	; (8002aa0 <USART1_IRQHandler+0x258>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <USART1_IRQHandler+0x258>)
 8002986:	601a      	str	r2, [r3, #0]
		sprintf(c, "Delta_FRBL = %d\n", Delta_FRBL);
 8002988:	4b45      	ldr	r3, [pc, #276]	; (8002aa0 <USART1_IRQHandler+0x258>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	1d3a      	adds	r2, r7, #4
 800298e:	4610      	mov	r0, r2
 8002990:	4944      	ldr	r1, [pc, #272]	; (8002aa4 <USART1_IRQHandler+0x25c>)
 8002992:	461a      	mov	r2, r3
 8002994:	f001 fb3c 	bl	8004010 <siprintf>
		USART_puts(USART1, c);
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	4839      	ldr	r0, [pc, #228]	; (8002a80 <USART1_IRQHandler+0x238>)
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe fd75 	bl	800148c <USART_puts>
		cnt = 0;
 80029a2:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <USART1_IRQHandler+0x23c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e112      	b.n	8002bd0 <USART1_IRQHandler+0x388>
	}

	else if( t == 'p' || t == 'P')
 80029aa:	7ffb      	ldrb	r3, [r7, #31]
 80029ac:	2b70      	cmp	r3, #112	; 0x70
 80029ae:	d002      	beq.n	80029b6 <USART1_IRQHandler+0x16e>
 80029b0:	7ffb      	ldrb	r3, [r7, #31]
 80029b2:	2b50      	cmp	r3, #80	; 0x50
 80029b4:	d139      	bne.n	8002a2a <USART1_IRQHandler+0x1e2>
	{
		kp_pitch = kp_pitch + 0.1;
 80029b6:	4b3c      	ldr	r3, [pc, #240]	; (8002aa8 <USART1_IRQHandler+0x260>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fd68 	bl	8000490 <__aeabi_f2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	a32b      	add	r3, pc, #172	; (adr r3, 8002a78 <USART1_IRQHandler+0x230>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f7fd fc01 	bl	80001d4 <__adddf3>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	f7fe f86f 	bl	8000abc <__aeabi_d2f>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <USART1_IRQHandler+0x260>)
 80029e2:	601a      	str	r2, [r3, #0]
		kp_roll = kp_roll + 0.1;
 80029e4:	4b31      	ldr	r3, [pc, #196]	; (8002aac <USART1_IRQHandler+0x264>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fd51 	bl	8000490 <__aeabi_f2d>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	a320      	add	r3, pc, #128	; (adr r3, 8002a78 <USART1_IRQHandler+0x230>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fbea 	bl	80001d4 <__adddf3>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fe f858 	bl	8000abc <__aeabi_d2f>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b27      	ldr	r3, [pc, #156]	; (8002aac <USART1_IRQHandler+0x264>)
 8002a10:	601a      	str	r2, [r3, #0]
		USART_puts(USART1, "KP_Pitch Increased by 0.1");
 8002a12:	481b      	ldr	r0, [pc, #108]	; (8002a80 <USART1_IRQHandler+0x238>)
 8002a14:	4926      	ldr	r1, [pc, #152]	; (8002ab0 <USART1_IRQHandler+0x268>)
 8002a16:	f7fe fd39 	bl	800148c <USART_puts>
		USART_puts(USART1, "KP_Roll Increased by 0.1");
 8002a1a:	4819      	ldr	r0, [pc, #100]	; (8002a80 <USART1_IRQHandler+0x238>)
 8002a1c:	4925      	ldr	r1, [pc, #148]	; (8002ab4 <USART1_IRQHandler+0x26c>)
 8002a1e:	f7fe fd35 	bl	800148c <USART_puts>
		cnt = 0;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <USART1_IRQHandler+0x23c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	e0d2      	b.n	8002bd0 <USART1_IRQHandler+0x388>
	}


	else if( t == 'r' || t == 'R')
 8002a2a:	7ffb      	ldrb	r3, [r7, #31]
 8002a2c:	2b72      	cmp	r3, #114	; 0x72
 8002a2e:	d002      	beq.n	8002a36 <USART1_IRQHandler+0x1ee>
 8002a30:	7ffb      	ldrb	r3, [r7, #31]
 8002a32:	2b52      	cmp	r3, #82	; 0x52
 8002a34:	d148      	bne.n	8002ac8 <USART1_IRQHandler+0x280>
	{
		kd_pitch = kd_pitch - 0.5;
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <USART1_IRQHandler+0x270>)
 8002a38:	ed93 7a00 	vldr	s14, [r3]
 8002a3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8002a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <USART1_IRQHandler+0x270>)
 8002a46:	edc3 7a00 	vstr	s15, [r3]
		kd_roll = kd_roll - 0.5;
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <USART1_IRQHandler+0x274>)
 8002a4c:	ed93 7a00 	vldr	s14, [r3]
 8002a50:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8002a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <USART1_IRQHandler+0x274>)
 8002a5a:	edc3 7a00 	vstr	s15, [r3]
		USART_puts(USART1, "KD_Pitch Decreased by 0.5");
 8002a5e:	4808      	ldr	r0, [pc, #32]	; (8002a80 <USART1_IRQHandler+0x238>)
 8002a60:	4917      	ldr	r1, [pc, #92]	; (8002ac0 <USART1_IRQHandler+0x278>)
 8002a62:	f7fe fd13 	bl	800148c <USART_puts>
		USART_puts(USART1, "KD_Roll Decreased by 0.5");
 8002a66:	4806      	ldr	r0, [pc, #24]	; (8002a80 <USART1_IRQHandler+0x238>)
 8002a68:	4916      	ldr	r1, [pc, #88]	; (8002ac4 <USART1_IRQHandler+0x27c>)
 8002a6a:	f7fe fd0f 	bl	800148c <USART_puts>
		cnt = 0;
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <USART1_IRQHandler+0x23c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e0ac      	b.n	8002bd0 <USART1_IRQHandler+0x388>
 8002a76:	bf00      	nop
 8002a78:	9999999a 	.word	0x9999999a
 8002a7c:	3fb99999 	.word	0x3fb99999
 8002a80:	40011000 	.word	0x40011000
 8002a84:	20000144 	.word	0x20000144
 8002a88:	200000d4 	.word	0x200000d4
 8002a8c:	080062e8 	.word	0x080062e8
 8002a90:	200000c0 	.word	0x200000c0
 8002a94:	41700000 	.word	0x41700000
 8002a98:	20000114 	.word	0x20000114
 8002a9c:	080062f8 	.word	0x080062f8
 8002aa0:	20000118 	.word	0x20000118
 8002aa4:	0800630c 	.word	0x0800630c
 8002aa8:	20000010 	.word	0x20000010
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	08006320 	.word	0x08006320
 8002ab4:	0800633c 	.word	0x0800633c
 8002ab8:	20000018 	.word	0x20000018
 8002abc:	2000000c 	.word	0x2000000c
 8002ac0:	08006358 	.word	0x08006358
 8002ac4:	08006374 	.word	0x08006374
	}

	else if( t == 'i' || t == 'I')
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
 8002aca:	2b69      	cmp	r3, #105	; 0x69
 8002acc:	d002      	beq.n	8002ad4 <USART1_IRQHandler+0x28c>
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	2b49      	cmp	r3, #73	; 0x49
 8002ad2:	d139      	bne.n	8002b48 <USART1_IRQHandler+0x300>
	{
		ki_pitch = ki_pitch + 0.001;
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <USART1_IRQHandler+0x3b0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fcd9 	bl	8000490 <__aeabi_f2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	a340      	add	r3, pc, #256	; (adr r3, 8002be8 <USART1_IRQHandler+0x3a0>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fb72 	bl	80001d4 <__adddf3>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7fd ffe0 	bl	8000abc <__aeabi_d2f>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <USART1_IRQHandler+0x3b0>)
 8002b00:	601a      	str	r2, [r3, #0]
		ki_roll = ki_roll + 0.0001;
 8002b02:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <USART1_IRQHandler+0x3b4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fcc2 	bl	8000490 <__aeabi_f2d>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	a336      	add	r3, pc, #216	; (adr r3, 8002bf0 <USART1_IRQHandler+0x3a8>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	f7fd fb5b 	bl	80001d4 <__adddf3>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7fd ffc9 	bl	8000abc <__aeabi_d2f>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <USART1_IRQHandler+0x3b4>)
 8002b2e:	601a      	str	r2, [r3, #0]
		USART_puts(USART1, "KI_Pitch Increased by 0.0001");
 8002b30:	4833      	ldr	r0, [pc, #204]	; (8002c00 <USART1_IRQHandler+0x3b8>)
 8002b32:	4934      	ldr	r1, [pc, #208]	; (8002c04 <USART1_IRQHandler+0x3bc>)
 8002b34:	f7fe fcaa 	bl	800148c <USART_puts>
		USART_puts(USART1, "KI_Roll Increased by 0.0001");
 8002b38:	4831      	ldr	r0, [pc, #196]	; (8002c00 <USART1_IRQHandler+0x3b8>)
 8002b3a:	4933      	ldr	r1, [pc, #204]	; (8002c08 <USART1_IRQHandler+0x3c0>)
 8002b3c:	f7fe fca6 	bl	800148c <USART_puts>
		cnt = 0;
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <USART1_IRQHandler+0x3c4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e043      	b.n	8002bd0 <USART1_IRQHandler+0x388>
	}

	else if( t == 'd' || t == 'D')
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d002      	beq.n	8002b54 <USART1_IRQHandler+0x30c>
 8002b4e:	7ffb      	ldrb	r3, [r7, #31]
 8002b50:	2b44      	cmp	r3, #68	; 0x44
 8002b52:	d11f      	bne.n	8002b94 <USART1_IRQHandler+0x34c>
	{
		kd_pitch = kd_pitch + 1;
 8002b54:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <USART1_IRQHandler+0x3c8>)
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8002b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <USART1_IRQHandler+0x3c8>)
 8002b64:	edc3 7a00 	vstr	s15, [r3]
		kd_roll = kd_roll + 1;
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <USART1_IRQHandler+0x3cc>)
 8002b6a:	ed93 7a00 	vldr	s14, [r3]
 8002b6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8002b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <USART1_IRQHandler+0x3cc>)
 8002b78:	edc3 7a00 	vstr	s15, [r3]
		USART_puts(USART1, "KD_Pitch Increased by 1");
 8002b7c:	4820      	ldr	r0, [pc, #128]	; (8002c00 <USART1_IRQHandler+0x3b8>)
 8002b7e:	4926      	ldr	r1, [pc, #152]	; (8002c18 <USART1_IRQHandler+0x3d0>)
 8002b80:	f7fe fc84 	bl	800148c <USART_puts>
		USART_puts(USART1, "KD_Roll Increased by 1");
 8002b84:	481e      	ldr	r0, [pc, #120]	; (8002c00 <USART1_IRQHandler+0x3b8>)
 8002b86:	4925      	ldr	r1, [pc, #148]	; (8002c1c <USART1_IRQHandler+0x3d4>)
 8002b88:	f7fe fc80 	bl	800148c <USART_puts>
		cnt = 0;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <USART1_IRQHandler+0x3c4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e01d      	b.n	8002bd0 <USART1_IRQHandler+0x388>
	}

	else		//Emergency Stop
	{
		throttle = 1010;
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <USART1_IRQHandler+0x3d8>)
 8002b96:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8002b9a:	601a      	str	r2, [r3, #0]
		USART_puts(USART1, "Stopping..");
 8002b9c:	4818      	ldr	r0, [pc, #96]	; (8002c00 <USART1_IRQHandler+0x3b8>)
 8002b9e:	4921      	ldr	r1, [pc, #132]	; (8002c24 <USART1_IRQHandler+0x3dc>)
 8002ba0:	f7fe fc74 	bl	800148c <USART_puts>
		Delay(20);
 8002ba4:	2014      	movs	r0, #20
 8002ba6:	f7fe fc05 	bl	80013b4 <Delay>
		myMotorFL_write(1010);	//640
 8002baa:	f240 30f2 	movw	r0, #1010	; 0x3f2
 8002bae:	f7fe fc8f 	bl	80014d0 <myMotorFL_write>
		myMotorFR_write(1010);
 8002bb2:	f240 30f2 	movw	r0, #1010	; 0x3f2
 8002bb6:	f7fe fcb5 	bl	8001524 <myMotorFR_write>
		myMotorBL_write(1010);
 8002bba:	f240 30f2 	movw	r0, #1010	; 0x3f2
 8002bbe:	f7fe fcdb 	bl	8001578 <myMotorBL_write>
		myMotorBR_write(1010);
 8002bc2:	f240 30f2 	movw	r0, #1010	; 0x3f2
 8002bc6:	f7fe fd01 	bl	80015cc <myMotorBR_write>
		Delay(20);
 8002bca:	2014      	movs	r0, #20
 8002bcc:	f7fe fbf2 	bl	80013b4 <Delay>
		//CommandControl(received_string);
	}



	cnt = 0;
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <USART1_IRQHandler+0x3c4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
	USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8002bd6:	480a      	ldr	r0, [pc, #40]	; (8002c00 <USART1_IRQHandler+0x3b8>)
 8002bd8:	f240 5125 	movw	r1, #1317	; 0x525
 8002bdc:	f000 fd26 	bl	800362c <USART_ClearITPendingBit>
}
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bec:	3f50624d 	.word	0x3f50624d
 8002bf0:	eb1c432d 	.word	0xeb1c432d
 8002bf4:	3f1a36e2 	.word	0x3f1a36e2
 8002bf8:	20000014 	.word	0x20000014
 8002bfc:	20000008 	.word	0x20000008
 8002c00:	40011000 	.word	0x40011000
 8002c04:	08006390 	.word	0x08006390
 8002c08:	080063b0 	.word	0x080063b0
 8002c0c:	20000144 	.word	0x20000144
 8002c10:	20000018 	.word	0x20000018
 8002c14:	2000000c 	.word	0x2000000c
 8002c18:	080063cc 	.word	0x080063cc
 8002c1c:	080063e4 	.word	0x080063e4
 8002c20:	200000d4 	.word	0x200000d4
 8002c24:	080063fc 	.word	0x080063fc

08002c28 <ComplementaryFilter>:

	*Cal_Baro_Val = *Baro_Val;
}

void ComplementaryFilter(int16_t accData_X, int16_t accData_Y, int16_t accData_Z, int16_t gyData_X, int16_t gyData_Y, int16_t gyData_Z, int16_t magData_X, int16_t magData_Y, int16_t magData_Z, float *roll, float *pitch, float *yaw, float Cal_roll, float Cal_pitch, float Cal_yaw)
{
 8002c28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c2c:	b08a      	sub	sp, #40	; 0x28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	ed87 0a03 	vstr	s0, [r7, #12]
 8002c34:	edc7 0a02 	vstr	s1, [r7, #8]
 8002c38:	ed87 1a01 	vstr	s2, [r7, #4]
 8002c3c:	82f8      	strh	r0, [r7, #22]
 8002c3e:	82b9      	strh	r1, [r7, #20]
 8002c40:	827a      	strh	r2, [r7, #18]
 8002c42:	823b      	strh	r3, [r7, #16]
    float pitchAcc, rollAcc;

    *roll += ((float)gyData_X /(GYROSCOPE_SENSITIVITY)) * (dt);
 8002c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fd fc21 	bl	8000490 <__aeabi_f2d>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	460d      	mov	r5, r1
 8002c52:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c56:	ee07 3a10 	vmov	s14, r3
 8002c5a:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8002c5e:	ee17 0a90 	vmov	r0, s15
 8002c62:	f7fd fc15 	bl	8000490 <__aeabi_f2d>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	a3e6      	add	r3, pc, #920	; (adr r3, 8003008 <ComplementaryFilter+0x3e0>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fd8a 	bl	800078c <__aeabi_ddiv>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	a3e3      	add	r3, pc, #908	; (adr r3, 8003010 <ComplementaryFilter+0x3e8>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fc57 	bl	8000538 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4620      	mov	r0, r4
 8002c90:	4629      	mov	r1, r5
 8002c92:	f7fd fa9f 	bl	80001d4 <__adddf3>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f7fd ff0d 	bl	8000abc <__aeabi_d2f>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca6:	601a      	str	r2, [r3, #0]
    *pitch -= ((float)gyData_Y /(GYROSCOPE_SENSITIVITY)) * (dt);
 8002ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fbef 	bl	8000490 <__aeabi_f2d>
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	460d      	mov	r5, r1
 8002cb6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002cba:	ee07 3a10 	vmov	s14, r3
 8002cbe:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8002cc2:	ee17 0a90 	vmov	r0, s15
 8002cc6:	f7fd fbe3 	bl	8000490 <__aeabi_f2d>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	a3cd      	add	r3, pc, #820	; (adr r3, 8003008 <ComplementaryFilter+0x3e0>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fd58 	bl	800078c <__aeabi_ddiv>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	a3ca      	add	r3, pc, #808	; (adr r3, 8003010 <ComplementaryFilter+0x3e8>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fc25 	bl	8000538 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fa6b 	bl	80001d0 <__aeabi_dsub>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd fedb 	bl	8000abc <__aeabi_d2f>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0a:	601a      	str	r2, [r3, #0]

    rollAcc = atan2f((float)accData_Y/16384, (float)accData_Z/16384) * 180 / M_PI;
 8002d0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d18:	eddf 7ab9 	vldr	s15, [pc, #740]	; 8003000 <ComplementaryFilter+0x3d8>
 8002d1c:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8002d20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d2c:	eddf 7ab4 	vldr	s15, [pc, #720]	; 8003000 <ComplementaryFilter+0x3d8>
 8002d30:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8002d34:	eeb0 0a47 	vmov.f32	s0, s14
 8002d38:	eef0 0a67 	vmov.f32	s1, s15
 8002d3c:	f001 fe1a 	bl	8004974 <atan2f>
 8002d40:	eeb0 7a40 	vmov.f32	s14, s0
 8002d44:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8003004 <ComplementaryFilter+0x3dc>
 8002d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4c:	ee17 0a90 	vmov	r0, s15
 8002d50:	f7fd fb9e 	bl	8000490 <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	a3a2      	add	r3, pc, #648	; (adr r3, 8002fe8 <ComplementaryFilter+0x3c0>)
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	f7fd fd13 	bl	800078c <__aeabi_ddiv>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f7fd fea5 	bl	8000abc <__aeabi_d2f>
 8002d72:	4603      	mov	r3, r0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    pitchAcc = atan2f((float)accData_X/16384, (float)accData_Z/16384) * 180 / M_PI;
 8002d76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d82:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8003000 <ComplementaryFilter+0x3d8>
 8002d86:	ee87 7a27 	vdiv.f32	s14, s14, s15
 8002d8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d96:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8003000 <ComplementaryFilter+0x3d8>
 8002d9a:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8002d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002da2:	eef0 0a67 	vmov.f32	s1, s15
 8002da6:	f001 fde5 	bl	8004974 <atan2f>
 8002daa:	eeb0 7a40 	vmov.f32	s14, s0
 8002dae:	eddf 7a95 	vldr	s15, [pc, #596]	; 8003004 <ComplementaryFilter+0x3dc>
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	ee17 0a90 	vmov	r0, s15
 8002dba:	f7fd fb69 	bl	8000490 <__aeabi_f2d>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	a388      	add	r3, pc, #544	; (adr r3, 8002fe8 <ComplementaryFilter+0x3c0>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f7fd fcde 	bl	800078c <__aeabi_ddiv>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7fd fe70 	bl	8000abc <__aeabi_d2f>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	623b      	str	r3, [r7, #32]

    *pitch = pitchAcc*0.04 + *pitch*0.96;
 8002de0:	6a38      	ldr	r0, [r7, #32]
 8002de2:	f7fd fb55 	bl	8000490 <__aeabi_f2d>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	a380      	add	r3, pc, #512	; (adr r3, 8002ff0 <ComplementaryFilter+0x3c8>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fba0 	bl	8000538 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4614      	mov	r4, r2
 8002dfe:	461d      	mov	r5, r3
 8002e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fb43 	bl	8000490 <__aeabi_f2d>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	a379      	add	r3, pc, #484	; (adr r3, 8002ff8 <ComplementaryFilter+0x3d0>)
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	f7fd fb8e 	bl	8000538 <__aeabi_dmul>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4620      	mov	r0, r4
 8002e22:	4629      	mov	r1, r5
 8002e24:	f7fd f9d6 	bl	80001d4 <__adddf3>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f7fd fe44 	bl	8000abc <__aeabi_d2f>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e38:	601a      	str	r2, [r3, #0]
    *roll = rollAcc*0.04 + *roll*0.96;
 8002e3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e3c:	f7fd fb28 	bl	8000490 <__aeabi_f2d>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	a369      	add	r3, pc, #420	; (adr r3, 8002ff0 <ComplementaryFilter+0x3c8>)
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f7fd fb73 	bl	8000538 <__aeabi_dmul>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4614      	mov	r4, r2
 8002e58:	461d      	mov	r5, r3
 8002e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fb16 	bl	8000490 <__aeabi_f2d>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	a362      	add	r3, pc, #392	; (adr r3, 8002ff8 <ComplementaryFilter+0x3d0>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fb61 	bl	8000538 <__aeabi_dmul>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	f7fd f9a9 	bl	80001d4 <__adddf3>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f7fd fe17 	bl	8000abc <__aeabi_d2f>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e92:	601a      	str	r2, [r3, #0]

    float magXcomp = magData_X*cos(*pitch - Cal_pitch) + (magData_Z)*sin(*pitch - Cal_pitch);
 8002e94:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fae7 	bl	800046c <__aeabi_i2d>
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	460d      	mov	r5, r1
 8002ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea4:	ed93 7a00 	vldr	s14, [r3]
 8002ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb0:	ee17 0a90 	vmov	r0, s15
 8002eb4:	f7fd faec 	bl	8000490 <__aeabi_f2d>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	ec43 2b10 	vmov	d0, r2, r3
 8002ec0:	f001 fcca 	bl	8004858 <cos>
 8002ec4:	ec53 2b10 	vmov	r2, r3, d0
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd fb34 	bl	8000538 <__aeabi_dmul>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fac5 	bl	800046c <__aeabi_i2d>
 8002ee2:	4680      	mov	r8, r0
 8002ee4:	4689      	mov	r9, r1
 8002ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee8:	ed93 7a00 	vldr	s14, [r3]
 8002eec:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef4:	ee17 0a90 	vmov	r0, s15
 8002ef8:	f7fd faca 	bl	8000490 <__aeabi_f2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	ec43 2b10 	vmov	d0, r2, r3
 8002f04:	f001 fcec 	bl	80048e0 <sin>
 8002f08:	ec53 2b10 	vmov	r2, r3, d0
 8002f0c:	4640      	mov	r0, r8
 8002f0e:	4649      	mov	r1, r9
 8002f10:	f7fd fb12 	bl	8000538 <__aeabi_dmul>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4620      	mov	r0, r4
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	f7fd f95a 	bl	80001d4 <__adddf3>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	f7fd fdc8 	bl	8000abc <__aeabi_d2f>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	61fb      	str	r3, [r7, #28]
    float magYcomp = magData_X*sin(*roll - Cal_roll)*sin(*pitch - Cal_pitch) + (magData_Y)*cos(*roll - Cal_roll) - (magData_Z)*sin(*roll - Cal_roll)*cos(*pitch - Cal_pitch);
 8002f30:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fa99 	bl	800046c <__aeabi_i2d>
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	460d      	mov	r5, r1
 8002f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f40:	ed93 7a00 	vldr	s14, [r3]
 8002f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4c:	ee17 0a90 	vmov	r0, s15
 8002f50:	f7fd fa9e 	bl	8000490 <__aeabi_f2d>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	ec43 2b10 	vmov	d0, r2, r3
 8002f5c:	f001 fcc0 	bl	80048e0 <sin>
 8002f60:	ec53 2b10 	vmov	r2, r3, d0
 8002f64:	4620      	mov	r0, r4
 8002f66:	4629      	mov	r1, r5
 8002f68:	f7fd fae6 	bl	8000538 <__aeabi_dmul>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4614      	mov	r4, r2
 8002f72:	461d      	mov	r5, r3
 8002f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f76:	ed93 7a00 	vldr	s14, [r3]
 8002f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f82:	ee17 0a90 	vmov	r0, s15
 8002f86:	f7fd fa83 	bl	8000490 <__aeabi_f2d>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	ec43 2b10 	vmov	d0, r2, r3
 8002f92:	f001 fca5 	bl	80048e0 <sin>
 8002f96:	ec53 2b10 	vmov	r2, r3, d0
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f7fd facb 	bl	8000538 <__aeabi_dmul>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	461d      	mov	r5, r3
 8002faa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fa5c 	bl	800046c <__aeabi_i2d>
 8002fb4:	4680      	mov	r8, r0
 8002fb6:	4689      	mov	r9, r1
 8002fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fba:	ed93 7a00 	vldr	s14, [r3]
 8002fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc6:	ee17 0a90 	vmov	r0, s15
 8002fca:	f7fd fa61 	bl	8000490 <__aeabi_f2d>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	ec43 2b10 	vmov	d0, r2, r3
 8002fd6:	f001 fc3f 	bl	8004858 <cos>
 8002fda:	ec53 2b10 	vmov	r2, r3, d0
 8002fde:	4640      	mov	r0, r8
 8002fe0:	e01a      	b.n	8003018 <ComplementaryFilter+0x3f0>
 8002fe2:	bf00      	nop
 8002fe4:	f3af 8000 	nop.w
 8002fe8:	54442d18 	.word	0x54442d18
 8002fec:	400921fb 	.word	0x400921fb
 8002ff0:	47ae147b 	.word	0x47ae147b
 8002ff4:	3fa47ae1 	.word	0x3fa47ae1
 8002ff8:	eb851eb8 	.word	0xeb851eb8
 8002ffc:	3feeb851 	.word	0x3feeb851
 8003000:	46800000 	.word	0x46800000
 8003004:	43340000 	.word	0x43340000
 8003008:	d2f1a9fc 	.word	0xd2f1a9fc
 800300c:	4050624d 	.word	0x4050624d
 8003010:	d2f1a9fc 	.word	0xd2f1a9fc
 8003014:	3f70624d 	.word	0x3f70624d
 8003018:	4649      	mov	r1, r9
 800301a:	f7fd fa8d 	bl	8000538 <__aeabi_dmul>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4620      	mov	r0, r4
 8003024:	4629      	mov	r1, r5
 8003026:	f7fd f8d5 	bl	80001d4 <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4614      	mov	r4, r2
 8003030:	461d      	mov	r5, r3
 8003032:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa18 	bl	800046c <__aeabi_i2d>
 800303c:	4680      	mov	r8, r0
 800303e:	4689      	mov	r9, r1
 8003040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003042:	ed93 7a00 	vldr	s14, [r3]
 8003046:	edd7 7a03 	vldr	s15, [r7, #12]
 800304a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304e:	ee17 0a90 	vmov	r0, s15
 8003052:	f7fd fa1d 	bl	8000490 <__aeabi_f2d>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	ec43 2b10 	vmov	d0, r2, r3
 800305e:	f001 fc3f 	bl	80048e0 <sin>
 8003062:	ec53 2b10 	vmov	r2, r3, d0
 8003066:	4640      	mov	r0, r8
 8003068:	4649      	mov	r1, r9
 800306a:	f7fd fa65 	bl	8000538 <__aeabi_dmul>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4690      	mov	r8, r2
 8003074:	4699      	mov	r9, r3
 8003076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003078:	ed93 7a00 	vldr	s14, [r3]
 800307c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003084:	ee17 0a90 	vmov	r0, s15
 8003088:	f7fd fa02 	bl	8000490 <__aeabi_f2d>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	ec43 2b10 	vmov	d0, r2, r3
 8003094:	f001 fbe0 	bl	8004858 <cos>
 8003098:	ec53 2b10 	vmov	r2, r3, d0
 800309c:	4640      	mov	r0, r8
 800309e:	4649      	mov	r1, r9
 80030a0:	f7fd fa4a 	bl	8000538 <__aeabi_dmul>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4620      	mov	r0, r4
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7fd f890 	bl	80001d0 <__aeabi_dsub>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fd fd00 	bl	8000abc <__aeabi_d2f>
 80030bc:	4603      	mov	r3, r0
 80030be:	61bb      	str	r3, [r7, #24]

    *yaw = 180*atan2(magYcomp,magXcomp)/M_PI;
 80030c0:	69b8      	ldr	r0, [r7, #24]
 80030c2:	f7fd f9e5 	bl	8000490 <__aeabi_f2d>
 80030c6:	4604      	mov	r4, r0
 80030c8:	460d      	mov	r5, r1
 80030ca:	69f8      	ldr	r0, [r7, #28]
 80030cc:	f7fd f9e0 	bl	8000490 <__aeabi_f2d>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	ec45 4b10 	vmov	d0, r4, r5
 80030d8:	ec43 2b11 	vmov	d1, r2, r3
 80030dc:	f001 fc48 	bl	8004970 <atan2>
 80030e0:	ec53 2b10 	vmov	r2, r3, d0
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <ComplementaryFilter+0x500>)
 80030ee:	f7fd fa23 	bl	8000538 <__aeabi_dmul>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	a309      	add	r3, pc, #36	; (adr r3, 8003120 <ComplementaryFilter+0x4f8>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f7fd fb44 	bl	800078c <__aeabi_ddiv>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	f7fd fcd6 	bl	8000abc <__aeabi_d2f>
 8003110:	4602      	mov	r2, r0
 8003112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	3728      	adds	r7, #40	; 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800311e:	bf00      	nop
 8003120:	54442d18 	.word	0x54442d18
 8003124:	400921fb 	.word	0x400921fb
 8003128:	40668000 	.word	0x40668000
 800312c:	f3af 8000 	nop.w

08003130 <PID_Control>:
    prevRoll = *roll;
    prevPitch = *pitch;
}

void PID_Control(float roll, float pitch, float *roll_pid, float *pitch_pid, float d_roll, float d_pitch)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	ed87 0a05 	vstr	s0, [r7, #20]
 800313a:	edc7 0a04 	vstr	s1, [r7, #16]
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	ed87 1a01 	vstr	s2, [r7, #4]
 8003146:	edc7 1a00 	vstr	s3, [r7]
	float error_roll = d_roll - roll;
 800314a:	ed97 7a01 	vldr	s14, [r7, #4]
 800314e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	edc7 7a07 	vstr	s15, [r7, #28]
	float error_pitch = d_pitch - pitch;
 800315a:	ed97 7a00 	vldr	s14, [r7]
 800315e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003166:	edc7 7a06 	vstr	s15, [r7, #24]

	error_sum_roll += ki_roll*error_roll;
 800316a:	4b34      	ldr	r3, [pc, #208]	; (800323c <PID_Control+0x10c>)
 800316c:	ed93 7a00 	vldr	s14, [r3]
 8003170:	edd7 7a07 	vldr	s15, [r7, #28]
 8003174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003178:	4b31      	ldr	r3, [pc, #196]	; (8003240 <PID_Control+0x110>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003182:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <PID_Control+0x110>)
 8003184:	edc3 7a00 	vstr	s15, [r3]
	diff_error_roll = (error_roll - error_last_roll);
 8003188:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <PID_Control+0x114>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <PID_Control+0x118>)
 8003198:	edc3 7a00 	vstr	s15, [r3]

	error_sum_pitch += ki_pitch*error_pitch;
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <PID_Control+0x11c>)
 800319e:	ed93 7a00 	vldr	s14, [r3]
 80031a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <PID_Control+0x120>)
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b4:	4b26      	ldr	r3, [pc, #152]	; (8003250 <PID_Control+0x120>)
 80031b6:	edc3 7a00 	vstr	s15, [r3]
	diff_error_pitch = (error_pitch - error_last_pitch);
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <PID_Control+0x124>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80031c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <PID_Control+0x128>)
 80031ca:	edc3 7a00 	vstr	s15, [r3]

	*roll_pid = kp_roll*(error_roll) + error_sum_roll + kd_roll*diff_error_roll;
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <PID_Control+0x12c>)
 80031d0:	ed93 7a00 	vldr	s14, [r3]
 80031d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80031d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <PID_Control+0x110>)
 80031de:	edd3 7a00 	vldr	s15, [r3]
 80031e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <PID_Control+0x130>)
 80031e8:	edd3 6a00 	vldr	s13, [r3]
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <PID_Control+0x118>)
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	edc3 7a00 	vstr	s15, [r3]
	*pitch_pid = kp_pitch*(error_pitch) + error_sum_pitch + kd_pitch*diff_error_pitch;
 8003200:	4b18      	ldr	r3, [pc, #96]	; (8003264 <PID_Control+0x134>)
 8003202:	ed93 7a00 	vldr	s14, [r3]
 8003206:	edd7 7a06 	vldr	s15, [r7, #24]
 800320a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <PID_Control+0x120>)
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <PID_Control+0x138>)
 800321a:	edd3 6a00 	vldr	s13, [r3]
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <PID_Control+0x128>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	edc3 7a00 	vstr	s15, [r3]
}
 8003232:	3724      	adds	r7, #36	; 0x24
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	20000008 	.word	0x20000008
 8003240:	200000d8 	.word	0x200000d8
 8003244:	200000fc 	.word	0x200000fc
 8003248:	200000e4 	.word	0x200000e4
 800324c:	20000014 	.word	0x20000014
 8003250:	200000dc 	.word	0x200000dc
 8003254:	20000100 	.word	0x20000100
 8003258:	200000e8 	.word	0x200000e8
 800325c:	20000004 	.word	0x20000004
 8003260:	2000000c 	.word	0x2000000c
 8003264:	20000010 	.word	0x20000010
 8003268:	20000018 	.word	0x20000018

0800326c <PID_Yaw>:

void PID_Yaw(float yaw, float *yaw_pid, float d_yaw)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	ed87 0a03 	vstr	s0, [r7, #12]
 8003276:	60b8      	str	r0, [r7, #8]
 8003278:	edc7 0a01 	vstr	s1, [r7, #4]
	float error_yaw = d_yaw - yaw;
 800327c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003280:	edd7 7a03 	vldr	s15, [r7, #12]
 8003284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003288:	edc7 7a05 	vstr	s15, [r7, #20]

	error_sum_yaw += ki_yaw*error_yaw;
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <PID_Yaw+0x90>)
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	edd7 7a05 	vldr	s15, [r7, #20]
 8003296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800329a:	4b19      	ldr	r3, [pc, #100]	; (8003300 <PID_Yaw+0x94>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a4:	4b16      	ldr	r3, [pc, #88]	; (8003300 <PID_Yaw+0x94>)
 80032a6:	edc3 7a00 	vstr	s15, [r3]
	diff_error_yaw = (error_yaw - error_last_yaw);
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <PID_Yaw+0x98>)
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80032b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <PID_Yaw+0x9c>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]

	*yaw_pid = kp_yaw*(error_yaw) + error_sum_yaw + kd_yaw*diff_error_yaw;
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <PID_Yaw+0xa0>)
 80032c0:	ed93 7a00 	vldr	s14, [r3]
 80032c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <PID_Yaw+0x94>)
 80032ce:	edd3 7a00 	vldr	s15, [r3]
 80032d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <PID_Yaw+0xa4>)
 80032d8:	edd3 6a00 	vldr	s13, [r3]
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <PID_Yaw+0x9c>)
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	edc3 7a00 	vstr	s15, [r3]
}
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	200000b4 	.word	0x200000b4
 8003300:	200000e0 	.word	0x200000e0
 8003304:	20000104 	.word	0x20000104
 8003308:	200000ec 	.word	0x200000ec
 800330c:	200000b0 	.word	0x200000b0
 8003310:	200000b8 	.word	0x200000b8

08003314 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	2300      	movs	r3, #0
 8003324:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8a1b      	ldrh	r3, [r3, #16]
 8003332:	b29b      	uxth	r3, r3
 8003334:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800333c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	88db      	ldrh	r3, [r3, #6]
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	4313      	orrs	r3, r2
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	899b      	ldrh	r3, [r3, #12]
 8003354:	b29b      	uxth	r3, r3
 8003356:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800335e:	f023 030c 	bic.w	r3, r3, #12
 8003362:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	889a      	ldrh	r2, [r3, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	891b      	ldrh	r3, [r3, #8]
 800336c:	4313      	orrs	r3, r2
 800336e:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003374:	4313      	orrs	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337a:	4313      	orrs	r3, r2
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	b29a      	uxth	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8a9b      	ldrh	r3, [r3, #20]
 800338a:	b29b      	uxth	r3, r3
 800338c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003394:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	899b      	ldrh	r3, [r3, #12]
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	4313      	orrs	r3, r2
 800339e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80033a8:	f107 0308 	add.w	r3, r7, #8
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f99d 	bl	80036ec <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4b31      	ldr	r3, [pc, #196]	; (800347c <USART_Init+0x168>)
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d003      	beq.n	80033c2 <USART_Init+0xae>
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4b30      	ldr	r3, [pc, #192]	; (8003480 <USART_Init+0x16c>)
 80033be:	429a      	cmp	r2, r3
 80033c0:	d102      	bne.n	80033c8 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	623b      	str	r3, [r7, #32]
 80033c6:	e001      	b.n	80033cc <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	899b      	ldrh	r3, [r3, #12]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	b21b      	sxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	da0c      	bge.n	80033f4 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80033da:	6a3a      	ldr	r2, [r7, #32]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009a      	lsls	r2, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e00b      	b.n	800340c <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009a      	lsls	r2, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <USART_Init+0x170>)
 8003410:	fba3 1302 	umull	r1, r3, r3, r2
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	2264      	movs	r2, #100	; 0x64
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	899b      	ldrh	r3, [r3, #12]
 800342e:	b29b      	uxth	r3, r3
 8003430:	b29b      	uxth	r3, r3
 8003432:	b21b      	sxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	da0d      	bge.n	8003454 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <USART_Init+0x170>)
 8003442:	fba3 1302 	umull	r1, r3, r3, r2
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	4313      	orrs	r3, r2
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	e00c      	b.n	800346e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <USART_Init+0x170>)
 800345e:	fba3 1302 	umull	r1, r3, r3, r2
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346a:	4313      	orrs	r3, r2
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	811a      	strh	r2, [r3, #8]
}
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40011000 	.word	0x40011000
 8003480:	40011400 	.word	0x40011400
 8003484:	51eb851f 	.word	0x51eb851f

08003488 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	899b      	ldrh	r3, [r3, #12]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	819a      	strh	r2, [r3, #12]
 80034aa:	e007      	b.n	80034bc <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	899b      	ldrh	r3, [r3, #12]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	819a      	strh	r2, [r3, #12]
  }
}
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop

080034c8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	809a      	strh	r2, [r3, #4]
}
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop

080034ec <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	460a      	mov	r2, r1
 80034f8:	807a      	strh	r2, [r7, #2]
 80034fa:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	2300      	movs	r3, #0
 8003506:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	b2db      	uxtb	r3, r3
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d103      	bne.n	800353a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	330c      	adds	r3, #12
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e009      	b.n	800354e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d103      	bne.n	8003548 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	3310      	adds	r3, #16
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e002      	b.n	800354e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3314      	adds	r3, #20
 800354c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800354e:	787b      	ldrb	r3, [r7, #1]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d006      	beq.n	8003562 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	6811      	ldr	r1, [r2, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e006      	b.n	8003570 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	6811      	ldr	r1, [r2, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	43d2      	mvns	r2, r2
 800356c:	400a      	ands	r2, r1
 800356e:	601a      	str	r2, [r3, #0]
  }
}
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop

0800357c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	2300      	movs	r3, #0
 8003592:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80035a2:	887b      	ldrh	r3, [r7, #2]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2201      	movs	r2, #1
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d106      	bne.n	80035c8 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	899b      	ldrh	r3, [r3, #12]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4013      	ands	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e00f      	b.n	80035e8 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d106      	bne.n	80035dc <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8a1b      	ldrh	r3, [r3, #16]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4013      	ands	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e005      	b.n	80035e8 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8a9b      	ldrh	r3, [r3, #20]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4013      	ands	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80035e8:	887b      	ldrh	r3, [r7, #2]
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <USART_GetITStatus+0x9c>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	74fb      	strb	r3, [r7, #19]
 8003616:	e001      	b.n	800361c <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800361c:	7cfb      	ldrb	r3, [r7, #19]
}
 800361e:	4618      	mov	r0, r3
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop

0800362c <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8003638:	2300      	movs	r3, #0
 800363a:	81fb      	strh	r3, [r7, #14]
 800363c:	2300      	movs	r3, #0
 800363e:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8003640:	887b      	ldrh	r3, [r7, #2]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8003646:	89fb      	ldrh	r3, [r7, #14]
 8003648:	2201      	movs	r2, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8003650:	89bb      	ldrh	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	801a      	strh	r2, [r3, #0]
}
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	e007      	b.n	8003698 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	801a      	strh	r2, [r3, #0]
  }
}
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop

080036a4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	460a      	mov	r2, r1
 80036b0:	807a      	strh	r2, [r7, #2]
 80036b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	899b      	ldrh	r3, [r3, #12]
 80036be:	b29a      	uxth	r2, r3
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	819a      	strh	r2, [r3, #12]
 80036ca:	e009      	b.n	80036e0 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	899b      	ldrh	r3, [r3, #12]
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4013      	ands	r3, r2
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	819a      	strh	r2, [r3, #12]
  }
}
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	2302      	movs	r3, #2
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	2302      	movs	r3, #2
 800370a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800370c:	4b48      	ldr	r3, [pc, #288]	; (8003830 <RCC_GetClocksFreq+0x144>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d007      	beq.n	800372c <RCC_GetClocksFreq+0x40>
 800371c:	2b08      	cmp	r3, #8
 800371e:	d009      	beq.n	8003734 <RCC_GetClocksFreq+0x48>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d13f      	bne.n	80037a4 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a43      	ldr	r2, [pc, #268]	; (8003834 <RCC_GetClocksFreq+0x148>)
 8003728:	601a      	str	r2, [r3, #0]
      break;
 800372a:	e03f      	b.n	80037ac <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a42      	ldr	r2, [pc, #264]	; (8003838 <RCC_GetClocksFreq+0x14c>)
 8003730:	601a      	str	r2, [r3, #0]
      break;
 8003732:	e03b      	b.n	80037ac <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003734:	4b3e      	ldr	r3, [pc, #248]	; (8003830 <RCC_GetClocksFreq+0x144>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373c:	0d9b      	lsrs	r3, r3, #22
 800373e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003740:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <RCC_GetClocksFreq+0x144>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003748:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003750:	4a39      	ldr	r2, [pc, #228]	; (8003838 <RCC_GetClocksFreq+0x14c>)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	fbb2 f2f3 	udiv	r2, r2, r3
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <RCC_GetClocksFreq+0x144>)
 800375a:	6859      	ldr	r1, [r3, #4]
 800375c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003760:	400b      	ands	r3, r1
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	fb03 f302 	mul.w	r3, r3, r2
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	e00c      	b.n	8003786 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800376c:	4a31      	ldr	r2, [pc, #196]	; (8003834 <RCC_GetClocksFreq+0x148>)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	fbb2 f2f3 	udiv	r2, r2, r3
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <RCC_GetClocksFreq+0x144>)
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800377c:	400b      	ands	r3, r1
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	fb03 f302 	mul.w	r3, r3, r2
 8003784:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <RCC_GetClocksFreq+0x144>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800378e:	0c1b      	lsrs	r3, r3, #16
 8003790:	3301      	adds	r3, #1
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	fbb2 f2f3 	udiv	r2, r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
      break;
 80037a2:	e003      	b.n	80037ac <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a23      	ldr	r2, [pc, #140]	; (8003834 <RCC_GetClocksFreq+0x148>)
 80037a8:	601a      	str	r2, [r3, #0]
      break;
 80037aa:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <RCC_GetClocksFreq+0x144>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80037bc:	4a1f      	ldr	r2, [pc, #124]	; (800383c <RCC_GetClocksFreq+0x150>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4413      	add	r3, r2
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	40da      	lsrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <RCC_GetClocksFreq+0x144>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80037dc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	0a9b      	lsrs	r3, r3, #10
 80037e2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80037e4:	4a15      	ldr	r2, [pc, #84]	; (800383c <RCC_GetClocksFreq+0x150>)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	4413      	add	r3, r2
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	40da      	lsrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <RCC_GetClocksFreq+0x144>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003804:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	0b5b      	lsrs	r3, r3, #13
 800380a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800380c:	4a0b      	ldr	r2, [pc, #44]	; (800383c <RCC_GetClocksFreq+0x150>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4413      	add	r3, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	40da      	lsrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	60da      	str	r2, [r3, #12]
}
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	00f42400 	.word	0x00f42400
 8003838:	007a1200 	.word	0x007a1200
 800383c:	2000001c 	.word	0x2000001c

08003840 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <RCC_AHB1PeriphClockCmd+0x38>)
 8003854:	4a08      	ldr	r2, [pc, #32]	; (8003878 <RCC_AHB1PeriphClockCmd+0x38>)
 8003856:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	430a      	orrs	r2, r1
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
 800385e:	e006      	b.n	800386e <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <RCC_AHB1PeriphClockCmd+0x38>)
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <RCC_AHB1PeriphClockCmd+0x38>)
 8003864:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	43d2      	mvns	r2, r2
 800386a:	400a      	ands	r2, r1
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40023800 	.word	0x40023800

0800387c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <RCC_APB1PeriphClockCmd+0x38>)
 8003890:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <RCC_APB1PeriphClockCmd+0x38>)
 8003892:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	430a      	orrs	r2, r1
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
 800389a:	e006      	b.n	80038aa <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <RCC_APB1PeriphClockCmd+0x38>)
 800389e:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <RCC_APB1PeriphClockCmd+0x38>)
 80038a0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	43d2      	mvns	r2, r2
 80038a6:	400a      	ands	r2, r1
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40023800 	.word	0x40023800

080038b8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d006      	beq.n	80038d8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <RCC_APB2PeriphClockCmd+0x38>)
 80038cc:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <RCC_APB2PeriphClockCmd+0x38>)
 80038ce:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
 80038d6:	e006      	b.n	80038e6 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <RCC_APB2PeriphClockCmd+0x38>)
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <RCC_APB2PeriphClockCmd+0x38>)
 80038dc:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	43d2      	mvns	r2, r2
 80038e2:	400a      	ands	r2, r1
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40023800 	.word	0x40023800

080038f4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003902:	2300      	movs	r3, #0
 8003904:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8003906:	2304      	movs	r3, #4
 8003908:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800390a:	4b57      	ldr	r3, [pc, #348]	; (8003a68 <I2C_Init+0x174>)
 800390c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	889b      	ldrh	r3, [r3, #4]
 8003912:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8003914:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003916:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800391a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800391c:	f107 030c 	add.w	r3, r7, #12
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fee3 	bl	80036ec <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <I2C_Init+0x178>)
 800392e:	fba3 1302 	umull	r1, r3, r3, r2
 8003932:	0c9b      	lsrs	r3, r3, #18
 8003934:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8003936:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800393a:	4313      	orrs	r3, r2
 800393c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003942:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <I2C_Init+0x17c>)
 800395e:	429a      	cmp	r2, r3
 8003960:	d815      	bhi.n	800398e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8003970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003972:	2b03      	cmp	r3, #3
 8003974:	d801      	bhi.n	800397a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8003976:	2304      	movs	r3, #4
 8003978:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800397a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800397c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800397e:	4313      	orrs	r3, r2
 8003980:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003982:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003984:	3301      	adds	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	841a      	strh	r2, [r3, #32]
 800398c:	e040      	b.n	8003a10 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	88da      	ldrh	r2, [r3, #6]
 8003992:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8003996:	429a      	cmp	r2, r3
 8003998:	d109      	bne.n	80039ae <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80039ac:	e00e      	b.n	80039cc <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80039c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80039cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80039d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80039de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ee:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80039f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <I2C_Init+0x180>)
 80039fc:	fb82 1203 	smull	r1, r2, r2, r3
 8003a00:	1192      	asrs	r2, r2, #6
 8003a02:	17db      	asrs	r3, r3, #31
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a14:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a2e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8003a32:	f023 0302 	bic.w	r3, r3, #2
 8003a36:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	889a      	ldrh	r2, [r3, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	895b      	ldrh	r3, [r3, #10]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a46:	4313      	orrs	r3, r2
 8003a48:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a4e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	899a      	ldrh	r2, [r3, #12]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	891b      	ldrh	r3, [r3, #8]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	811a      	strh	r2, [r3, #8]
}
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	007a1200 	.word	0x007a1200
 8003a6c:	431bde83 	.word	0x431bde83
 8003a70:	000186a0 	.word	0x000186a0
 8003a74:	10624dd3 	.word	0x10624dd3

08003a78 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8003a94:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aa8:	819a      	strh	r2, [r3, #12]
}
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	e007      	b.n	8003ae8 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	801a      	strh	r2, [r3, #0]
  }
}
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	e007      	b.n	8003b28 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	801a      	strh	r2, [r3, #0]
  }
}
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop

08003b34 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e007      	b.n	8003b68 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	801a      	strh	r2, [r3, #0]
  }
}
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop

08003b74 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	460a      	mov	r2, r1
 8003b80:	70fa      	strb	r2, [r7, #3]
 8003b82:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8003b84:	78bb      	ldrb	r3, [r7, #2]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d004      	beq.n	8003b94 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	70fb      	strb	r3, [r7, #3]
 8003b92:	e003      	b.n	8003b9c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	821a      	strh	r2, [r3, #16]
}
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop

08003bb0 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	801a      	strh	r2, [r3, #0]
 8003bd2:	e007      	b.n	8003be4 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	801a      	strh	r2, [r3, #0]
  }
}
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop

08003bf0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	821a      	strh	r2, [r3, #16]
}
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop

08003c10 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8a1b      	ldrh	r3, [r3, #16]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8003c42:	2300      	movs	r3, #0
 8003c44:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8a9b      	ldrh	r3, [r3, #20]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8b1b      	ldrh	r3, [r3, #24]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c66:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d102      	bne.n	8003c7a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]
 8003c78:	e001      	b.n	8003c7e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	0f1b      	lsrs	r3, r3, #28
 8003caa:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cb2:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e005      	b.n	8003cce <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3318      	adds	r3, #24
 8003ccc:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
 8003cde:	e001      	b.n	8003ce4 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop

08003cf4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e076      	b.n	8003dfe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2201      	movs	r2, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d165      	bne.n	8003df8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	2103      	movs	r1, #3
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	401a      	ands	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	791b      	ldrb	r3, [r3, #4]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	791b      	ldrb	r3, [r3, #4]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d003      	beq.n	8003d6a <GPIO_Init+0x76>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	791b      	ldrb	r3, [r3, #4]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d12e      	bne.n	8003dc8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	2103      	movs	r1, #3
 8003d74:	fa01 f303 	lsl.w	r3, r1, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	795b      	ldrb	r3, [r3, #5]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2101      	movs	r1, #1
 8003da2:	fa01 f303 	lsl.w	r3, r1, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	401a      	ands	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	799b      	ldrb	r3, [r3, #6]
 8003db6:	4619      	mov	r1, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2103      	movs	r1, #3
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	401a      	ands	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	79db      	ldrb	r3, [r3, #7]
 8003de8:	4619      	mov	r1, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b0f      	cmp	r3, #15
 8003e02:	d985      	bls.n	8003d10 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop

08003e10 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	71da      	strb	r2, [r3, #7]
}
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	831a      	strh	r2, [r3, #24]
}
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	835a      	strh	r2, [r3, #26]
}
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	460a      	mov	r2, r1
 8003e88:	807a      	strh	r2, [r7, #2]
 8003e8a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003e94:	787a      	ldrb	r2, [r7, #1]
 8003e96:	887b      	ldrh	r3, [r7, #2]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	08db      	lsrs	r3, r3, #3
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	08db      	lsrs	r3, r3, #3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3108      	adds	r1, #8
 8003eb8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003ebc:	887b      	ldrh	r3, [r7, #2]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	200f      	movs	r0, #15
 8003ec6:	fa00 f303 	lsl.w	r3, r0, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	4019      	ands	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3208      	adds	r2, #8
 8003ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	08db      	lsrs	r3, r3, #3
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	08db      	lsrs	r3, r3, #3
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3208      	adds	r2, #8
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	2300      	movs	r3, #0
 8003f16:	73bb      	strb	r3, [r7, #14]
 8003f18:	230f      	movs	r3, #15
 8003f1a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	78db      	ldrb	r3, [r3, #3]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d037      	beq.n	8003f94 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <NVIC_Init+0xb4>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	f1c3 0304 	rsb	r3, r3, #4
 8003f38:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8003f3a:	7b7a      	ldrb	r2, [r7, #13]
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	fa42 f303 	asr.w	r3, r2, r3
 8003f42:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	7bbb      	ldrb	r3, [r7, #14]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	789a      	ldrb	r2, [r3, #2]
 8003f56:	7b7b      	ldrb	r3, [r7, #13]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <NVIC_Init+0xb8>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	4413      	add	r3, r2
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <NVIC_Init+0xb8>)
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	7812      	ldrb	r2, [r2, #0]
 8003f7c:	0952      	lsrs	r2, r2, #5
 8003f7e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	7809      	ldrb	r1, [r1, #0]
 8003f84:	f001 011f 	and.w	r1, r1, #31
 8003f88:	2001      	movs	r0, #1
 8003f8a:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f92:	e00e      	b.n	8003fb2 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <NVIC_Init+0xb8>)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	0952      	lsrs	r2, r2, #5
 8003f9c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	7809      	ldrb	r1, [r1, #0]
 8003fa2:	f001 011f 	and.w	r1, r1, #31
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003fac:	3220      	adds	r2, #32
 8003fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000ed00 	.word	0xe000ed00
 8003fc0:	e000e100 	.word	0xe000e100

08003fc4 <__libc_init_array>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <__libc_init_array+0x3c>)
 8003fc8:	4d0e      	ldr	r5, [pc, #56]	; (8004004 <__libc_init_array+0x40>)
 8003fca:	1aed      	subs	r5, r5, r3
 8003fcc:	10ad      	asrs	r5, r5, #2
 8003fce:	2400      	movs	r4, #0
 8003fd0:	461e      	mov	r6, r3
 8003fd2:	42ac      	cmp	r4, r5
 8003fd4:	d004      	beq.n	8003fe0 <__libc_init_array+0x1c>
 8003fd6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003fda:	4790      	blx	r2
 8003fdc:	3401      	adds	r4, #1
 8003fde:	e7f8      	b.n	8003fd2 <__libc_init_array+0xe>
 8003fe0:	f002 f93a 	bl	8006258 <_init>
 8003fe4:	4d08      	ldr	r5, [pc, #32]	; (8004008 <__libc_init_array+0x44>)
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <__libc_init_array+0x48>)
 8003fe8:	1aed      	subs	r5, r5, r3
 8003fea:	10ad      	asrs	r5, r5, #2
 8003fec:	2400      	movs	r4, #0
 8003fee:	461e      	mov	r6, r3
 8003ff0:	42ac      	cmp	r4, r5
 8003ff2:	d004      	beq.n	8003ffe <__libc_init_array+0x3a>
 8003ff4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003ff8:	4790      	blx	r2
 8003ffa:	3401      	adds	r4, #1
 8003ffc:	e7f8      	b.n	8003ff0 <__libc_init_array+0x2c>
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	08006678 	.word	0x08006678
 8004004:	08006678 	.word	0x08006678
 8004008:	0800667c 	.word	0x0800667c
 800400c:	08006678 	.word	0x08006678

08004010 <siprintf>:
 8004010:	b40e      	push	{r1, r2, r3}
 8004012:	b500      	push	{lr}
 8004014:	b09c      	sub	sp, #112	; 0x70
 8004016:	f44f 7102 	mov.w	r1, #520	; 0x208
 800401a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800401e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004022:	9104      	str	r1, [sp, #16]
 8004024:	9107      	str	r1, [sp, #28]
 8004026:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800402a:	ab1d      	add	r3, sp, #116	; 0x74
 800402c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004030:	4908      	ldr	r1, [pc, #32]	; (8004054 <siprintf+0x44>)
 8004032:	f853 2b04 	ldr.w	r2, [r3], #4
 8004036:	9002      	str	r0, [sp, #8]
 8004038:	9006      	str	r0, [sp, #24]
 800403a:	6808      	ldr	r0, [r1, #0]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	a902      	add	r1, sp, #8
 8004040:	f000 f866 	bl	8004110 <_svfiprintf_r>
 8004044:	9b02      	ldr	r3, [sp, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	b01c      	add	sp, #112	; 0x70
 800404c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004050:	b003      	add	sp, #12
 8004052:	4770      	bx	lr
 8004054:	2000008c 	.word	0x2000008c

08004058 <__ssputs_r>:
 8004058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800405c:	688d      	ldr	r5, [r1, #8]
 800405e:	42ab      	cmp	r3, r5
 8004060:	4681      	mov	r9, r0
 8004062:	460c      	mov	r4, r1
 8004064:	4692      	mov	sl, r2
 8004066:	461f      	mov	r7, r3
 8004068:	d343      	bcc.n	80040f2 <__ssputs_r+0x9a>
 800406a:	898b      	ldrh	r3, [r1, #12]
 800406c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8004070:	d03d      	beq.n	80040ee <__ssputs_r+0x96>
 8004072:	6826      	ldr	r6, [r4, #0]
 8004074:	6909      	ldr	r1, [r1, #16]
 8004076:	ebc1 0806 	rsb	r8, r1, r6
 800407a:	6966      	ldr	r6, [r4, #20]
 800407c:	2202      	movs	r2, #2
 800407e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004082:	fb96 f6f2 	sdiv	r6, r6, r2
 8004086:	f108 0201 	add.w	r2, r8, #1
 800408a:	443a      	add	r2, r7
 800408c:	4296      	cmp	r6, r2
 800408e:	bf38      	it	cc
 8004090:	4616      	movcc	r6, r2
 8004092:	055b      	lsls	r3, r3, #21
 8004094:	d50f      	bpl.n	80040b6 <__ssputs_r+0x5e>
 8004096:	4631      	mov	r1, r6
 8004098:	f000 fb26 	bl	80046e8 <_malloc_r>
 800409c:	4605      	mov	r5, r0
 800409e:	b198      	cbz	r0, 80040c8 <__ssputs_r+0x70>
 80040a0:	6921      	ldr	r1, [r4, #16]
 80040a2:	4642      	mov	r2, r8
 80040a4:	f000 fab7 	bl	8004616 <memcpy>
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b2:	81a3      	strh	r3, [r4, #12]
 80040b4:	e013      	b.n	80040de <__ssputs_r+0x86>
 80040b6:	4632      	mov	r2, r6
 80040b8:	f000 fb6a 	bl	8004790 <_realloc_r>
 80040bc:	4605      	mov	r5, r0
 80040be:	b970      	cbnz	r0, 80040de <__ssputs_r+0x86>
 80040c0:	4648      	mov	r0, r9
 80040c2:	6921      	ldr	r1, [r4, #16]
 80040c4:	f000 facc 	bl	8004660 <_free_r>
 80040c8:	230c      	movs	r3, #12
 80040ca:	f8c9 3000 	str.w	r3, [r9]
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	f04f 30ff 	mov.w	r0, #4294967295
 80040da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040de:	6125      	str	r5, [r4, #16]
 80040e0:	6166      	str	r6, [r4, #20]
 80040e2:	4445      	add	r5, r8
 80040e4:	ebc8 0606 	rsb	r6, r8, r6
 80040e8:	6025      	str	r5, [r4, #0]
 80040ea:	60a6      	str	r6, [r4, #8]
 80040ec:	463d      	mov	r5, r7
 80040ee:	42af      	cmp	r7, r5
 80040f0:	d200      	bcs.n	80040f4 <__ssputs_r+0x9c>
 80040f2:	463d      	mov	r5, r7
 80040f4:	462a      	mov	r2, r5
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	4651      	mov	r1, sl
 80040fa:	f000 fa95 	bl	8004628 <memmove>
 80040fe:	68a3      	ldr	r3, [r4, #8]
 8004100:	1b5b      	subs	r3, r3, r5
 8004102:	60a3      	str	r3, [r4, #8]
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	441d      	add	r5, r3
 8004108:	6025      	str	r5, [r4, #0]
 800410a:	2000      	movs	r0, #0
 800410c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004110 <_svfiprintf_r>:
 8004110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004114:	b09d      	sub	sp, #116	; 0x74
 8004116:	4607      	mov	r7, r0
 8004118:	9303      	str	r3, [sp, #12]
 800411a:	898b      	ldrh	r3, [r1, #12]
 800411c:	061c      	lsls	r4, r3, #24
 800411e:	460d      	mov	r5, r1
 8004120:	4616      	mov	r6, r2
 8004122:	d50c      	bpl.n	800413e <_svfiprintf_r+0x2e>
 8004124:	690b      	ldr	r3, [r1, #16]
 8004126:	b953      	cbnz	r3, 800413e <_svfiprintf_r+0x2e>
 8004128:	2140      	movs	r1, #64	; 0x40
 800412a:	f000 fadd 	bl	80046e8 <_malloc_r>
 800412e:	6028      	str	r0, [r5, #0]
 8004130:	6128      	str	r0, [r5, #16]
 8004132:	b910      	cbnz	r0, 800413a <_svfiprintf_r+0x2a>
 8004134:	230c      	movs	r3, #12
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	e0c8      	b.n	80042cc <_svfiprintf_r+0x1bc>
 800413a:	2340      	movs	r3, #64	; 0x40
 800413c:	616b      	str	r3, [r5, #20]
 800413e:	2300      	movs	r3, #0
 8004140:	9309      	str	r3, [sp, #36]	; 0x24
 8004142:	2320      	movs	r3, #32
 8004144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004148:	2330      	movs	r3, #48	; 0x30
 800414a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800414e:	4633      	mov	r3, r6
 8004150:	461c      	mov	r4, r3
 8004152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004156:	b91a      	cbnz	r2, 8004160 <_svfiprintf_r+0x50>
 8004158:	ebb4 0906 	subs.w	r9, r4, r6
 800415c:	d00f      	beq.n	800417e <_svfiprintf_r+0x6e>
 800415e:	e002      	b.n	8004166 <_svfiprintf_r+0x56>
 8004160:	2a25      	cmp	r2, #37	; 0x25
 8004162:	d1f5      	bne.n	8004150 <_svfiprintf_r+0x40>
 8004164:	e7f8      	b.n	8004158 <_svfiprintf_r+0x48>
 8004166:	4638      	mov	r0, r7
 8004168:	4629      	mov	r1, r5
 800416a:	4632      	mov	r2, r6
 800416c:	464b      	mov	r3, r9
 800416e:	f7ff ff73 	bl	8004058 <__ssputs_r>
 8004172:	3001      	adds	r0, #1
 8004174:	f000 80a5 	beq.w	80042c2 <_svfiprintf_r+0x1b2>
 8004178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800417a:	444b      	add	r3, r9
 800417c:	9309      	str	r3, [sp, #36]	; 0x24
 800417e:	7823      	ldrb	r3, [r4, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 809e 	beq.w	80042c2 <_svfiprintf_r+0x1b2>
 8004186:	2300      	movs	r3, #0
 8004188:	f04f 32ff 	mov.w	r2, #4294967295
 800418c:	9304      	str	r3, [sp, #16]
 800418e:	9307      	str	r3, [sp, #28]
 8004190:	9205      	str	r2, [sp, #20]
 8004192:	9306      	str	r3, [sp, #24]
 8004194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004198:	931a      	str	r3, [sp, #104]	; 0x68
 800419a:	f104 0901 	add.w	r9, r4, #1
 800419e:	464c      	mov	r4, r9
 80041a0:	4e4d      	ldr	r6, [pc, #308]	; (80042d8 <_svfiprintf_r+0x1c8>)
 80041a2:	7821      	ldrb	r1, [r4, #0]
 80041a4:	4630      	mov	r0, r6
 80041a6:	2205      	movs	r2, #5
 80041a8:	f000 fa26 	bl	80045f8 <memchr>
 80041ac:	f109 0901 	add.w	r9, r9, #1
 80041b0:	9b04      	ldr	r3, [sp, #16]
 80041b2:	b128      	cbz	r0, 80041c0 <_svfiprintf_r+0xb0>
 80041b4:	1b86      	subs	r6, r0, r6
 80041b6:	2001      	movs	r0, #1
 80041b8:	40b0      	lsls	r0, r6
 80041ba:	4303      	orrs	r3, r0
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	e7ee      	b.n	800419e <_svfiprintf_r+0x8e>
 80041c0:	06d9      	lsls	r1, r3, #27
 80041c2:	bf44      	itt	mi
 80041c4:	2220      	movmi	r2, #32
 80041c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041ca:	071a      	lsls	r2, r3, #28
 80041cc:	bf44      	itt	mi
 80041ce:	222b      	movmi	r2, #43	; 0x2b
 80041d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041d4:	7822      	ldrb	r2, [r4, #0]
 80041d6:	2a2a      	cmp	r2, #42	; 0x2a
 80041d8:	d002      	beq.n	80041e0 <_svfiprintf_r+0xd0>
 80041da:	9b07      	ldr	r3, [sp, #28]
 80041dc:	4621      	mov	r1, r4
 80041de:	e00e      	b.n	80041fe <_svfiprintf_r+0xee>
 80041e0:	9a03      	ldr	r2, [sp, #12]
 80041e2:	1d11      	adds	r1, r2, #4
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	9103      	str	r1, [sp, #12]
 80041e8:	2a00      	cmp	r2, #0
 80041ea:	db01      	blt.n	80041f0 <_svfiprintf_r+0xe0>
 80041ec:	9207      	str	r2, [sp, #28]
 80041ee:	e004      	b.n	80041fa <_svfiprintf_r+0xea>
 80041f0:	4252      	negs	r2, r2
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	9207      	str	r2, [sp, #28]
 80041f8:	9304      	str	r3, [sp, #16]
 80041fa:	3401      	adds	r4, #1
 80041fc:	e00a      	b.n	8004214 <_svfiprintf_r+0x104>
 80041fe:	460c      	mov	r4, r1
 8004200:	3101      	adds	r1, #1
 8004202:	7822      	ldrb	r2, [r4, #0]
 8004204:	3a30      	subs	r2, #48	; 0x30
 8004206:	2a09      	cmp	r2, #9
 8004208:	d803      	bhi.n	8004212 <_svfiprintf_r+0x102>
 800420a:	200a      	movs	r0, #10
 800420c:	fb00 2303 	mla	r3, r0, r3, r2
 8004210:	e7f5      	b.n	80041fe <_svfiprintf_r+0xee>
 8004212:	9307      	str	r3, [sp, #28]
 8004214:	7823      	ldrb	r3, [r4, #0]
 8004216:	2b2e      	cmp	r3, #46	; 0x2e
 8004218:	d11a      	bne.n	8004250 <_svfiprintf_r+0x140>
 800421a:	7863      	ldrb	r3, [r4, #1]
 800421c:	2b2a      	cmp	r3, #42	; 0x2a
 800421e:	d10a      	bne.n	8004236 <_svfiprintf_r+0x126>
 8004220:	9b03      	ldr	r3, [sp, #12]
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	9203      	str	r2, [sp, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f104 0402 	add.w	r4, r4, #2
 800422e:	bfb8      	it	lt
 8004230:	f04f 33ff 	movlt.w	r3, #4294967295
 8004234:	e00b      	b.n	800424e <_svfiprintf_r+0x13e>
 8004236:	1c61      	adds	r1, r4, #1
 8004238:	2300      	movs	r3, #0
 800423a:	460c      	mov	r4, r1
 800423c:	3101      	adds	r1, #1
 800423e:	7822      	ldrb	r2, [r4, #0]
 8004240:	3a30      	subs	r2, #48	; 0x30
 8004242:	2a09      	cmp	r2, #9
 8004244:	d803      	bhi.n	800424e <_svfiprintf_r+0x13e>
 8004246:	200a      	movs	r0, #10
 8004248:	fb00 2303 	mla	r3, r0, r3, r2
 800424c:	e7f5      	b.n	800423a <_svfiprintf_r+0x12a>
 800424e:	9305      	str	r3, [sp, #20]
 8004250:	4e22      	ldr	r6, [pc, #136]	; (80042dc <_svfiprintf_r+0x1cc>)
 8004252:	7821      	ldrb	r1, [r4, #0]
 8004254:	4630      	mov	r0, r6
 8004256:	2203      	movs	r2, #3
 8004258:	f000 f9ce 	bl	80045f8 <memchr>
 800425c:	b130      	cbz	r0, 800426c <_svfiprintf_r+0x15c>
 800425e:	1b86      	subs	r6, r0, r6
 8004260:	9b04      	ldr	r3, [sp, #16]
 8004262:	2040      	movs	r0, #64	; 0x40
 8004264:	40b0      	lsls	r0, r6
 8004266:	4303      	orrs	r3, r0
 8004268:	9304      	str	r3, [sp, #16]
 800426a:	3401      	adds	r4, #1
 800426c:	7821      	ldrb	r1, [r4, #0]
 800426e:	481c      	ldr	r0, [pc, #112]	; (80042e0 <_svfiprintf_r+0x1d0>)
 8004270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004274:	2206      	movs	r2, #6
 8004276:	1c66      	adds	r6, r4, #1
 8004278:	f000 f9be 	bl	80045f8 <memchr>
 800427c:	b188      	cbz	r0, 80042a2 <_svfiprintf_r+0x192>
 800427e:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <_svfiprintf_r+0x1d4>)
 8004280:	b933      	cbnz	r3, 8004290 <_svfiprintf_r+0x180>
 8004282:	9b03      	ldr	r3, [sp, #12]
 8004284:	3307      	adds	r3, #7
 8004286:	f023 0307 	bic.w	r3, r3, #7
 800428a:	3308      	adds	r3, #8
 800428c:	9303      	str	r3, [sp, #12]
 800428e:	e014      	b.n	80042ba <_svfiprintf_r+0x1aa>
 8004290:	ab03      	add	r3, sp, #12
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	4638      	mov	r0, r7
 8004296:	a904      	add	r1, sp, #16
 8004298:	462a      	mov	r2, r5
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <_svfiprintf_r+0x1d8>)
 800429c:	f3af 8000 	nop.w
 80042a0:	e007      	b.n	80042b2 <_svfiprintf_r+0x1a2>
 80042a2:	ab03      	add	r3, sp, #12
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	4638      	mov	r0, r7
 80042a8:	a904      	add	r1, sp, #16
 80042aa:	462a      	mov	r2, r5
 80042ac:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <_svfiprintf_r+0x1d8>)
 80042ae:	f000 f88f 	bl	80043d0 <_printf_i>
 80042b2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80042b6:	4680      	mov	r8, r0
 80042b8:	d003      	beq.n	80042c2 <_svfiprintf_r+0x1b2>
 80042ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042bc:	4443      	add	r3, r8
 80042be:	9309      	str	r3, [sp, #36]	; 0x24
 80042c0:	e745      	b.n	800414e <_svfiprintf_r+0x3e>
 80042c2:	89ab      	ldrh	r3, [r5, #12]
 80042c4:	065b      	lsls	r3, r3, #25
 80042c6:	d401      	bmi.n	80042cc <_svfiprintf_r+0x1bc>
 80042c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ca:	e001      	b.n	80042d0 <_svfiprintf_r+0x1c0>
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	b01d      	add	sp, #116	; 0x74
 80042d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042d6:	bf00      	nop
 80042d8:	08006408 	.word	0x08006408
 80042dc:	0800640e 	.word	0x0800640e
 80042e0:	08006412 	.word	0x08006412
 80042e4:	00000000 	.word	0x00000000
 80042e8:	08004059 	.word	0x08004059

080042ec <_printf_common>:
 80042ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f0:	4615      	mov	r5, r2
 80042f2:	461f      	mov	r7, r3
 80042f4:	688a      	ldr	r2, [r1, #8]
 80042f6:	690b      	ldr	r3, [r1, #16]
 80042f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	bfa8      	it	ge
 8004300:	4613      	movge	r3, r2
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004308:	4606      	mov	r6, r0
 800430a:	460c      	mov	r4, r1
 800430c:	b10a      	cbz	r2, 8004312 <_printf_common+0x26>
 800430e:	3301      	adds	r3, #1
 8004310:	602b      	str	r3, [r5, #0]
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	0699      	lsls	r1, r3, #26
 8004316:	d502      	bpl.n	800431e <_printf_common+0x32>
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	3302      	adds	r3, #2
 800431c:	602b      	str	r3, [r5, #0]
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f013 0906 	ands.w	r9, r3, #6
 8004324:	d01d      	beq.n	8004362 <_printf_common+0x76>
 8004326:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	3300      	adds	r3, #0
 800432e:	bf18      	it	ne
 8004330:	2301      	movne	r3, #1
 8004332:	0692      	lsls	r2, r2, #26
 8004334:	d51f      	bpl.n	8004376 <_printf_common+0x8a>
 8004336:	18e1      	adds	r1, r4, r3
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	2030      	movs	r0, #48	; 0x30
 800433c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004340:	4422      	add	r2, r4
 8004342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004346:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800434a:	3302      	adds	r3, #2
 800434c:	e013      	b.n	8004376 <_printf_common+0x8a>
 800434e:	4630      	mov	r0, r6
 8004350:	4639      	mov	r1, r7
 8004352:	f104 0219 	add.w	r2, r4, #25
 8004356:	2301      	movs	r3, #1
 8004358:	47c0      	blx	r8
 800435a:	3001      	adds	r0, #1
 800435c:	d007      	beq.n	800436e <_printf_common+0x82>
 800435e:	f109 0901 	add.w	r9, r9, #1
 8004362:	68e2      	ldr	r2, [r4, #12]
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	4599      	cmp	r9, r3
 800436a:	dbf0      	blt.n	800434e <_printf_common+0x62>
 800436c:	e7db      	b.n	8004326 <_printf_common+0x3a>
 800436e:	f04f 30ff 	mov.w	r0, #4294967295
 8004372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004376:	4630      	mov	r0, r6
 8004378:	4639      	mov	r1, r7
 800437a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800437e:	47c0      	blx	r8
 8004380:	3001      	adds	r0, #1
 8004382:	d0f4      	beq.n	800436e <_printf_common+0x82>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	682a      	ldr	r2, [r5, #0]
 8004388:	68e1      	ldr	r1, [r4, #12]
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	2b04      	cmp	r3, #4
 8004390:	bf08      	it	eq
 8004392:	ebc2 0501 	rsbeq	r5, r2, r1
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	68a2      	ldr	r2, [r4, #8]
 800439a:	bf0c      	ite	eq
 800439c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a0:	2500      	movne	r5, #0
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bfc4      	itt	gt
 80043a6:	ebc3 0302 	rsbgt	r3, r3, r2
 80043aa:	18ed      	addgt	r5, r5, r3
 80043ac:	f04f 0900 	mov.w	r9, #0
 80043b0:	45a9      	cmp	r9, r5
 80043b2:	da0a      	bge.n	80043ca <_printf_common+0xde>
 80043b4:	4630      	mov	r0, r6
 80043b6:	4639      	mov	r1, r7
 80043b8:	f104 021a 	add.w	r2, r4, #26
 80043bc:	2301      	movs	r3, #1
 80043be:	47c0      	blx	r8
 80043c0:	3001      	adds	r0, #1
 80043c2:	d0d4      	beq.n	800436e <_printf_common+0x82>
 80043c4:	f109 0901 	add.w	r9, r9, #1
 80043c8:	e7f2      	b.n	80043b0 <_printf_common+0xc4>
 80043ca:	2000      	movs	r0, #0
 80043cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080043d0 <_printf_i>:
 80043d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043d4:	7e0e      	ldrb	r6, [r1, #24]
 80043d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043d8:	2e6e      	cmp	r6, #110	; 0x6e
 80043da:	4680      	mov	r8, r0
 80043dc:	460c      	mov	r4, r1
 80043de:	4691      	mov	r9, r2
 80043e0:	469a      	mov	sl, r3
 80043e2:	f101 0043 	add.w	r0, r1, #67	; 0x43
 80043e6:	f000 80a5 	beq.w	8004534 <_printf_i+0x164>
 80043ea:	d811      	bhi.n	8004410 <_printf_i+0x40>
 80043ec:	2e63      	cmp	r6, #99	; 0x63
 80043ee:	d022      	beq.n	8004436 <_printf_i+0x66>
 80043f0:	d809      	bhi.n	8004406 <_printf_i+0x36>
 80043f2:	2e00      	cmp	r6, #0
 80043f4:	f000 80af 	beq.w	8004556 <_printf_i+0x186>
 80043f8:	2e58      	cmp	r6, #88	; 0x58
 80043fa:	f040 80bf 	bne.w	800457c <_printf_i+0x1ac>
 80043fe:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
 8004402:	4a7b      	ldr	r2, [pc, #492]	; (80045f0 <_printf_i+0x220>)
 8004404:	e04f      	b.n	80044a6 <_printf_i+0xd6>
 8004406:	2e64      	cmp	r6, #100	; 0x64
 8004408:	d01e      	beq.n	8004448 <_printf_i+0x78>
 800440a:	2e69      	cmp	r6, #105	; 0x69
 800440c:	d01c      	beq.n	8004448 <_printf_i+0x78>
 800440e:	e0b5      	b.n	800457c <_printf_i+0x1ac>
 8004410:	2e73      	cmp	r6, #115	; 0x73
 8004412:	f000 80a4 	beq.w	800455e <_printf_i+0x18e>
 8004416:	d809      	bhi.n	800442c <_printf_i+0x5c>
 8004418:	2e6f      	cmp	r6, #111	; 0x6f
 800441a:	d02b      	beq.n	8004474 <_printf_i+0xa4>
 800441c:	2e70      	cmp	r6, #112	; 0x70
 800441e:	f040 80ad 	bne.w	800457c <_printf_i+0x1ac>
 8004422:	680b      	ldr	r3, [r1, #0]
 8004424:	f043 0320 	orr.w	r3, r3, #32
 8004428:	600b      	str	r3, [r1, #0]
 800442a:	e038      	b.n	800449e <_printf_i+0xce>
 800442c:	2e75      	cmp	r6, #117	; 0x75
 800442e:	d021      	beq.n	8004474 <_printf_i+0xa4>
 8004430:	2e78      	cmp	r6, #120	; 0x78
 8004432:	d034      	beq.n	800449e <_printf_i+0xce>
 8004434:	e0a2      	b.n	800457c <_printf_i+0x1ac>
 8004436:	682b      	ldr	r3, [r5, #0]
 8004438:	1d1a      	adds	r2, r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	602a      	str	r2, [r5, #0]
 800443e:	f101 0742 	add.w	r7, r1, #66	; 0x42
 8004442:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
 8004446:	e09d      	b.n	8004584 <_printf_i+0x1b4>
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	682b      	ldr	r3, [r5, #0]
 800444c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004450:	d003      	beq.n	800445a <_printf_i+0x8a>
 8004452:	1d1a      	adds	r2, r3, #4
 8004454:	602a      	str	r2, [r5, #0]
 8004456:	681d      	ldr	r5, [r3, #0]
 8004458:	e005      	b.n	8004466 <_printf_i+0x96>
 800445a:	0651      	lsls	r1, r2, #25
 800445c:	d5f9      	bpl.n	8004452 <_printf_i+0x82>
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	602a      	str	r2, [r5, #0]
 8004462:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004466:	2d00      	cmp	r5, #0
 8004468:	da39      	bge.n	80044de <_printf_i+0x10e>
 800446a:	232d      	movs	r3, #45	; 0x2d
 800446c:	426d      	negs	r5, r5
 800446e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004472:	e034      	b.n	80044de <_printf_i+0x10e>
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	f012 0f80 	tst.w	r2, #128	; 0x80
 800447c:	d003      	beq.n	8004486 <_printf_i+0xb6>
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	602a      	str	r2, [r5, #0]
 8004482:	681d      	ldr	r5, [r3, #0]
 8004484:	e004      	b.n	8004490 <_printf_i+0xc0>
 8004486:	0652      	lsls	r2, r2, #25
 8004488:	d5f9      	bpl.n	800447e <_printf_i+0xae>
 800448a:	1d1a      	adds	r2, r3, #4
 800448c:	602a      	str	r2, [r5, #0]
 800448e:	881d      	ldrh	r5, [r3, #0]
 8004490:	7e23      	ldrb	r3, [r4, #24]
 8004492:	4a57      	ldr	r2, [pc, #348]	; (80045f0 <_printf_i+0x220>)
 8004494:	2b6f      	cmp	r3, #111	; 0x6f
 8004496:	bf14      	ite	ne
 8004498:	230a      	movne	r3, #10
 800449a:	2308      	moveq	r3, #8
 800449c:	e01b      	b.n	80044d6 <_printf_i+0x106>
 800449e:	2378      	movs	r3, #120	; 0x78
 80044a0:	4a54      	ldr	r2, [pc, #336]	; (80045f4 <_printf_i+0x224>)
 80044a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	6829      	ldr	r1, [r5, #0]
 80044aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044ae:	f101 0604 	add.w	r6, r1, #4
 80044b2:	602e      	str	r6, [r5, #0]
 80044b4:	d001      	beq.n	80044ba <_printf_i+0xea>
 80044b6:	680d      	ldr	r5, [r1, #0]
 80044b8:	e002      	b.n	80044c0 <_printf_i+0xf0>
 80044ba:	065f      	lsls	r7, r3, #25
 80044bc:	d5fb      	bpl.n	80044b6 <_printf_i+0xe6>
 80044be:	880d      	ldrh	r5, [r1, #0]
 80044c0:	07de      	lsls	r6, r3, #31
 80044c2:	bf44      	itt	mi
 80044c4:	f043 0320 	orrmi.w	r3, r3, #32
 80044c8:	6023      	strmi	r3, [r4, #0]
 80044ca:	b91d      	cbnz	r5, 80044d4 <_printf_i+0x104>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	f023 0320 	bic.w	r3, r3, #32
 80044d2:	6023      	str	r3, [r4, #0]
 80044d4:	2310      	movs	r3, #16
 80044d6:	2100      	movs	r1, #0
 80044d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044dc:	e001      	b.n	80044e2 <_printf_i+0x112>
 80044de:	4a44      	ldr	r2, [pc, #272]	; (80045f0 <_printf_i+0x220>)
 80044e0:	230a      	movs	r3, #10
 80044e2:	6866      	ldr	r6, [r4, #4]
 80044e4:	60a6      	str	r6, [r4, #8]
 80044e6:	2e00      	cmp	r6, #0
 80044e8:	db03      	blt.n	80044f2 <_printf_i+0x122>
 80044ea:	6821      	ldr	r1, [r4, #0]
 80044ec:	f021 0104 	bic.w	r1, r1, #4
 80044f0:	6021      	str	r1, [r4, #0]
 80044f2:	b905      	cbnz	r5, 80044f6 <_printf_i+0x126>
 80044f4:	b16e      	cbz	r6, 8004512 <_printf_i+0x142>
 80044f6:	f104 0142 	add.w	r1, r4, #66	; 0x42
 80044fa:	fbb5 f6f3 	udiv	r6, r5, r3
 80044fe:	fb03 5516 	mls	r5, r3, r6, r5
 8004502:	460f      	mov	r7, r1
 8004504:	5d55      	ldrb	r5, [r2, r5]
 8004506:	f801 5901 	strb.w	r5, [r1], #-1
 800450a:	4635      	mov	r5, r6
 800450c:	2e00      	cmp	r6, #0
 800450e:	d1f4      	bne.n	80044fa <_printf_i+0x12a>
 8004510:	e000      	b.n	8004514 <_printf_i+0x144>
 8004512:	4607      	mov	r7, r0
 8004514:	2b08      	cmp	r3, #8
 8004516:	d10a      	bne.n	800452e <_printf_i+0x15e>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	07dd      	lsls	r5, r3, #31
 800451c:	d507      	bpl.n	800452e <_printf_i+0x15e>
 800451e:	6862      	ldr	r2, [r4, #4]
 8004520:	6923      	ldr	r3, [r4, #16]
 8004522:	429a      	cmp	r2, r3
 8004524:	dc03      	bgt.n	800452e <_printf_i+0x15e>
 8004526:	2330      	movs	r3, #48	; 0x30
 8004528:	f807 3c01 	strb.w	r3, [r7, #-1]
 800452c:	3f01      	subs	r7, #1
 800452e:	1bc0      	subs	r0, r0, r7
 8004530:	6120      	str	r0, [r4, #16]
 8004532:	e02c      	b.n	800458e <_printf_i+0x1be>
 8004534:	6809      	ldr	r1, [r1, #0]
 8004536:	682b      	ldr	r3, [r5, #0]
 8004538:	6962      	ldr	r2, [r4, #20]
 800453a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800453e:	d004      	beq.n	800454a <_printf_i+0x17a>
 8004540:	1d19      	adds	r1, r3, #4
 8004542:	6029      	str	r1, [r5, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e005      	b.n	8004556 <_printf_i+0x186>
 800454a:	0649      	lsls	r1, r1, #25
 800454c:	d5f8      	bpl.n	8004540 <_printf_i+0x170>
 800454e:	1d19      	adds	r1, r3, #4
 8004550:	6029      	str	r1, [r5, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	801a      	strh	r2, [r3, #0]
 8004556:	2300      	movs	r3, #0
 8004558:	6123      	str	r3, [r4, #16]
 800455a:	4607      	mov	r7, r0
 800455c:	e017      	b.n	800458e <_printf_i+0x1be>
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	602a      	str	r2, [r5, #0]
 8004564:	681f      	ldr	r7, [r3, #0]
 8004566:	4638      	mov	r0, r7
 8004568:	f000 f948 	bl	80047fc <strlen>
 800456c:	6863      	ldr	r3, [r4, #4]
 800456e:	6120      	str	r0, [r4, #16]
 8004570:	4298      	cmp	r0, r3
 8004572:	bf88      	it	hi
 8004574:	6123      	strhi	r3, [r4, #16]
 8004576:	6923      	ldr	r3, [r4, #16]
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	e005      	b.n	8004588 <_printf_i+0x1b8>
 800457c:	f104 0742 	add.w	r7, r4, #66	; 0x42
 8004580:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
 8004584:	2301      	movs	r3, #1
 8004586:	6123      	str	r3, [r4, #16]
 8004588:	2300      	movs	r3, #0
 800458a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800458e:	f8cd a000 	str.w	sl, [sp]
 8004592:	4640      	mov	r0, r8
 8004594:	4621      	mov	r1, r4
 8004596:	aa03      	add	r2, sp, #12
 8004598:	464b      	mov	r3, r9
 800459a:	f7ff fea7 	bl	80042ec <_printf_common>
 800459e:	3001      	adds	r0, #1
 80045a0:	d102      	bne.n	80045a8 <_printf_i+0x1d8>
 80045a2:	f04f 30ff 	mov.w	r0, #4294967295
 80045a6:	e01f      	b.n	80045e8 <_printf_i+0x218>
 80045a8:	4640      	mov	r0, r8
 80045aa:	4649      	mov	r1, r9
 80045ac:	463a      	mov	r2, r7
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	47d0      	blx	sl
 80045b2:	3001      	adds	r0, #1
 80045b4:	d0f5      	beq.n	80045a2 <_printf_i+0x1d2>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	079b      	lsls	r3, r3, #30
 80045ba:	d405      	bmi.n	80045c8 <_printf_i+0x1f8>
 80045bc:	68e0      	ldr	r0, [r4, #12]
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	4298      	cmp	r0, r3
 80045c2:	bfb8      	it	lt
 80045c4:	4618      	movlt	r0, r3
 80045c6:	e00f      	b.n	80045e8 <_printf_i+0x218>
 80045c8:	2500      	movs	r5, #0
 80045ca:	68e2      	ldr	r2, [r4, #12]
 80045cc:	9b03      	ldr	r3, [sp, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	429d      	cmp	r5, r3
 80045d2:	daf3      	bge.n	80045bc <_printf_i+0x1ec>
 80045d4:	4640      	mov	r0, r8
 80045d6:	4649      	mov	r1, r9
 80045d8:	f104 0219 	add.w	r2, r4, #25
 80045dc:	2301      	movs	r3, #1
 80045de:	47d0      	blx	sl
 80045e0:	3001      	adds	r0, #1
 80045e2:	d0de      	beq.n	80045a2 <_printf_i+0x1d2>
 80045e4:	3501      	adds	r5, #1
 80045e6:	e7f0      	b.n	80045ca <_printf_i+0x1fa>
 80045e8:	b004      	add	sp, #16
 80045ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ee:	bf00      	nop
 80045f0:	08006419 	.word	0x08006419
 80045f4:	0800642a 	.word	0x0800642a

080045f8 <memchr>:
 80045f8:	b510      	push	{r4, lr}
 80045fa:	b2c9      	uxtb	r1, r1
 80045fc:	4402      	add	r2, r0
 80045fe:	4290      	cmp	r0, r2
 8004600:	4603      	mov	r3, r0
 8004602:	d006      	beq.n	8004612 <memchr+0x1a>
 8004604:	781c      	ldrb	r4, [r3, #0]
 8004606:	428c      	cmp	r4, r1
 8004608:	f100 0001 	add.w	r0, r0, #1
 800460c:	d1f7      	bne.n	80045fe <memchr+0x6>
 800460e:	4618      	mov	r0, r3
 8004610:	bd10      	pop	{r4, pc}
 8004612:	2000      	movs	r0, #0
 8004614:	bd10      	pop	{r4, pc}

08004616 <memcpy>:
 8004616:	b510      	push	{r4, lr}
 8004618:	2300      	movs	r3, #0
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <memcpy+0x10>
 800461e:	5ccc      	ldrb	r4, [r1, r3]
 8004620:	54c4      	strb	r4, [r0, r3]
 8004622:	3301      	adds	r3, #1
 8004624:	e7f9      	b.n	800461a <memcpy+0x4>
 8004626:	bd10      	pop	{r4, pc}

08004628 <memmove>:
 8004628:	4281      	cmp	r1, r0
 800462a:	b570      	push	{r4, r5, r6, lr}
 800462c:	d301      	bcc.n	8004632 <memmove+0xa>
 800462e:	2300      	movs	r3, #0
 8004630:	e00e      	b.n	8004650 <memmove+0x28>
 8004632:	188c      	adds	r4, r1, r2
 8004634:	42a0      	cmp	r0, r4
 8004636:	d2fa      	bcs.n	800462e <memmove+0x6>
 8004638:	1885      	adds	r5, r0, r2
 800463a:	4613      	mov	r3, r2
 800463c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004640:	d305      	bcc.n	800464e <memmove+0x26>
 8004642:	4251      	negs	r1, r2
 8004644:	1866      	adds	r6, r4, r1
 8004646:	4429      	add	r1, r5
 8004648:	5cf6      	ldrb	r6, [r6, r3]
 800464a:	54ce      	strb	r6, [r1, r3]
 800464c:	e7f6      	b.n	800463c <memmove+0x14>
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	4293      	cmp	r3, r2
 8004652:	d003      	beq.n	800465c <memmove+0x34>
 8004654:	5ccc      	ldrb	r4, [r1, r3]
 8004656:	54c4      	strb	r4, [r0, r3]
 8004658:	3301      	adds	r3, #1
 800465a:	e7f9      	b.n	8004650 <memmove+0x28>
 800465c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004660 <_free_r>:
 8004660:	b530      	push	{r4, r5, lr}
 8004662:	2900      	cmp	r1, #0
 8004664:	d03c      	beq.n	80046e0 <_free_r+0x80>
 8004666:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800466a:	1f0b      	subs	r3, r1, #4
 800466c:	491d      	ldr	r1, [pc, #116]	; (80046e4 <_free_r+0x84>)
 800466e:	2a00      	cmp	r2, #0
 8004670:	bfb8      	it	lt
 8004672:	189b      	addlt	r3, r3, r2
 8004674:	680a      	ldr	r2, [r1, #0]
 8004676:	460c      	mov	r4, r1
 8004678:	b912      	cbnz	r2, 8004680 <_free_r+0x20>
 800467a:	605a      	str	r2, [r3, #4]
 800467c:	600b      	str	r3, [r1, #0]
 800467e:	bd30      	pop	{r4, r5, pc}
 8004680:	4293      	cmp	r3, r2
 8004682:	d20d      	bcs.n	80046a0 <_free_r+0x40>
 8004684:	6819      	ldr	r1, [r3, #0]
 8004686:	1858      	adds	r0, r3, r1
 8004688:	4290      	cmp	r0, r2
 800468a:	d103      	bne.n	8004694 <_free_r+0x34>
 800468c:	585a      	ldr	r2, [r3, r1]
 800468e:	4411      	add	r1, r2
 8004690:	6842      	ldr	r2, [r0, #4]
 8004692:	6019      	str	r1, [r3, #0]
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	6023      	str	r3, [r4, #0]
 8004698:	bd30      	pop	{r4, r5, pc}
 800469a:	4299      	cmp	r1, r3
 800469c:	d803      	bhi.n	80046a6 <_free_r+0x46>
 800469e:	460a      	mov	r2, r1
 80046a0:	6851      	ldr	r1, [r2, #4]
 80046a2:	2900      	cmp	r1, #0
 80046a4:	d1f9      	bne.n	800469a <_free_r+0x3a>
 80046a6:	6814      	ldr	r4, [r2, #0]
 80046a8:	1915      	adds	r5, r2, r4
 80046aa:	429d      	cmp	r5, r3
 80046ac:	d10a      	bne.n	80046c4 <_free_r+0x64>
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4423      	add	r3, r4
 80046b2:	18d0      	adds	r0, r2, r3
 80046b4:	4288      	cmp	r0, r1
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	d112      	bne.n	80046e0 <_free_r+0x80>
 80046ba:	6808      	ldr	r0, [r1, #0]
 80046bc:	4403      	add	r3, r0
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	684b      	ldr	r3, [r1, #4]
 80046c2:	e00c      	b.n	80046de <_free_r+0x7e>
 80046c4:	d902      	bls.n	80046cc <_free_r+0x6c>
 80046c6:	230c      	movs	r3, #12
 80046c8:	6003      	str	r3, [r0, #0]
 80046ca:	bd30      	pop	{r4, r5, pc}
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	181c      	adds	r4, r3, r0
 80046d0:	428c      	cmp	r4, r1
 80046d2:	d103      	bne.n	80046dc <_free_r+0x7c>
 80046d4:	680c      	ldr	r4, [r1, #0]
 80046d6:	6849      	ldr	r1, [r1, #4]
 80046d8:	4420      	add	r0, r4
 80046da:	6018      	str	r0, [r3, #0]
 80046dc:	6059      	str	r1, [r3, #4]
 80046de:	6053      	str	r3, [r2, #4]
 80046e0:	bd30      	pop	{r4, r5, pc}
 80046e2:	bf00      	nop
 80046e4:	2000014c 	.word	0x2000014c

080046e8 <_malloc_r>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	1ccd      	adds	r5, r1, #3
 80046ec:	f025 0503 	bic.w	r5, r5, #3
 80046f0:	3508      	adds	r5, #8
 80046f2:	2d0c      	cmp	r5, #12
 80046f4:	bf38      	it	cc
 80046f6:	250c      	movcc	r5, #12
 80046f8:	2d00      	cmp	r5, #0
 80046fa:	4606      	mov	r6, r0
 80046fc:	db3f      	blt.n	800477e <_malloc_r+0x96>
 80046fe:	428d      	cmp	r5, r1
 8004700:	d33d      	bcc.n	800477e <_malloc_r+0x96>
 8004702:	4b21      	ldr	r3, [pc, #132]	; (8004788 <_malloc_r+0xa0>)
 8004704:	681c      	ldr	r4, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	4621      	mov	r1, r4
 800470a:	b1a1      	cbz	r1, 8004736 <_malloc_r+0x4e>
 800470c:	680b      	ldr	r3, [r1, #0]
 800470e:	1b5b      	subs	r3, r3, r5
 8004710:	d40e      	bmi.n	8004730 <_malloc_r+0x48>
 8004712:	2b0b      	cmp	r3, #11
 8004714:	d903      	bls.n	800471e <_malloc_r+0x36>
 8004716:	600b      	str	r3, [r1, #0]
 8004718:	18cc      	adds	r4, r1, r3
 800471a:	50cd      	str	r5, [r1, r3]
 800471c:	e01f      	b.n	800475e <_malloc_r+0x76>
 800471e:	428c      	cmp	r4, r1
 8004720:	d102      	bne.n	8004728 <_malloc_r+0x40>
 8004722:	6862      	ldr	r2, [r4, #4]
 8004724:	6002      	str	r2, [r0, #0]
 8004726:	e01a      	b.n	800475e <_malloc_r+0x76>
 8004728:	684b      	ldr	r3, [r1, #4]
 800472a:	6063      	str	r3, [r4, #4]
 800472c:	460c      	mov	r4, r1
 800472e:	e016      	b.n	800475e <_malloc_r+0x76>
 8004730:	460c      	mov	r4, r1
 8004732:	6849      	ldr	r1, [r1, #4]
 8004734:	e7e9      	b.n	800470a <_malloc_r+0x22>
 8004736:	4c15      	ldr	r4, [pc, #84]	; (800478c <_malloc_r+0xa4>)
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	b91b      	cbnz	r3, 8004744 <_malloc_r+0x5c>
 800473c:	4630      	mov	r0, r6
 800473e:	f000 f84d 	bl	80047dc <_sbrk_r>
 8004742:	6020      	str	r0, [r4, #0]
 8004744:	4629      	mov	r1, r5
 8004746:	4630      	mov	r0, r6
 8004748:	f000 f848 	bl	80047dc <_sbrk_r>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	4601      	mov	r1, r0
 8004750:	d015      	beq.n	800477e <_malloc_r+0x96>
 8004752:	1cc4      	adds	r4, r0, #3
 8004754:	f024 0403 	bic.w	r4, r4, #3
 8004758:	4284      	cmp	r4, r0
 800475a:	d10a      	bne.n	8004772 <_malloc_r+0x8a>
 800475c:	6025      	str	r5, [r4, #0]
 800475e:	f104 000b 	add.w	r0, r4, #11
 8004762:	1d23      	adds	r3, r4, #4
 8004764:	f020 0007 	bic.w	r0, r0, #7
 8004768:	1ac3      	subs	r3, r0, r3
 800476a:	d00b      	beq.n	8004784 <_malloc_r+0x9c>
 800476c:	425a      	negs	r2, r3
 800476e:	50e2      	str	r2, [r4, r3]
 8004770:	bd70      	pop	{r4, r5, r6, pc}
 8004772:	4630      	mov	r0, r6
 8004774:	1a61      	subs	r1, r4, r1
 8004776:	f000 f831 	bl	80047dc <_sbrk_r>
 800477a:	3001      	adds	r0, #1
 800477c:	d1ee      	bne.n	800475c <_malloc_r+0x74>
 800477e:	230c      	movs	r3, #12
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	2000      	movs	r0, #0
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	bf00      	nop
 8004788:	2000014c 	.word	0x2000014c
 800478c:	20000148 	.word	0x20000148

08004790 <_realloc_r>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	4606      	mov	r6, r0
 8004794:	4614      	mov	r4, r2
 8004796:	460d      	mov	r5, r1
 8004798:	b921      	cbnz	r1, 80047a4 <_realloc_r+0x14>
 800479a:	4611      	mov	r1, r2
 800479c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047a0:	f7ff bfa2 	b.w	80046e8 <_malloc_r>
 80047a4:	b91a      	cbnz	r2, 80047ae <_realloc_r+0x1e>
 80047a6:	f7ff ff5b 	bl	8004660 <_free_r>
 80047aa:	4620      	mov	r0, r4
 80047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ae:	f000 f847 	bl	8004840 <_malloc_usable_size_r>
 80047b2:	42a0      	cmp	r0, r4
 80047b4:	d20e      	bcs.n	80047d4 <_realloc_r+0x44>
 80047b6:	4630      	mov	r0, r6
 80047b8:	4621      	mov	r1, r4
 80047ba:	f7ff ff95 	bl	80046e8 <_malloc_r>
 80047be:	4607      	mov	r7, r0
 80047c0:	b150      	cbz	r0, 80047d8 <_realloc_r+0x48>
 80047c2:	4629      	mov	r1, r5
 80047c4:	4622      	mov	r2, r4
 80047c6:	f7ff ff26 	bl	8004616 <memcpy>
 80047ca:	4630      	mov	r0, r6
 80047cc:	4629      	mov	r1, r5
 80047ce:	f7ff ff47 	bl	8004660 <_free_r>
 80047d2:	e001      	b.n	80047d8 <_realloc_r+0x48>
 80047d4:	4628      	mov	r0, r5
 80047d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d8:	4638      	mov	r0, r7
 80047da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047dc <_sbrk_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4c06      	ldr	r4, [pc, #24]	; (80047f8 <_sbrk_r+0x1c>)
 80047e0:	2300      	movs	r3, #0
 80047e2:	4605      	mov	r5, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	f000 f810 	bl	800480c <_sbrk>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_sbrk_r+0x1a>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_sbrk_r+0x1a>
 80047f4:	602b      	str	r3, [r5, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20000230 	.word	0x20000230

080047fc <strlen>:
 80047fc:	4603      	mov	r3, r0
 80047fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004802:	2a00      	cmp	r2, #0
 8004804:	d1fb      	bne.n	80047fe <strlen+0x2>
 8004806:	1a18      	subs	r0, r3, r0
 8004808:	3801      	subs	r0, #1
 800480a:	4770      	bx	lr

0800480c <_sbrk>:
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <_sbrk+0x28>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	b90a      	cbnz	r2, 8004816 <_sbrk+0xa>
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <_sbrk+0x2c>)
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	466a      	mov	r2, sp
 800481a:	4418      	add	r0, r3
 800481c:	4290      	cmp	r0, r2
 800481e:	d905      	bls.n	800482c <_sbrk+0x20>
 8004820:	4b06      	ldr	r3, [pc, #24]	; (800483c <_sbrk+0x30>)
 8004822:	220c      	movs	r2, #12
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f04f 30ff 	mov.w	r0, #4294967295
 800482a:	4770      	bx	lr
 800482c:	4a01      	ldr	r2, [pc, #4]	; (8004834 <_sbrk+0x28>)
 800482e:	6010      	str	r0, [r2, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	4770      	bx	lr
 8004834:	20000150 	.word	0x20000150
 8004838:	20000234 	.word	0x20000234
 800483c:	20000230 	.word	0x20000230

08004840 <_malloc_usable_size_r>:
 8004840:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004844:	2800      	cmp	r0, #0
 8004846:	da02      	bge.n	800484e <_malloc_usable_size_r+0xe>
 8004848:	3904      	subs	r1, #4
 800484a:	580b      	ldr	r3, [r1, r0]
 800484c:	4418      	add	r0, r3
 800484e:	3804      	subs	r0, #4
 8004850:	4770      	bx	lr
 8004852:	0000      	movs	r0, r0
 8004854:	0000      	movs	r0, r0
	...

08004858 <cos>:
 8004858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800485a:	ec51 0b10 	vmov	r0, r1, d0
 800485e:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <cos+0x80>)
 8004860:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004864:	4293      	cmp	r3, r2
 8004866:	dc02      	bgt.n	800486e <cos+0x16>
 8004868:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80048d0 <cos+0x78>
 800486c:	e016      	b.n	800489c <cos+0x44>
 800486e:	4a1b      	ldr	r2, [pc, #108]	; (80048dc <cos+0x84>)
 8004870:	4293      	cmp	r3, r2
 8004872:	dd05      	ble.n	8004880 <cos+0x28>
 8004874:	ee10 2a10 	vmov	r2, s0
 8004878:	460b      	mov	r3, r1
 800487a:	f7fb fca9 	bl	80001d0 <__aeabi_dsub>
 800487e:	e021      	b.n	80048c4 <cos+0x6c>
 8004880:	4668      	mov	r0, sp
 8004882:	f000 f96d 	bl	8004b60 <__ieee754_rem_pio2>
 8004886:	f000 0003 	and.w	r0, r0, #3
 800488a:	2801      	cmp	r0, #1
 800488c:	ed9d 0b00 	vldr	d0, [sp]
 8004890:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004894:	d005      	beq.n	80048a2 <cos+0x4a>
 8004896:	2802      	cmp	r0, #2
 8004898:	d006      	beq.n	80048a8 <cos+0x50>
 800489a:	b970      	cbnz	r0, 80048ba <cos+0x62>
 800489c:	f000 fc10 	bl	80050c0 <__kernel_cos>
 80048a0:	e00e      	b.n	80048c0 <cos+0x68>
 80048a2:	f001 f859 	bl	8005958 <__kernel_sin>
 80048a6:	e001      	b.n	80048ac <cos+0x54>
 80048a8:	f000 fc0a 	bl	80050c0 <__kernel_cos>
 80048ac:	ec53 2b10 	vmov	r2, r3, d0
 80048b0:	ee10 0a10 	vmov	r0, s0
 80048b4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80048b8:	e004      	b.n	80048c4 <cos+0x6c>
 80048ba:	2001      	movs	r0, #1
 80048bc:	f001 f84c 	bl	8005958 <__kernel_sin>
 80048c0:	ec51 0b10 	vmov	r0, r1, d0
 80048c4:	ec41 0b10 	vmov	d0, r0, r1
 80048c8:	b005      	add	sp, #20
 80048ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80048ce:	bf00      	nop
	...
 80048d8:	3fe921fb 	.word	0x3fe921fb
 80048dc:	7fefffff 	.word	0x7fefffff

080048e0 <sin>:
 80048e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048e2:	ec51 0b10 	vmov	r0, r1, d0
 80048e6:	4a20      	ldr	r2, [pc, #128]	; (8004968 <sin+0x88>)
 80048e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80048ec:	4293      	cmp	r3, r2
 80048ee:	dc03      	bgt.n	80048f8 <sin+0x18>
 80048f0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004960 <sin+0x80>
 80048f4:	2000      	movs	r0, #0
 80048f6:	e017      	b.n	8004928 <sin+0x48>
 80048f8:	4a1c      	ldr	r2, [pc, #112]	; (800496c <sin+0x8c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	dd05      	ble.n	800490a <sin+0x2a>
 80048fe:	ee10 2a10 	vmov	r2, s0
 8004902:	460b      	mov	r3, r1
 8004904:	f7fb fc64 	bl	80001d0 <__aeabi_dsub>
 8004908:	e022      	b.n	8004950 <sin+0x70>
 800490a:	4668      	mov	r0, sp
 800490c:	f000 f928 	bl	8004b60 <__ieee754_rem_pio2>
 8004910:	f000 0003 	and.w	r0, r0, #3
 8004914:	2801      	cmp	r0, #1
 8004916:	ed9d 0b00 	vldr	d0, [sp]
 800491a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800491e:	d008      	beq.n	8004932 <sin+0x52>
 8004920:	2802      	cmp	r0, #2
 8004922:	d009      	beq.n	8004938 <sin+0x58>
 8004924:	b960      	cbnz	r0, 8004940 <sin+0x60>
 8004926:	2001      	movs	r0, #1
 8004928:	f001 f816 	bl	8005958 <__kernel_sin>
 800492c:	ec51 0b10 	vmov	r0, r1, d0
 8004930:	e00e      	b.n	8004950 <sin+0x70>
 8004932:	f000 fbc5 	bl	80050c0 <__kernel_cos>
 8004936:	e7f9      	b.n	800492c <sin+0x4c>
 8004938:	2001      	movs	r0, #1
 800493a:	f001 f80d 	bl	8005958 <__kernel_sin>
 800493e:	e001      	b.n	8004944 <sin+0x64>
 8004940:	f000 fbbe 	bl	80050c0 <__kernel_cos>
 8004944:	ec53 2b10 	vmov	r2, r3, d0
 8004948:	ee10 0a10 	vmov	r0, s0
 800494c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004950:	ec41 0b10 	vmov	d0, r0, r1
 8004954:	b005      	add	sp, #20
 8004956:	f85d fb04 	ldr.w	pc, [sp], #4
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w
	...
 8004968:	3fe921fb 	.word	0x3fe921fb
 800496c:	7fefffff 	.word	0x7fefffff

08004970 <atan2>:
 8004970:	f000 b802 	b.w	8004978 <__ieee754_atan2>

08004974 <atan2f>:
 8004974:	f000 baf8 	b.w	8004f68 <__ieee754_atan2f>

08004978 <__ieee754_atan2>:
 8004978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	ec57 6b11 	vmov	r6, r7, d1
 8004980:	f1c6 0900 	rsb	r9, r6, #0
 8004984:	f027 4c00 	bic.w	ip, r7, #2147483648	; 0x80000000
 8004988:	ea49 0906 	orr.w	r9, r9, r6
 800498c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8004b58 <__ieee754_atan2+0x1e0>
 8004990:	ec53 2b10 	vmov	r2, r3, d0
 8004994:	ea4c 79d9 	orr.w	r9, ip, r9, lsr #31
 8004998:	45c1      	cmp	r9, r8
 800499a:	ee11 4a10 	vmov	r4, s2
 800499e:	463d      	mov	r5, r7
 80049a0:	4619      	mov	r1, r3
 80049a2:	d809      	bhi.n	80049b8 <__ieee754_atan2+0x40>
 80049a4:	f1c2 0a00 	rsb	sl, r2, #0
 80049a8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80049ac:	ea4a 0a02 	orr.w	sl, sl, r2
 80049b0:	ea49 7ada 	orr.w	sl, r9, sl, lsr #31
 80049b4:	45c2      	cmp	sl, r8
 80049b6:	d904      	bls.n	80049c2 <__ieee754_atan2+0x4a>
 80049b8:	4630      	mov	r0, r6
 80049ba:	4639      	mov	r1, r7
 80049bc:	f7fb fc0a 	bl	80001d4 <__adddf3>
 80049c0:	e0a2      	b.n	8004b08 <__ieee754_atan2+0x190>
 80049c2:	f107 4840 	add.w	r8, r7, #3221225472	; 0xc0000000
 80049c6:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80049ca:	ea58 0806 	orrs.w	r8, r8, r6
 80049ce:	d103      	bne.n	80049d8 <__ieee754_atan2+0x60>
 80049d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d4:	f001 b884 	b.w	8005ae0 <atan>
 80049d8:	ea4f 78a7 	mov.w	r8, r7, asr #30
 80049dc:	f008 0802 	and.w	r8, r8, #2
 80049e0:	ea59 0a02 	orrs.w	sl, r9, r2
 80049e4:	ea48 78d3 	orr.w	r8, r8, r3, lsr #31
 80049e8:	d106      	bne.n	80049f8 <__ieee754_atan2+0x80>
 80049ea:	f1b8 0f03 	cmp.w	r8, #3
 80049ee:	d803      	bhi.n	80049f8 <__ieee754_atan2+0x80>
 80049f0:	e8df f008 	tbb	[pc, r8]
 80049f4:	2c287b7b 	.word	0x2c287b7b
 80049f8:	ea5c 0a04 	orrs.w	sl, ip, r4
 80049fc:	d02c      	beq.n	8004a58 <__ieee754_atan2+0xe0>
 80049fe:	f8df a158 	ldr.w	sl, [pc, #344]	; 8004b58 <__ieee754_atan2+0x1e0>
 8004a02:	45d4      	cmp	ip, sl
 8004a04:	d126      	bne.n	8004a54 <__ieee754_atan2+0xdc>
 8004a06:	45e1      	cmp	r9, ip
 8004a08:	d112      	bne.n	8004a30 <__ieee754_atan2+0xb8>
 8004a0a:	f1b8 0f03 	cmp.w	r8, #3
 8004a0e:	d823      	bhi.n	8004a58 <__ieee754_atan2+0xe0>
 8004a10:	e8df f008 	tbb	[pc, r8]
 8004a14:	0a066f02 	.word	0x0a066f02
 8004a18:	a13d      	add	r1, pc, #244	; (adr r1, 8004b10 <__ieee754_atan2+0x198>)
 8004a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a1e:	e073      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004a20:	a13d      	add	r1, pc, #244	; (adr r1, 8004b18 <__ieee754_atan2+0x1a0>)
 8004a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a26:	e06f      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004a28:	a13d      	add	r1, pc, #244	; (adr r1, 8004b20 <__ieee754_atan2+0x1a8>)
 8004a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a2e:	e06b      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004a30:	f1b8 0f03 	cmp.w	r8, #3
 8004a34:	d80e      	bhi.n	8004a54 <__ieee754_atan2+0xdc>
 8004a36:	e8df f008 	tbb	[pc, r8]
 8004a3a:	6002      	.short	0x6002
 8004a3c:	0905      	.short	0x0905
 8004a3e:	2000      	movs	r0, #0
 8004a40:	2100      	movs	r1, #0
 8004a42:	e061      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004a44:	a138      	add	r1, pc, #224	; (adr r1, 8004b28 <__ieee754_atan2+0x1b0>)
 8004a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a4a:	e05d      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004a4c:	a138      	add	r1, pc, #224	; (adr r1, 8004b30 <__ieee754_atan2+0x1b8>)
 8004a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a52:	e059      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004a54:	45d1      	cmp	r9, sl
 8004a56:	d105      	bne.n	8004a64 <__ieee754_atan2+0xec>
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	db52      	blt.n	8004b02 <__ieee754_atan2+0x18a>
 8004a5c:	a136      	add	r1, pc, #216	; (adr r1, 8004b38 <__ieee754_atan2+0x1c0>)
 8004a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a62:	e051      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004a64:	ebcc 0c09 	rsb	ip, ip, r9
 8004a68:	ea4f 5c2c 	mov.w	ip, ip, asr #20
 8004a6c:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
 8004a70:	dc13      	bgt.n	8004a9a <__ieee754_atan2+0x122>
 8004a72:	2d00      	cmp	r5, #0
 8004a74:	da02      	bge.n	8004a7c <__ieee754_atan2+0x104>
 8004a76:	f11c 0f3c 	cmn.w	ip, #60	; 0x3c
 8004a7a:	db12      	blt.n	8004aa2 <__ieee754_atan2+0x12a>
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4632      	mov	r2, r6
 8004a82:	463b      	mov	r3, r7
 8004a84:	f7fb fe82 	bl	800078c <__aeabi_ddiv>
 8004a88:	ec41 0b10 	vmov	d0, r0, r1
 8004a8c:	f001 f9e8 	bl	8005e60 <fabs>
 8004a90:	f001 f826 	bl	8005ae0 <atan>
 8004a94:	ec51 0b10 	vmov	r0, r1, d0
 8004a98:	e005      	b.n	8004aa6 <__ieee754_atan2+0x12e>
 8004a9a:	a127      	add	r1, pc, #156	; (adr r1, 8004b38 <__ieee754_atan2+0x1c0>)
 8004a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aa0:	e001      	b.n	8004aa6 <__ieee754_atan2+0x12e>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	f1b8 0f01 	cmp.w	r8, #1
 8004aaa:	d00e      	beq.n	8004aca <__ieee754_atan2+0x152>
 8004aac:	f1b8 0f02 	cmp.w	r8, #2
 8004ab0:	d00e      	beq.n	8004ad0 <__ieee754_atan2+0x158>
 8004ab2:	f1b8 0f00 	cmp.w	r8, #0
 8004ab6:	d027      	beq.n	8004b08 <__ieee754_atan2+0x190>
 8004ab8:	a321      	add	r3, pc, #132	; (adr r3, 8004b40 <__ieee754_atan2+0x1c8>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f7fb fb87 	bl	80001d0 <__aeabi_dsub>
 8004ac2:	a319      	add	r3, pc, #100	; (adr r3, 8004b28 <__ieee754_atan2+0x1b0>)
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	e00c      	b.n	8004ae4 <__ieee754_atan2+0x16c>
 8004aca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004ace:	e01b      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004ad0:	a31b      	add	r3, pc, #108	; (adr r3, 8004b40 <__ieee754_atan2+0x1c8>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fb7b 	bl	80001d0 <__aeabi_dsub>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	a112      	add	r1, pc, #72	; (adr r1, 8004b28 <__ieee754_atan2+0x1b0>)
 8004ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ae4:	f7fb fb74 	bl	80001d0 <__aeabi_dsub>
 8004ae8:	e00e      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004aea:	ee10 0a10 	vmov	r0, s0
 8004aee:	4619      	mov	r1, r3
 8004af0:	e00a      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004af2:	a115      	add	r1, pc, #84	; (adr r1, 8004b48 <__ieee754_atan2+0x1d0>)
 8004af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004af8:	e006      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004afa:	2000      	movs	r0, #0
 8004afc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004b00:	e002      	b.n	8004b08 <__ieee754_atan2+0x190>
 8004b02:	a113      	add	r1, pc, #76	; (adr r1, 8004b50 <__ieee754_atan2+0x1d8>)
 8004b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b08:	ec41 0b10 	vmov	d0, r0, r1
 8004b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b10:	54442d18 	.word	0x54442d18
 8004b14:	3fe921fb 	.word	0x3fe921fb
 8004b18:	7f3321d2 	.word	0x7f3321d2
 8004b1c:	4002d97c 	.word	0x4002d97c
 8004b20:	7f3321d2 	.word	0x7f3321d2
 8004b24:	c002d97c 	.word	0xc002d97c
 8004b28:	54442d18 	.word	0x54442d18
 8004b2c:	400921fb 	.word	0x400921fb
 8004b30:	54442d18 	.word	0x54442d18
 8004b34:	c00921fb 	.word	0xc00921fb
 8004b38:	54442d18 	.word	0x54442d18
 8004b3c:	3ff921fb 	.word	0x3ff921fb
 8004b40:	33145c07 	.word	0x33145c07
 8004b44:	3ca1a626 	.word	0x3ca1a626
 8004b48:	54442d18 	.word	0x54442d18
 8004b4c:	bfe921fb 	.word	0xbfe921fb
 8004b50:	54442d18 	.word	0x54442d18
 8004b54:	bff921fb 	.word	0xbff921fb
 8004b58:	7ff00000 	.word	0x7ff00000
 8004b5c:	f3af 8000 	nopal.w

08004b60 <__ieee754_rem_pio2>:
 8004b60:	e92d 4ff0 	stmdbal	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b64:	b08f      	sub	sp, #60	; 0x3c
 8004b66:	ed8d 0b06 	vstr	d0, [sp, #24]
 8004b6a:	9907      	ldr	r1, [sp, #28]
 8004b6c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8004b70:	49ad      	ldr	r1, [pc, #692]	; (8004e28 <__ieee754_rem_pio2+0x2c8>)
 8004b72:	4588      	cmp	r8, r1
 8004b74:	ec53 2b10 	vmov	r2, r3, d0
 8004b78:	4682      	mov	sl, r0
 8004b7a:	dc06      	bgt.n	8004b8a <__ieee754_rem_pio2+0x2a>
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2300      	movs	r3, #0
 8004b80:	ed8a 0b00 	vstr	d0, [sl]
 8004b84:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004b88:	e188      	b.n	8004e9c <__ieee754_rem_pio2+0x33c>
 8004b8a:	49a8      	ldr	r1, [pc, #672]	; (8004e2c <__ieee754_rem_pio2+0x2cc>)
 8004b8c:	4588      	cmp	r8, r1
 8004b8e:	dc72      	bgt.n	8004c76 <__ieee754_rem_pio2+0x116>
 8004b90:	9907      	ldr	r1, [sp, #28]
 8004b92:	4ea7      	ldr	r6, [pc, #668]	; (8004e30 <__ieee754_rem_pio2+0x2d0>)
 8004b94:	2900      	cmp	r1, #0
 8004b96:	ee10 0a10 	vmov	r0, s0
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	a394      	add	r3, pc, #592	; (adr r3, 8004df0 <__ieee754_rem_pio2+0x290>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	dd33      	ble.n	8004c0c <__ieee754_rem_pio2+0xac>
 8004ba4:	f7fb fb14 	bl	80001d0 <__aeabi_dsub>
 8004ba8:	45b0      	cmp	r8, r6
 8004baa:	4604      	mov	r4, r0
 8004bac:	460d      	mov	r5, r1
 8004bae:	d010      	beq.n	8004bd2 <__ieee754_rem_pio2+0x72>
 8004bb0:	a391      	add	r3, pc, #580	; (adr r3, 8004df8 <__ieee754_rem_pio2+0x298>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fb0b 	bl	80001d0 <__aeabi_dsub>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	e9ca 2300 	strd	r2, r3, [sl]
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	f7fb fb03 	bl	80001d0 <__aeabi_dsub>
 8004bca:	a38b      	add	r3, pc, #556	; (adr r3, 8004df8 <__ieee754_rem_pio2+0x298>)
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	e016      	b.n	8004c00 <__ieee754_rem_pio2+0xa0>
 8004bd2:	a38b      	add	r3, pc, #556	; (adr r3, 8004e00 <__ieee754_rem_pio2+0x2a0>)
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f7fb fafa 	bl	80001d0 <__aeabi_dsub>
 8004bdc:	a38a      	add	r3, pc, #552	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2a8>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	4604      	mov	r4, r0
 8004be4:	460d      	mov	r5, r1
 8004be6:	f7fb faf3 	bl	80001d0 <__aeabi_dsub>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	e9ca 2300 	strd	r2, r3, [sl]
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f7fb faeb 	bl	80001d0 <__aeabi_dsub>
 8004bfa:	a383      	add	r3, pc, #524	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2a8>)
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f7fb fae6 	bl	80001d0 <__aeabi_dsub>
 8004c04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004c08:	2001      	movs	r0, #1
 8004c0a:	e1a1      	b.n	8004f50 <__ieee754_rem_pio2+0x3f0>
 8004c0c:	f7fb fae2 	bl	80001d4 <__adddf3>
 8004c10:	45b0      	cmp	r8, r6
 8004c12:	4604      	mov	r4, r0
 8004c14:	460d      	mov	r5, r1
 8004c16:	d010      	beq.n	8004c3a <__ieee754_rem_pio2+0xda>
 8004c18:	a377      	add	r3, pc, #476	; (adr r3, 8004df8 <__ieee754_rem_pio2+0x298>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fad9 	bl	80001d4 <__adddf3>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	e9ca 2300 	strd	r2, r3, [sl]
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	f7fb facf 	bl	80001d0 <__aeabi_dsub>
 8004c32:	a371      	add	r3, pc, #452	; (adr r3, 8004df8 <__ieee754_rem_pio2+0x298>)
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	e016      	b.n	8004c68 <__ieee754_rem_pio2+0x108>
 8004c3a:	a371      	add	r3, pc, #452	; (adr r3, 8004e00 <__ieee754_rem_pio2+0x2a0>)
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f7fb fac8 	bl	80001d4 <__adddf3>
 8004c44:	a370      	add	r3, pc, #448	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2a8>)
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	f7fb fac1 	bl	80001d4 <__adddf3>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	e9ca 2300 	strd	r2, r3, [sl]
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	f7fb fab7 	bl	80001d0 <__aeabi_dsub>
 8004c62:	a369      	add	r3, pc, #420	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2a8>)
 8004c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c68:	f7fb fab4 	bl	80001d4 <__adddf3>
 8004c6c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	e16c      	b.n	8004f50 <__ieee754_rem_pio2+0x3f0>
 8004c76:	496f      	ldr	r1, [pc, #444]	; (8004e34 <__ieee754_rem_pio2+0x2d4>)
 8004c78:	4588      	cmp	r8, r1
 8004c7a:	f300 8103 	bgt.w	8004e84 <__ieee754_rem_pio2+0x324>
 8004c7e:	f001 f8ef 	bl	8005e60 <fabs>
 8004c82:	ec55 4b10 	vmov	r4, r5, d0
 8004c86:	ee10 0a10 	vmov	r0, s0
 8004c8a:	a361      	add	r3, pc, #388	; (adr r3, 8004e10 <__ieee754_rem_pio2+0x2b0>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	4629      	mov	r1, r5
 8004c92:	f7fb fc51 	bl	8000538 <__aeabi_dmul>
 8004c96:	2200      	movs	r2, #0
 8004c98:	4b67      	ldr	r3, [pc, #412]	; (8004e38 <__ieee754_rem_pio2+0x2d8>)
 8004c9a:	f7fb fa9b 	bl	80001d4 <__adddf3>
 8004c9e:	f7fb fee5 	bl	8000a6c <__aeabi_d2iz>
 8004ca2:	4683      	mov	fp, r0
 8004ca4:	f7fb fbe2 	bl	800046c <__aeabi_i2d>
 8004ca8:	a351      	add	r3, pc, #324	; (adr r3, 8004df0 <__ieee754_rem_pio2+0x290>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cb2:	f7fb fc41 	bl	8000538 <__aeabi_dmul>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4620      	mov	r0, r4
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	f7fb fa87 	bl	80001d0 <__aeabi_dsub>
 8004cc2:	a34d      	add	r3, pc, #308	; (adr r3, 8004df8 <__ieee754_rem_pio2+0x298>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	4604      	mov	r4, r0
 8004cca:	460d      	mov	r5, r1
 8004ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd0:	f7fb fc32 	bl	8000538 <__aeabi_dmul>
 8004cd4:	f1bb 0f1f 	cmp.w	fp, #31
 8004cd8:	4606      	mov	r6, r0
 8004cda:	460f      	mov	r7, r1
 8004cdc:	4620      	mov	r0, r4
 8004cde:	4629      	mov	r1, r5
 8004ce0:	dc06      	bgt.n	8004cf0 <__ieee754_rem_pio2+0x190>
 8004ce2:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004ce6:	4b55      	ldr	r3, [pc, #340]	; (8004e3c <__ieee754_rem_pio2+0x2dc>)
 8004ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cec:	4598      	cmp	r8, r3
 8004cee:	d176      	bne.n	8004dde <__ieee754_rem_pio2+0x27e>
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	f7fb fa6c 	bl	80001d0 <__aeabi_dsub>
 8004cf8:	ea4f 5c28 	mov.w	ip, r8, asr #20
 8004cfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004d00:	ebc3 030c 	rsb	r3, r3, ip
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	e9ca 0100 	strd	r0, r1, [sl]
 8004d0a:	f340 809b 	ble.w	8004e44 <__ieee754_rem_pio2+0x2e4>
 8004d0e:	a33c      	add	r3, pc, #240	; (adr r3, 8004e00 <__ieee754_rem_pio2+0x2a0>)
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d18:	f8cd c00c 	str.w	ip, [sp, #12]
 8004d1c:	f7fb fc0c 	bl	8000538 <__aeabi_dmul>
 8004d20:	4606      	mov	r6, r0
 8004d22:	460f      	mov	r7, r1
 8004d24:	4632      	mov	r2, r6
 8004d26:	463b      	mov	r3, r7
 8004d28:	4620      	mov	r0, r4
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	f7fb fa50 	bl	80001d0 <__aeabi_dsub>
 8004d30:	4680      	mov	r8, r0
 8004d32:	4689      	mov	r9, r1
 8004d34:	4620      	mov	r0, r4
 8004d36:	4629      	mov	r1, r5
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	f7fb fa48 	bl	80001d0 <__aeabi_dsub>
 8004d40:	4632      	mov	r2, r6
 8004d42:	463b      	mov	r3, r7
 8004d44:	f7fb fa44 	bl	80001d0 <__aeabi_dsub>
 8004d48:	a32f      	add	r3, pc, #188	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2a8>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d56:	f7fb fbef 	bl	8000538 <__aeabi_dmul>
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	462b      	mov	r3, r5
 8004d5e:	f7fb fa37 	bl	80001d0 <__aeabi_dsub>
 8004d62:	4606      	mov	r6, r0
 8004d64:	460f      	mov	r7, r1
 8004d66:	463b      	mov	r3, r7
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	f7fb fa2f 	bl	80001d0 <__aeabi_dsub>
 8004d72:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004d76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004d7a:	ebc3 030c 	rsb	r3, r3, ip
 8004d7e:	2b31      	cmp	r3, #49	; 0x31
 8004d80:	e9ca 0100 	strd	r0, r1, [sl]
 8004d84:	dd5c      	ble.n	8004e40 <__ieee754_rem_pio2+0x2e0>
 8004d86:	a324      	add	r3, pc, #144	; (adr r3, 8004e18 <__ieee754_rem_pio2+0x2b8>)
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d90:	f7fb fbd2 	bl	8000538 <__aeabi_dmul>
 8004d94:	4606      	mov	r6, r0
 8004d96:	460f      	mov	r7, r1
 8004d98:	4632      	mov	r2, r6
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	4649      	mov	r1, r9
 8004da0:	f7fb fa16 	bl	80001d0 <__aeabi_dsub>
 8004da4:	4604      	mov	r4, r0
 8004da6:	460d      	mov	r5, r1
 8004da8:	4622      	mov	r2, r4
 8004daa:	462b      	mov	r3, r5
 8004dac:	4640      	mov	r0, r8
 8004dae:	4649      	mov	r1, r9
 8004db0:	f7fb fa0e 	bl	80001d0 <__aeabi_dsub>
 8004db4:	4632      	mov	r2, r6
 8004db6:	463b      	mov	r3, r7
 8004db8:	f7fb fa0a 	bl	80001d0 <__aeabi_dsub>
 8004dbc:	a318      	add	r3, pc, #96	; (adr r3, 8004e20 <__ieee754_rem_pio2+0x2c0>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	4606      	mov	r6, r0
 8004dc4:	460f      	mov	r7, r1
 8004dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dca:	f7fb fbb5 	bl	8000538 <__aeabi_dmul>
 8004dce:	4632      	mov	r2, r6
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	f7fb f9fd 	bl	80001d0 <__aeabi_dsub>
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	460f      	mov	r7, r1
 8004dda:	4620      	mov	r0, r4
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4632      	mov	r2, r6
 8004de0:	463b      	mov	r3, r7
 8004de2:	f7fb f9f5 	bl	80001d0 <__aeabi_dsub>
 8004de6:	e9ca 0100 	strd	r0, r1, [sl]
 8004dea:	e02b      	b.n	8004e44 <__ieee754_rem_pio2+0x2e4>
 8004dec:	f3af 8000 	nop.w
 8004df0:	54400000 	.word	0x54400000
 8004df4:	3ff921fb 	.word	0x3ff921fb
 8004df8:	1a626331 	.word	0x1a626331
 8004dfc:	3dd0b461 	.word	0x3dd0b461
 8004e00:	1a600000 	.word	0x1a600000
 8004e04:	3dd0b461 	.word	0x3dd0b461
 8004e08:	2e037073 	.word	0x2e037073
 8004e0c:	3ba3198a 	.word	0x3ba3198a
 8004e10:	6dc9c883 	.word	0x6dc9c883
 8004e14:	3fe45f30 	.word	0x3fe45f30
 8004e18:	2e000000 	.word	0x2e000000
 8004e1c:	3ba3198a 	.word	0x3ba3198a
 8004e20:	252049c1 	.word	0x252049c1
 8004e24:	397b839a 	.word	0x397b839a
 8004e28:	3fe921fb 	.word	0x3fe921fb
 8004e2c:	4002d97b 	.word	0x4002d97b
 8004e30:	3ff921fb 	.word	0x3ff921fb
 8004e34:	413921fb 	.word	0x413921fb
 8004e38:	3fe00000 	.word	0x3fe00000
 8004e3c:	08006440 	.word	0x08006440
 8004e40:	4644      	mov	r4, r8
 8004e42:	464d      	mov	r5, r9
 8004e44:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e48:	4620      	mov	r0, r4
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	4629      	mov	r1, r5
 8004e50:	f7fb f9be 	bl	80001d0 <__aeabi_dsub>
 8004e54:	4632      	mov	r2, r6
 8004e56:	463b      	mov	r3, r7
 8004e58:	f7fb f9ba 	bl	80001d0 <__aeabi_dsub>
 8004e5c:	9a07      	ldr	r2, [sp, #28]
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e64:	da73      	bge.n	8004f4e <__ieee754_rem_pio2+0x3ee>
 8004e66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e6a:	f8ca 3004 	str.w	r3, [sl, #4]
 8004e6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e72:	f8ca 0008 	str.w	r0, [sl, #8]
 8004e76:	f8ca 8000 	str.w	r8, [sl]
 8004e7a:	f8ca 300c 	str.w	r3, [sl, #12]
 8004e7e:	f1cb 0000 	rsb	r0, fp, #0
 8004e82:	e065      	b.n	8004f50 <__ieee754_rem_pio2+0x3f0>
 8004e84:	4934      	ldr	r1, [pc, #208]	; (8004f58 <__ieee754_rem_pio2+0x3f8>)
 8004e86:	4588      	cmp	r8, r1
 8004e88:	dd0a      	ble.n	8004ea0 <__ieee754_rem_pio2+0x340>
 8004e8a:	ee10 0a10 	vmov	r0, s0
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f7fb f99e 	bl	80001d0 <__aeabi_dsub>
 8004e94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e98:	e9ca 0100 	strd	r0, r1, [sl]
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e057      	b.n	8004f50 <__ieee754_rem_pio2+0x3f0>
 8004ea0:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004ea4:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8004ea8:	eba8 5506 	sub.w	r5, r8, r6, lsl #20
 8004eac:	4610      	mov	r0, r2
 8004eae:	4629      	mov	r1, r5
 8004eb0:	ee10 4a10 	vmov	r4, s0
 8004eb4:	f7fb fdda 	bl	8000a6c <__aeabi_d2iz>
 8004eb8:	f7fb fad8 	bl	800046c <__aeabi_i2d>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ec8:	f7fb f982 	bl	80001d0 <__aeabi_dsub>
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <__ieee754_rem_pio2+0x3fc>)
 8004ed0:	f7fb fb32 	bl	8000538 <__aeabi_dmul>
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	460d      	mov	r5, r1
 8004ed8:	f7fb fdc8 	bl	8000a6c <__aeabi_d2iz>
 8004edc:	f7fb fac6 	bl	800046c <__aeabi_i2d>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004eec:	f7fb f970 	bl	80001d0 <__aeabi_dsub>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <__ieee754_rem_pio2+0x3fc>)
 8004ef4:	f7fb fb20 	bl	8000538 <__aeabi_dmul>
 8004ef8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004efc:	2403      	movs	r4, #3
 8004efe:	a908      	add	r1, sp, #32
 8004f00:	1e65      	subs	r5, r4, #1
 8004f02:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8004f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f7fb fd7b 	bl	8000a08 <__aeabi_dcmpeq>
 8004f12:	b108      	cbz	r0, 8004f18 <__ieee754_rem_pio2+0x3b8>
 8004f14:	462c      	mov	r4, r5
 8004f16:	e7f2      	b.n	8004efe <__ieee754_rem_pio2+0x39e>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <__ieee754_rem_pio2+0x400>)
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	4632      	mov	r2, r6
 8004f22:	a808      	add	r0, sp, #32
 8004f24:	4651      	mov	r1, sl
 8004f26:	4623      	mov	r3, r4
 8004f28:	f000 f9be 	bl	80052a8 <__kernel_rem_pio2>
 8004f2c:	9a07      	ldr	r2, [sp, #28]
 8004f2e:	2a00      	cmp	r2, #0
 8004f30:	da0e      	bge.n	8004f50 <__ieee754_rem_pio2+0x3f0>
 8004f32:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004f36:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f3a:	f8ca 3004 	str.w	r3, [sl, #4]
 8004f3e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004f42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	f8ca 300c 	str.w	r3, [sl, #12]
 8004f4a:	4240      	negs	r0, r0
 8004f4c:	e000      	b.n	8004f50 <__ieee754_rem_pio2+0x3f0>
 8004f4e:	4658      	mov	r0, fp
 8004f50:	b00f      	add	sp, #60	; 0x3c
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	bf00      	nop
 8004f58:	7fefffff 	.word	0x7fefffff
 8004f5c:	41700000 	.word	0x41700000
 8004f60:	080064c0 	.word	0x080064c0
 8004f64:	f3af 8000 	nop.w

08004f68 <__ieee754_atan2f>:
 8004f68:	ee10 2a90 	vmov	r2, s1
 8004f6c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004f70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004f74:	b510      	push	{r4, lr}
 8004f76:	eef0 7a40 	vmov.f32	s15, s0
 8004f7a:	dc06      	bgt.n	8004f8a <__ieee754_atan2f+0x22>
 8004f7c:	ee10 0a10 	vmov	r0, s0
 8004f80:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004f84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f88:	dd02      	ble.n	8004f90 <__ieee754_atan2f+0x28>
 8004f8a:	ee30 0aa7 	vadd.f32	s0, s1, s15
 8004f8e:	bd10      	pop	{r4, pc}
 8004f90:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8004f94:	d103      	bne.n	8004f9e <__ieee754_atan2f+0x36>
 8004f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f9a:	f001 b86d 	b.w	8006078 <atanf>
 8004f9e:	1794      	asrs	r4, r2, #30
 8004fa0:	f004 0402 	and.w	r4, r4, #2
 8004fa4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004fa8:	b943      	cbnz	r3, 8004fbc <__ieee754_atan2f+0x54>
 8004faa:	2c02      	cmp	r4, #2
 8004fac:	d02a      	beq.n	8005004 <__ieee754_atan2f+0x9c>
 8004fae:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8005090 <__ieee754_atan2f+0x128>
 8004fb2:	2c03      	cmp	r4, #3
 8004fb4:	bf18      	it	ne
 8004fb6:	eeb0 0a67 	vmovne.f32	s0, s15
 8004fba:	bd10      	pop	{r4, pc}
 8004fbc:	b359      	cbz	r1, 8005016 <__ieee754_atan2f+0xae>
 8004fbe:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004fc2:	d125      	bne.n	8005010 <__ieee754_atan2f+0xa8>
 8004fc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004fc8:	d10f      	bne.n	8004fea <__ieee754_atan2f+0x82>
 8004fca:	2c02      	cmp	r4, #2
 8004fcc:	d007      	beq.n	8004fde <__ieee754_atan2f+0x76>
 8004fce:	2c03      	cmp	r4, #3
 8004fd0:	d008      	beq.n	8004fe4 <__ieee754_atan2f+0x7c>
 8004fd2:	2c01      	cmp	r4, #1
 8004fd4:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8005094 <__ieee754_atan2f+0x12c>
 8004fd8:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8005098 <__ieee754_atan2f+0x130>
 8004fdc:	e00e      	b.n	8004ffc <__ieee754_atan2f+0x94>
 8004fde:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800509c <__ieee754_atan2f+0x134>
 8004fe2:	bd10      	pop	{r4, pc}
 8004fe4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80050a0 <__ieee754_atan2f+0x138>
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	2c02      	cmp	r4, #2
 8004fec:	d00a      	beq.n	8005004 <__ieee754_atan2f+0x9c>
 8004fee:	2c03      	cmp	r4, #3
 8004ff0:	d00b      	beq.n	800500a <__ieee754_atan2f+0xa2>
 8004ff2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80050a4 <__ieee754_atan2f+0x13c>
 8004ff6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80050a8 <__ieee754_atan2f+0x140>
 8004ffa:	2c01      	cmp	r4, #1
 8004ffc:	bf18      	it	ne
 8004ffe:	eeb0 0a67 	vmovne.f32	s0, s15
 8005002:	bd10      	pop	{r4, pc}
 8005004:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80050ac <__ieee754_atan2f+0x144>
 8005008:	bd10      	pop	{r4, pc}
 800500a:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8005090 <__ieee754_atan2f+0x128>
 800500e:	bd10      	pop	{r4, pc}
 8005010:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005014:	d108      	bne.n	8005028 <__ieee754_atan2f+0xc0>
 8005016:	eddf 7a26 	vldr	s15, [pc, #152]	; 80050b0 <__ieee754_atan2f+0x148>
 800501a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80050b4 <__ieee754_atan2f+0x14c>
 800501e:	2800      	cmp	r0, #0
 8005020:	bfa8      	it	ge
 8005022:	eeb0 0a67 	vmovge.f32	s0, s15
 8005026:	bd10      	pop	{r4, pc}
 8005028:	1a5b      	subs	r3, r3, r1
 800502a:	15db      	asrs	r3, r3, #23
 800502c:	2b3c      	cmp	r3, #60	; 0x3c
 800502e:	dc0a      	bgt.n	8005046 <__ieee754_atan2f+0xde>
 8005030:	2a00      	cmp	r2, #0
 8005032:	da01      	bge.n	8005038 <__ieee754_atan2f+0xd0>
 8005034:	333c      	adds	r3, #60	; 0x3c
 8005036:	db09      	blt.n	800504c <__ieee754_atan2f+0xe4>
 8005038:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800503c:	f001 f8f4 	bl	8006228 <fabsf>
 8005040:	f001 f81a 	bl	8006078 <atanf>
 8005044:	e004      	b.n	8005050 <__ieee754_atan2f+0xe8>
 8005046:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80050b0 <__ieee754_atan2f+0x148>
 800504a:	e001      	b.n	8005050 <__ieee754_atan2f+0xe8>
 800504c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80050a4 <__ieee754_atan2f+0x13c>
 8005050:	2c01      	cmp	r4, #1
 8005052:	d003      	beq.n	800505c <__ieee754_atan2f+0xf4>
 8005054:	2c02      	cmp	r4, #2
 8005056:	d008      	beq.n	800506a <__ieee754_atan2f+0x102>
 8005058:	b984      	cbnz	r4, 800507c <__ieee754_atan2f+0x114>
 800505a:	bd10      	pop	{r4, pc}
 800505c:	ee10 3a10 	vmov	r3, s0
 8005060:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005064:	ee00 3a10 	vmov	s0, r3
 8005068:	bd10      	pop	{r4, pc}
 800506a:	eddf 7a13 	vldr	s15, [pc, #76]	; 80050b8 <__ieee754_atan2f+0x150>
 800506e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005072:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80050ac <__ieee754_atan2f+0x144>
 8005076:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800507a:	bd10      	pop	{r4, pc}
 800507c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80050b8 <__ieee754_atan2f+0x150>
 8005080:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005084:	eddf 7a09 	vldr	s15, [pc, #36]	; 80050ac <__ieee754_atan2f+0x144>
 8005088:	ee30 0a67 	vsub.f32	s0, s0, s15
 800508c:	bd10      	pop	{r4, pc}
 800508e:	bf00      	nop
 8005090:	c0490fdb 	.word	0xc0490fdb
 8005094:	3f490fdb 	.word	0x3f490fdb
 8005098:	bf490fdb 	.word	0xbf490fdb
 800509c:	4016cbe4 	.word	0x4016cbe4
 80050a0:	c016cbe4 	.word	0xc016cbe4
 80050a4:	00000000 	.word	0x00000000
 80050a8:	80000000 	.word	0x80000000
 80050ac:	40490fdb 	.word	0x40490fdb
 80050b0:	3fc90fdb 	.word	0x3fc90fdb
 80050b4:	bfc90fdb 	.word	0xbfc90fdb
 80050b8:	33bbbd2e 	.word	0x33bbbd2e
 80050bc:	00000000 	.word	0x00000000

080050c0 <__kernel_cos>:
 80050c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c4:	ec57 6b10 	vmov	r6, r7, d0
 80050c8:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 80050cc:	b085      	sub	sp, #20
 80050ce:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 80050d2:	ed8d 1b00 	vstr	d1, [sp]
 80050d6:	da07      	bge.n	80050e8 <__kernel_cos+0x28>
 80050d8:	ee10 0a10 	vmov	r0, s0
 80050dc:	4639      	mov	r1, r7
 80050de:	f7fb fcc5 	bl	8000a6c <__aeabi_d2iz>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f000 80b2 	beq.w	800524c <__kernel_cos+0x18c>
 80050e8:	4632      	mov	r2, r6
 80050ea:	463b      	mov	r3, r7
 80050ec:	4630      	mov	r0, r6
 80050ee:	4639      	mov	r1, r7
 80050f0:	f7fb fa22 	bl	8000538 <__aeabi_dmul>
 80050f4:	a35e      	add	r3, pc, #376	; (adr r3, 8005270 <__kernel_cos+0x1b0>)
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	4604      	mov	r4, r0
 80050fc:	460d      	mov	r5, r1
 80050fe:	f7fb fa1b 	bl	8000538 <__aeabi_dmul>
 8005102:	a35d      	add	r3, pc, #372	; (adr r3, 8005278 <__kernel_cos+0x1b8>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f7fb f864 	bl	80001d4 <__adddf3>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4620      	mov	r0, r4
 8005112:	4629      	mov	r1, r5
 8005114:	f7fb fa10 	bl	8000538 <__aeabi_dmul>
 8005118:	a359      	add	r3, pc, #356	; (adr r3, 8005280 <__kernel_cos+0x1c0>)
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f7fb f857 	bl	80001d0 <__aeabi_dsub>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4620      	mov	r0, r4
 8005128:	4629      	mov	r1, r5
 800512a:	f7fb fa05 	bl	8000538 <__aeabi_dmul>
 800512e:	a356      	add	r3, pc, #344	; (adr r3, 8005288 <__kernel_cos+0x1c8>)
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f7fb f84e 	bl	80001d4 <__adddf3>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7fb f9fa 	bl	8000538 <__aeabi_dmul>
 8005144:	a352      	add	r3, pc, #328	; (adr r3, 8005290 <__kernel_cos+0x1d0>)
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	f7fb f841 	bl	80001d0 <__aeabi_dsub>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4620      	mov	r0, r4
 8005154:	4629      	mov	r1, r5
 8005156:	f7fb f9ef 	bl	8000538 <__aeabi_dmul>
 800515a:	a34f      	add	r3, pc, #316	; (adr r3, 8005298 <__kernel_cos+0x1d8>)
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f7fb f838 	bl	80001d4 <__adddf3>
 8005164:	460b      	mov	r3, r1
 8005166:	4602      	mov	r2, r0
 8005168:	4629      	mov	r1, r5
 800516a:	4620      	mov	r0, r4
 800516c:	f7fb f9e4 	bl	8000538 <__aeabi_dmul>
 8005170:	4b3b      	ldr	r3, [pc, #236]	; (8005260 <__kernel_cos+0x1a0>)
 8005172:	4599      	cmp	r9, r3
 8005174:	4682      	mov	sl, r0
 8005176:	468b      	mov	fp, r1
 8005178:	dc26      	bgt.n	80051c8 <__kernel_cos+0x108>
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	2200      	movs	r2, #0
 8005180:	4b38      	ldr	r3, [pc, #224]	; (8005264 <__kernel_cos+0x1a4>)
 8005182:	f7fb f9d9 	bl	8000538 <__aeabi_dmul>
 8005186:	4652      	mov	r2, sl
 8005188:	4680      	mov	r8, r0
 800518a:	4689      	mov	r9, r1
 800518c:	4620      	mov	r0, r4
 800518e:	4629      	mov	r1, r5
 8005190:	465b      	mov	r3, fp
 8005192:	f7fb f9d1 	bl	8000538 <__aeabi_dmul>
 8005196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800519a:	4604      	mov	r4, r0
 800519c:	460d      	mov	r5, r1
 800519e:	4630      	mov	r0, r6
 80051a0:	4639      	mov	r1, r7
 80051a2:	f7fb f9c9 	bl	8000538 <__aeabi_dmul>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4620      	mov	r0, r4
 80051ac:	4629      	mov	r1, r5
 80051ae:	f7fb f80f 	bl	80001d0 <__aeabi_dsub>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4640      	mov	r0, r8
 80051b8:	4649      	mov	r1, r9
 80051ba:	f7fb f809 	bl	80001d0 <__aeabi_dsub>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	2000      	movs	r0, #0
 80051c4:	4928      	ldr	r1, [pc, #160]	; (8005268 <__kernel_cos+0x1a8>)
 80051c6:	e03e      	b.n	8005246 <__kernel_cos+0x186>
 80051c8:	4b28      	ldr	r3, [pc, #160]	; (800526c <__kernel_cos+0x1ac>)
 80051ca:	4599      	cmp	r9, r3
 80051cc:	dc05      	bgt.n	80051da <__kernel_cos+0x11a>
 80051ce:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 80051d2:	2200      	movs	r2, #0
 80051d4:	4690      	mov	r8, r2
 80051d6:	4699      	mov	r9, r3
 80051d8:	e003      	b.n	80051e2 <__kernel_cos+0x122>
 80051da:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80052a0 <__kernel_cos+0x1e0>
 80051de:	f04f 0800 	mov.w	r8, #0
 80051e2:	4642      	mov	r2, r8
 80051e4:	464b      	mov	r3, r9
 80051e6:	2000      	movs	r0, #0
 80051e8:	491f      	ldr	r1, [pc, #124]	; (8005268 <__kernel_cos+0x1a8>)
 80051ea:	f7fa fff1 	bl	80001d0 <__aeabi_dsub>
 80051ee:	2200      	movs	r2, #0
 80051f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051f4:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <__kernel_cos+0x1a4>)
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7fb f99d 	bl	8000538 <__aeabi_dmul>
 80051fe:	4642      	mov	r2, r8
 8005200:	464b      	mov	r3, r9
 8005202:	f7fa ffe5 	bl	80001d0 <__aeabi_dsub>
 8005206:	4652      	mov	r2, sl
 8005208:	4680      	mov	r8, r0
 800520a:	4689      	mov	r9, r1
 800520c:	4620      	mov	r0, r4
 800520e:	4629      	mov	r1, r5
 8005210:	465b      	mov	r3, fp
 8005212:	f7fb f991 	bl	8000538 <__aeabi_dmul>
 8005216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	f7fb f989 	bl	8000538 <__aeabi_dmul>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4620      	mov	r0, r4
 800522c:	4629      	mov	r1, r5
 800522e:	f7fa ffcf 	bl	80001d0 <__aeabi_dsub>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4640      	mov	r0, r8
 8005238:	4649      	mov	r1, r9
 800523a:	f7fa ffc9 	bl	80001d0 <__aeabi_dsub>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005246:	f7fa ffc3 	bl	80001d0 <__aeabi_dsub>
 800524a:	e001      	b.n	8005250 <__kernel_cos+0x190>
 800524c:	4906      	ldr	r1, [pc, #24]	; (8005268 <__kernel_cos+0x1a8>)
 800524e:	2000      	movs	r0, #0
 8005250:	ec41 0b10 	vmov	d0, r0, r1
 8005254:	b005      	add	sp, #20
 8005256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w
 8005260:	3fd33332 	.word	0x3fd33332
 8005264:	3fe00000 	.word	0x3fe00000
 8005268:	3ff00000 	.word	0x3ff00000
 800526c:	3fe90000 	.word	0x3fe90000
 8005270:	be8838d4 	.word	0xbe8838d4
 8005274:	bda8fae9 	.word	0xbda8fae9
 8005278:	bdb4b1c4 	.word	0xbdb4b1c4
 800527c:	3e21ee9e 	.word	0x3e21ee9e
 8005280:	809c52ad 	.word	0x809c52ad
 8005284:	3e927e4f 	.word	0x3e927e4f
 8005288:	19cb1590 	.word	0x19cb1590
 800528c:	3efa01a0 	.word	0x3efa01a0
 8005290:	16c15177 	.word	0x16c15177
 8005294:	3f56c16c 	.word	0x3f56c16c
 8005298:	5555554c 	.word	0x5555554c
 800529c:	3fa55555 	.word	0x3fa55555
 80052a0:	3fd20000 	.word	0x3fd20000
 80052a4:	f3af 8000 	nop.w

080052a8 <__kernel_rem_pio2>:
 80052a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ac:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80052b0:	f1a2 0803 	sub.w	r8, r2, #3
 80052b4:	9309      	str	r3, [sp, #36]	; 0x24
 80052b6:	9ca4      	ldr	r4, [sp, #656]	; 0x290
 80052b8:	4bb1      	ldr	r3, [pc, #708]	; (8005580 <__kernel_rem_pio2+0x2d8>)
 80052ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80052bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80052c0:	9304      	str	r3, [sp, #16]
 80052c2:	3d01      	subs	r5, #1
 80052c4:	9506      	str	r5, [sp, #24]
 80052c6:	46a9      	mov	r9, r5
 80052c8:	9d04      	ldr	r5, [sp, #16]
 80052ca:	900a      	str	r0, [sp, #40]	; 0x28
 80052cc:	2318      	movs	r3, #24
 80052ce:	fb98 f8f3 	sdiv	r8, r8, r3
 80052d2:	44a9      	add	r9, r5
 80052d4:	9d06      	ldr	r5, [sp, #24]
 80052d6:	9108      	str	r1, [sp, #32]
 80052d8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80052dc:	ebc5 0608 	rsb	r6, r5, r8
 80052e0:	9da5      	ldr	r5, [sp, #660]	; 0x294
 80052e2:	ea6f 0408 	mvn.w	r4, r8
 80052e6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80052ea:	fb03 2404 	mla	r4, r3, r4, r2
 80052ee:	2500      	movs	r5, #0
 80052f0:	454d      	cmp	r5, r9
 80052f2:	dc0f      	bgt.n	8005314 <__kernel_rem_pio2+0x6c>
 80052f4:	42f5      	cmn	r5, r6
 80052f6:	d404      	bmi.n	8005302 <__kernel_rem_pio2+0x5a>
 80052f8:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80052fc:	f7fb f8b6 	bl	800046c <__aeabi_i2d>
 8005300:	e001      	b.n	8005306 <__kernel_rem_pio2+0x5e>
 8005302:	2000      	movs	r0, #0
 8005304:	2100      	movs	r1, #0
 8005306:	aa22      	add	r2, sp, #136	; 0x88
 8005308:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 800530c:	e9c3 0100 	strd	r0, r1, [r3]
 8005310:	3501      	adds	r5, #1
 8005312:	e7ed      	b.n	80052f0 <__kernel_rem_pio2+0x48>
 8005314:	2500      	movs	r5, #0
 8005316:	9a04      	ldr	r2, [sp, #16]
 8005318:	4295      	cmp	r5, r2
 800531a:	dc26      	bgt.n	800536a <__kernel_rem_pio2+0xc2>
 800531c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005320:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005324:	44aa      	add	sl, r5
 8005326:	ab22      	add	r3, sp, #136	; 0x88
 8005328:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800532c:	2600      	movs	r6, #0
 800532e:	2700      	movs	r7, #0
 8005330:	f04f 0900 	mov.w	r9, #0
 8005334:	9b06      	ldr	r3, [sp, #24]
 8005336:	4599      	cmp	r9, r3
 8005338:	dc10      	bgt.n	800535c <__kernel_rem_pio2+0xb4>
 800533a:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800533e:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005342:	f7fb f8f9 	bl	8000538 <__aeabi_dmul>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4630      	mov	r0, r6
 800534c:	4639      	mov	r1, r7
 800534e:	f7fa ff41 	bl	80001d4 <__adddf3>
 8005352:	f109 0901 	add.w	r9, r9, #1
 8005356:	4606      	mov	r6, r0
 8005358:	460f      	mov	r7, r1
 800535a:	e7eb      	b.n	8005334 <__kernel_rem_pio2+0x8c>
 800535c:	a99a      	add	r1, sp, #616	; 0x268
 800535e:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8005362:	e943 6728 	strd	r6, r7, [r3, #-160]	; 0xa0
 8005366:	3501      	adds	r5, #1
 8005368:	e7d5      	b.n	8005316 <__kernel_rem_pio2+0x6e>
 800536a:	9d04      	ldr	r5, [sp, #16]
 800536c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005370:	a90e      	add	r1, sp, #56	; 0x38
 8005372:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8005376:	9da5      	ldr	r5, [sp, #660]	; 0x294
 8005378:	910b      	str	r1, [sp, #44]	; 0x2c
 800537a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 800537e:	950d      	str	r5, [sp, #52]	; 0x34
 8005380:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 8005384:	ab9a      	add	r3, sp, #616	; 0x268
 8005386:	444b      	add	r3, r9
 8005388:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800538c:	a972      	add	r1, sp, #456	; 0x1c8
 800538e:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8005392:	4489      	add	r9, r1
 8005394:	4655      	mov	r5, sl
 8005396:	2d00      	cmp	r5, #0
 8005398:	dd23      	ble.n	80053e2 <__kernel_rem_pio2+0x13a>
 800539a:	2200      	movs	r2, #0
 800539c:	4b79      	ldr	r3, [pc, #484]	; (8005584 <__kernel_rem_pio2+0x2dc>)
 800539e:	4630      	mov	r0, r6
 80053a0:	4639      	mov	r1, r7
 80053a2:	f7fb f8c9 	bl	8000538 <__aeabi_dmul>
 80053a6:	f7fb fb61 	bl	8000a6c <__aeabi_d2iz>
 80053aa:	f7fb f85f 	bl	800046c <__aeabi_i2d>
 80053ae:	2200      	movs	r2, #0
 80053b0:	4b75      	ldr	r3, [pc, #468]	; (8005588 <__kernel_rem_pio2+0x2e0>)
 80053b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053b6:	f7fb f8bf 	bl	8000538 <__aeabi_dmul>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4630      	mov	r0, r6
 80053c0:	4639      	mov	r1, r7
 80053c2:	f7fa ff05 	bl	80001d0 <__aeabi_dsub>
 80053c6:	f7fb fb51 	bl	8000a6c <__aeabi_d2iz>
 80053ca:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 80053ce:	f848 0f04 	str.w	r0, [r8, #4]!
 80053d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053d6:	f7fa fefd 	bl	80001d4 <__adddf3>
 80053da:	3d01      	subs	r5, #1
 80053dc:	4606      	mov	r6, r0
 80053de:	460f      	mov	r7, r1
 80053e0:	e7d9      	b.n	8005396 <__kernel_rem_pio2+0xee>
 80053e2:	ec47 6b10 	vmov	d0, r6, r7
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 fdce 	bl	8005f88 <scalbn>
 80053ec:	ec57 6b10 	vmov	r6, r7, d0
 80053f0:	2200      	movs	r2, #0
 80053f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80053f6:	ee10 0a10 	vmov	r0, s0
 80053fa:	4639      	mov	r1, r7
 80053fc:	f7fb f89c 	bl	8000538 <__aeabi_dmul>
 8005400:	ec41 0b10 	vmov	d0, r0, r1
 8005404:	f000 fd38 	bl	8005e78 <floor>
 8005408:	2200      	movs	r2, #0
 800540a:	ec51 0b10 	vmov	r0, r1, d0
 800540e:	4b5f      	ldr	r3, [pc, #380]	; (800558c <__kernel_rem_pio2+0x2e4>)
 8005410:	f7fb f892 	bl	8000538 <__aeabi_dmul>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f7fa fed8 	bl	80001d0 <__aeabi_dsub>
 8005420:	460f      	mov	r7, r1
 8005422:	4606      	mov	r6, r0
 8005424:	f7fb fb22 	bl	8000a6c <__aeabi_d2iz>
 8005428:	9002      	str	r0, [sp, #8]
 800542a:	f7fb f81f 	bl	800046c <__aeabi_i2d>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4630      	mov	r0, r6
 8005434:	4639      	mov	r1, r7
 8005436:	f7fa fecb 	bl	80001d0 <__aeabi_dsub>
 800543a:	2c00      	cmp	r4, #0
 800543c:	4606      	mov	r6, r0
 800543e:	460f      	mov	r7, r1
 8005440:	dd16      	ble.n	8005470 <__kernel_rem_pio2+0x1c8>
 8005442:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005446:	ab0e      	add	r3, sp, #56	; 0x38
 8005448:	9d02      	ldr	r5, [sp, #8]
 800544a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800544e:	f1c4 0318 	rsb	r3, r4, #24
 8005452:	fa41 f003 	asr.w	r0, r1, r3
 8005456:	fa00 f303 	lsl.w	r3, r0, r3
 800545a:	1acb      	subs	r3, r1, r3
 800545c:	a90e      	add	r1, sp, #56	; 0x38
 800545e:	4405      	add	r5, r0
 8005460:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005464:	f1c4 0217 	rsb	r2, r4, #23
 8005468:	9502      	str	r5, [sp, #8]
 800546a:	fa43 f902 	asr.w	r9, r3, r2
 800546e:	e00f      	b.n	8005490 <__kernel_rem_pio2+0x1e8>
 8005470:	d107      	bne.n	8005482 <__kernel_rem_pio2+0x1da>
 8005472:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005476:	aa0e      	add	r2, sp, #56	; 0x38
 8005478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547c:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005480:	e006      	b.n	8005490 <__kernel_rem_pio2+0x1e8>
 8005482:	2200      	movs	r2, #0
 8005484:	4b42      	ldr	r3, [pc, #264]	; (8005590 <__kernel_rem_pio2+0x2e8>)
 8005486:	f7fb fadd 	bl	8000a44 <__aeabi_dcmpge>
 800548a:	b928      	cbnz	r0, 8005498 <__kernel_rem_pio2+0x1f0>
 800548c:	4681      	mov	r9, r0
 800548e:	e04d      	b.n	800552c <__kernel_rem_pio2+0x284>
 8005490:	f1b9 0f00 	cmp.w	r9, #0
 8005494:	dc02      	bgt.n	800549c <__kernel_rem_pio2+0x1f4>
 8005496:	e049      	b.n	800552c <__kernel_rem_pio2+0x284>
 8005498:	f04f 0902 	mov.w	r9, #2
 800549c:	9d02      	ldr	r5, [sp, #8]
 800549e:	2300      	movs	r3, #0
 80054a0:	3501      	adds	r5, #1
 80054a2:	9502      	str	r5, [sp, #8]
 80054a4:	aa0e      	add	r2, sp, #56	; 0x38
 80054a6:	461d      	mov	r5, r3
 80054a8:	4553      	cmp	r3, sl
 80054aa:	da0f      	bge.n	80054cc <__kernel_rem_pio2+0x224>
 80054ac:	f852 1b04 	ldr.w	r1, [r2], #4
 80054b0:	b91d      	cbnz	r5, 80054ba <__kernel_rem_pio2+0x212>
 80054b2:	b149      	cbz	r1, 80054c8 <__kernel_rem_pio2+0x220>
 80054b4:	f1c1 7180 	rsb	r1, r1, #16777216	; 0x1000000
 80054b8:	e003      	b.n	80054c2 <__kernel_rem_pio2+0x21a>
 80054ba:	f1c1 11ff 	rsb	r1, r1, #16711935	; 0xff00ff
 80054be:	f501 417f 	add.w	r1, r1, #65280	; 0xff00
 80054c2:	f842 1c04 	str.w	r1, [r2, #-4]
 80054c6:	2501      	movs	r5, #1
 80054c8:	3301      	adds	r3, #1
 80054ca:	e7ed      	b.n	80054a8 <__kernel_rem_pio2+0x200>
 80054cc:	2c00      	cmp	r4, #0
 80054ce:	dd14      	ble.n	80054fa <__kernel_rem_pio2+0x252>
 80054d0:	2c01      	cmp	r4, #1
 80054d2:	d009      	beq.n	80054e8 <__kernel_rem_pio2+0x240>
 80054d4:	2c02      	cmp	r4, #2
 80054d6:	d110      	bne.n	80054fa <__kernel_rem_pio2+0x252>
 80054d8:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054dc:	a90e      	add	r1, sp, #56	; 0x38
 80054de:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80054e2:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80054e6:	e006      	b.n	80054f6 <__kernel_rem_pio2+0x24e>
 80054e8:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054ec:	a90e      	add	r1, sp, #56	; 0x38
 80054ee:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80054f2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80054f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80054fa:	f1b9 0f02 	cmp.w	r9, #2
 80054fe:	d115      	bne.n	800552c <__kernel_rem_pio2+0x284>
 8005500:	4632      	mov	r2, r6
 8005502:	463b      	mov	r3, r7
 8005504:	2000      	movs	r0, #0
 8005506:	4923      	ldr	r1, [pc, #140]	; (8005594 <__kernel_rem_pio2+0x2ec>)
 8005508:	f7fa fe62 	bl	80001d0 <__aeabi_dsub>
 800550c:	4606      	mov	r6, r0
 800550e:	460f      	mov	r7, r1
 8005510:	b165      	cbz	r5, 800552c <__kernel_rem_pio2+0x284>
 8005512:	4620      	mov	r0, r4
 8005514:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8005578 <__kernel_rem_pio2+0x2d0>
 8005518:	f000 fd36 	bl	8005f88 <scalbn>
 800551c:	4630      	mov	r0, r6
 800551e:	4639      	mov	r1, r7
 8005520:	ec53 2b10 	vmov	r2, r3, d0
 8005524:	f7fa fe54 	bl	80001d0 <__aeabi_dsub>
 8005528:	4606      	mov	r6, r0
 800552a:	460f      	mov	r7, r1
 800552c:	4630      	mov	r0, r6
 800552e:	4639      	mov	r1, r7
 8005530:	2200      	movs	r2, #0
 8005532:	2300      	movs	r3, #0
 8005534:	f7fb fa68 	bl	8000a08 <__aeabi_dcmpeq>
 8005538:	2800      	cmp	r0, #0
 800553a:	d074      	beq.n	8005626 <__kernel_rem_pio2+0x37e>
 800553c:	aa0e      	add	r2, sp, #56	; 0x38
 800553e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8005542:	eb02 008a 	add.w	r0, r2, sl, lsl #2
 8005546:	2300      	movs	r3, #0
 8005548:	460a      	mov	r2, r1
 800554a:	9d04      	ldr	r5, [sp, #16]
 800554c:	42aa      	cmp	r2, r5
 800554e:	db04      	blt.n	800555a <__kernel_rem_pio2+0x2b2>
 8005550:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005554:	3a01      	subs	r2, #1
 8005556:	432b      	orrs	r3, r5
 8005558:	e7f7      	b.n	800554a <__kernel_rem_pio2+0x2a2>
 800555a:	2b00      	cmp	r3, #0
 800555c:	f040 81ed 	bne.w	800593a <__kernel_rem_pio2+0x692>
 8005560:	2601      	movs	r6, #1
 8005562:	f06f 0303 	mvn.w	r3, #3
 8005566:	4373      	muls	r3, r6
 8005568:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800556a:	58eb      	ldr	r3, [r5, r3]
 800556c:	b9a3      	cbnz	r3, 8005598 <__kernel_rem_pio2+0x2f0>
 800556e:	3601      	adds	r6, #1
 8005570:	e7f7      	b.n	8005562 <__kernel_rem_pio2+0x2ba>
 8005572:	bf00      	nop
 8005574:	f3af 8000 	nop.w
 8005578:	00000000 	.word	0x00000000
 800557c:	3ff00000 	.word	0x3ff00000
 8005580:	080065c8 	.word	0x080065c8
 8005584:	3e700000 	.word	0x3e700000
 8005588:	41700000 	.word	0x41700000
 800558c:	40200000 	.word	0x40200000
 8005590:	3fe00000 	.word	0x3fe00000
 8005594:	3ff00000 	.word	0x3ff00000
 8005598:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800559c:	aa72      	add	r2, sp, #456	; 0x1c8
 800559e:	44d3      	add	fp, sl
 80055a0:	a922      	add	r1, sp, #136	; 0x88
 80055a2:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 80055a6:	f10a 0501 	add.w	r5, sl, #1
 80055aa:	eb01 0bcb 	add.w	fp, r1, fp, lsl #3
 80055ae:	920c      	str	r2, [sp, #48]	; 0x30
 80055b0:	2700      	movs	r7, #0
 80055b2:	eb0a 0306 	add.w	r3, sl, r6
 80055b6:	429d      	cmp	r5, r3
 80055b8:	dc33      	bgt.n	8005622 <__kernel_rem_pio2+0x37a>
 80055ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055bc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055c0:	f7fa ff54 	bl	800046c <__aeabi_i2d>
 80055c4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005860 <__kernel_rem_pio2+0x5b8>
 80055c8:	eb0b 0907 	add.w	r9, fp, r7
 80055cc:	e9c9 0100 	strd	r0, r1, [r9]
 80055d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80055d4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80055d8:	f04f 0800 	mov.w	r8, #0
 80055dc:	9906      	ldr	r1, [sp, #24]
 80055de:	4588      	cmp	r8, r1
 80055e0:	dc16      	bgt.n	8005610 <__kernel_rem_pio2+0x368>
 80055e2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80055e6:	eba9 03c8 	sub.w	r3, r9, r8, lsl #3
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	f8cd c004 	str.w	ip, [sp, #4]
 80055f2:	f7fa ffa1 	bl	8000538 <__aeabi_dmul>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055fe:	f7fa fde9 	bl	80001d4 <__adddf3>
 8005602:	f108 0801 	add.w	r8, r8, #1
 8005606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800560a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800560e:	e7e5      	b.n	80055dc <__kernel_rem_pio2+0x334>
 8005610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005612:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005616:	443b      	add	r3, r7
 8005618:	ed83 7b02 	vstr	d7, [r3, #8]
 800561c:	3501      	adds	r5, #1
 800561e:	3708      	adds	r7, #8
 8005620:	e7c7      	b.n	80055b2 <__kernel_rem_pio2+0x30a>
 8005622:	469a      	mov	sl, r3
 8005624:	e6ac      	b.n	8005380 <__kernel_rem_pio2+0xd8>
 8005626:	ec47 6b10 	vmov	d0, r6, r7
 800562a:	4260      	negs	r0, r4
 800562c:	f000 fcac 	bl	8005f88 <scalbn>
 8005630:	ec57 6b10 	vmov	r6, r7, d0
 8005634:	ee10 0a10 	vmov	r0, s0
 8005638:	4639      	mov	r1, r7
 800563a:	2200      	movs	r2, #0
 800563c:	4b8c      	ldr	r3, [pc, #560]	; (8005870 <__kernel_rem_pio2+0x5c8>)
 800563e:	f7fb fa01 	bl	8000a44 <__aeabi_dcmpge>
 8005642:	b1f8      	cbz	r0, 8005684 <__kernel_rem_pio2+0x3dc>
 8005644:	2200      	movs	r2, #0
 8005646:	4b8b      	ldr	r3, [pc, #556]	; (8005874 <__kernel_rem_pio2+0x5cc>)
 8005648:	4630      	mov	r0, r6
 800564a:	4639      	mov	r1, r7
 800564c:	f7fa ff74 	bl	8000538 <__aeabi_dmul>
 8005650:	f7fb fa0c 	bl	8000a6c <__aeabi_d2iz>
 8005654:	4605      	mov	r5, r0
 8005656:	f7fa ff09 	bl	800046c <__aeabi_i2d>
 800565a:	2200      	movs	r2, #0
 800565c:	4b84      	ldr	r3, [pc, #528]	; (8005870 <__kernel_rem_pio2+0x5c8>)
 800565e:	f7fa ff6b 	bl	8000538 <__aeabi_dmul>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4630      	mov	r0, r6
 8005668:	4639      	mov	r1, r7
 800566a:	f7fa fdb1 	bl	80001d0 <__aeabi_dsub>
 800566e:	f7fb f9fd 	bl	8000a6c <__aeabi_d2iz>
 8005672:	aa0e      	add	r2, sp, #56	; 0x38
 8005674:	3418      	adds	r4, #24
 8005676:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
 800567a:	f10a 0a01 	add.w	sl, sl, #1
 800567e:	f842 502a 	str.w	r5, [r2, sl, lsl #2]
 8005682:	e006      	b.n	8005692 <__kernel_rem_pio2+0x3ea>
 8005684:	4630      	mov	r0, r6
 8005686:	4639      	mov	r1, r7
 8005688:	f7fb f9f0 	bl	8000a6c <__aeabi_d2iz>
 800568c:	ab0e      	add	r3, sp, #56	; 0x38
 800568e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8005692:	4620      	mov	r0, r4
 8005694:	ed9f 0b74 	vldr	d0, [pc, #464]	; 8005868 <__kernel_rem_pio2+0x5c0>
 8005698:	f000 fc76 	bl	8005f88 <scalbn>
 800569c:	f10a 0b01 	add.w	fp, sl, #1
 80056a0:	a972      	add	r1, sp, #456	; 0x1c8
 80056a2:	ec55 4b10 	vmov	r4, r5, d0
 80056a6:	eb01 06cb 	add.w	r6, r1, fp, lsl #3
 80056aa:	4657      	mov	r7, sl
 80056ac:	2f00      	cmp	r7, #0
 80056ae:	db16      	blt.n	80056de <__kernel_rem_pio2+0x436>
 80056b0:	aa0e      	add	r2, sp, #56	; 0x38
 80056b2:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 80056b6:	f7fa fed9 	bl	800046c <__aeabi_i2d>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7fa ff39 	bl	8000538 <__aeabi_dmul>
 80056c6:	2200      	movs	r2, #0
 80056c8:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80056cc:	4b69      	ldr	r3, [pc, #420]	; (8005874 <__kernel_rem_pio2+0x5cc>)
 80056ce:	4620      	mov	r0, r4
 80056d0:	4629      	mov	r1, r5
 80056d2:	f7fa ff31 	bl	8000538 <__aeabi_dmul>
 80056d6:	3f01      	subs	r7, #1
 80056d8:	4604      	mov	r4, r0
 80056da:	460d      	mov	r5, r1
 80056dc:	e7e6      	b.n	80056ac <__kernel_rem_pio2+0x404>
 80056de:	ab72      	add	r3, sp, #456	; 0x1c8
 80056e0:	eb03 08ca 	add.w	r8, r3, sl, lsl #3
 80056e4:	2500      	movs	r5, #0
 80056e6:	ebc5 030a 	rsb	r3, r5, sl
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	db28      	blt.n	8005740 <__kernel_rem_pio2+0x498>
 80056ee:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8005860 <__kernel_rem_pio2+0x5b8>
 80056f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80056f6:	00ee      	lsls	r6, r5, #3
 80056f8:	ebc6 0708 	rsb	r7, r6, r8
 80056fc:	2400      	movs	r4, #0
 80056fe:	9904      	ldr	r1, [sp, #16]
 8005700:	428c      	cmp	r4, r1
 8005702:	dc15      	bgt.n	8005730 <__kernel_rem_pio2+0x488>
 8005704:	42ac      	cmp	r4, r5
 8005706:	dc13      	bgt.n	8005730 <__kernel_rem_pio2+0x488>
 8005708:	4a5b      	ldr	r2, [pc, #364]	; (8005878 <__kernel_rem_pio2+0x5d0>)
 800570a:	00e3      	lsls	r3, r4, #3
 800570c:	441a      	add	r2, r3
 800570e:	443b      	add	r3, r7
 8005710:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f7fa ff0e 	bl	8000538 <__aeabi_dmul>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005724:	f7fa fd56 	bl	80001d4 <__adddf3>
 8005728:	3401      	adds	r4, #1
 800572a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800572e:	e7e6      	b.n	80056fe <__kernel_rem_pio2+0x456>
 8005730:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005734:	aa4a      	add	r2, sp, #296	; 0x128
 8005736:	4416      	add	r6, r2
 8005738:	ed86 7b00 	vstr	d7, [r6]
 800573c:	3501      	adds	r5, #1
 800573e:	e7d2      	b.n	80056e6 <__kernel_rem_pio2+0x43e>
 8005740:	9ca4      	ldr	r4, [sp, #656]	; 0x290
 8005742:	2c03      	cmp	r4, #3
 8005744:	f200 80f2 	bhi.w	800592c <__kernel_rem_pio2+0x684>
 8005748:	e8df f004 	tbb	[pc, r4]
 800574c:	0208080f 	.word	0x0208080f
 8005750:	a94a      	add	r1, sp, #296	; 0x128
 8005752:	eb01 08cb 	add.w	r8, r1, fp, lsl #3
 8005756:	46c3      	mov	fp, r8
 8005758:	46d4      	mov	ip, sl
 800575a:	e057      	b.n	800580c <__kernel_rem_pio2+0x564>
 800575c:	aa4a      	add	r2, sp, #296	; 0x128
 800575e:	eb02 05cb 	add.w	r5, r2, fp, lsl #3
 8005762:	4654      	mov	r4, sl
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	e01b      	b.n	80057a2 <__kernel_rem_pio2+0x4fa>
 800576a:	ab4a      	add	r3, sp, #296	; 0x128
 800576c:	eb03 04cb 	add.w	r4, r3, fp, lsl #3
 8005770:	2000      	movs	r0, #0
 8005772:	2100      	movs	r1, #0
 8005774:	f1ba 0f00 	cmp.w	sl, #0
 8005778:	db06      	blt.n	8005788 <__kernel_rem_pio2+0x4e0>
 800577a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800577e:	f7fa fd29 	bl	80001d4 <__adddf3>
 8005782:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005786:	e7f5      	b.n	8005774 <__kernel_rem_pio2+0x4cc>
 8005788:	f1b9 0f00 	cmp.w	r9, #0
 800578c:	d003      	beq.n	8005796 <__kernel_rem_pio2+0x4ee>
 800578e:	4602      	mov	r2, r0
 8005790:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005794:	e001      	b.n	800579a <__kernel_rem_pio2+0x4f2>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	9c08      	ldr	r4, [sp, #32]
 800579c:	e9c4 2300 	strd	r2, r3, [r4]
 80057a0:	e0c4      	b.n	800592c <__kernel_rem_pio2+0x684>
 80057a2:	2c00      	cmp	r4, #0
 80057a4:	db09      	blt.n	80057ba <__kernel_rem_pio2+0x512>
 80057a6:	4610      	mov	r0, r2
 80057a8:	4619      	mov	r1, r3
 80057aa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80057ae:	f7fa fd11 	bl	80001d4 <__adddf3>
 80057b2:	3c01      	subs	r4, #1
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	e7f3      	b.n	80057a2 <__kernel_rem_pio2+0x4fa>
 80057ba:	f1b9 0f00 	cmp.w	r9, #0
 80057be:	d003      	beq.n	80057c8 <__kernel_rem_pio2+0x520>
 80057c0:	4610      	mov	r0, r2
 80057c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80057c6:	e001      	b.n	80057cc <__kernel_rem_pio2+0x524>
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	9d08      	ldr	r5, [sp, #32]
 80057ce:	e9c5 0100 	strd	r0, r1, [r5]
 80057d2:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80057d6:	f7fa fcfb 	bl	80001d0 <__aeabi_dsub>
 80057da:	2401      	movs	r4, #1
 80057dc:	4554      	cmp	r4, sl
 80057de:	dc08      	bgt.n	80057f2 <__kernel_rem_pio2+0x54a>
 80057e0:	aa4a      	add	r2, sp, #296	; 0x128
 80057e2:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f7fa fcf3 	bl	80001d4 <__adddf3>
 80057ee:	3401      	adds	r4, #1
 80057f0:	e7f4      	b.n	80057dc <__kernel_rem_pio2+0x534>
 80057f2:	f1b9 0f00 	cmp.w	r9, #0
 80057f6:	d003      	beq.n	8005800 <__kernel_rem_pio2+0x558>
 80057f8:	4602      	mov	r2, r0
 80057fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057fe:	e001      	b.n	8005804 <__kernel_rem_pio2+0x55c>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	9c08      	ldr	r4, [sp, #32]
 8005806:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800580a:	e08f      	b.n	800592c <__kernel_rem_pio2+0x684>
 800580c:	f1bc 0f00 	cmp.w	ip, #0
 8005810:	dd34      	ble.n	800587c <__kernel_rem_pio2+0x5d4>
 8005812:	ed1b 7b04 	vldr	d7, [fp, #-16]
 8005816:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 800581a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800581e:	ec51 0b17 	vmov	r0, r1, d7
 8005822:	4632      	mov	r2, r6
 8005824:	463b      	mov	r3, r7
 8005826:	f8cd c004 	str.w	ip, [sp, #4]
 800582a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800582e:	f7fa fcd1 	bl	80001d4 <__adddf3>
 8005832:	4604      	mov	r4, r0
 8005834:	460d      	mov	r5, r1
 8005836:	4622      	mov	r2, r4
 8005838:	462b      	mov	r3, r5
 800583a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800583e:	f7fa fcc7 	bl	80001d0 <__aeabi_dsub>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4630      	mov	r0, r6
 8005848:	4639      	mov	r1, r7
 800584a:	f7fa fcc3 	bl	80001d4 <__adddf3>
 800584e:	e96b 0102 	strd	r0, r1, [fp, #-8]!
 8005852:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005856:	e94b 4502 	strd	r4, r5, [fp, #-8]
 800585a:	e7d7      	b.n	800580c <__kernel_rem_pio2+0x564>
 800585c:	f3af 8000 	nop.w
	...
 800586c:	3ff00000 	.word	0x3ff00000
 8005870:	41700000 	.word	0x41700000
 8005874:	3e700000 	.word	0x3e700000
 8005878:	080065d8 	.word	0x080065d8
 800587c:	46c3      	mov	fp, r8
 800587e:	46d4      	mov	ip, sl
 8005880:	f1bc 0f01 	cmp.w	ip, #1
 8005884:	dd24      	ble.n	80058d0 <__kernel_rem_pio2+0x628>
 8005886:	ed1b 7b02 	vldr	d7, [fp, #-8]
 800588a:	e95b 6704 	ldrd	r6, r7, [fp, #-16]
 800588e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005892:	ec53 2b17 	vmov	r2, r3, d7
 8005896:	4630      	mov	r0, r6
 8005898:	4639      	mov	r1, r7
 800589a:	f8cd c004 	str.w	ip, [sp, #4]
 800589e:	ed8d 7b04 	vstr	d7, [sp, #16]
 80058a2:	f7fa fc97 	bl	80001d4 <__adddf3>
 80058a6:	4604      	mov	r4, r0
 80058a8:	460d      	mov	r5, r1
 80058aa:	4622      	mov	r2, r4
 80058ac:	462b      	mov	r3, r5
 80058ae:	4630      	mov	r0, r6
 80058b0:	4639      	mov	r1, r7
 80058b2:	f7fa fc8d 	bl	80001d0 <__aeabi_dsub>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058be:	f7fa fc89 	bl	80001d4 <__adddf3>
 80058c2:	e96b 0102 	strd	r0, r1, [fp, #-8]!
 80058c6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80058ca:	e94b 4502 	strd	r4, r5, [fp, #-8]
 80058ce:	e7d7      	b.n	8005880 <__kernel_rem_pio2+0x5d8>
 80058d0:	4644      	mov	r4, r8
 80058d2:	2000      	movs	r0, #0
 80058d4:	2100      	movs	r1, #0
 80058d6:	f1ba 0f01 	cmp.w	sl, #1
 80058da:	dd06      	ble.n	80058ea <__kernel_rem_pio2+0x642>
 80058dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058e0:	f7fa fc78 	bl	80001d4 <__adddf3>
 80058e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058e8:	e7f5      	b.n	80058d6 <__kernel_rem_pio2+0x62e>
 80058ea:	f1b9 0f00 	cmp.w	r9, #0
 80058ee:	d10c      	bne.n	800590a <__kernel_rem_pio2+0x662>
 80058f0:	ac9a      	add	r4, sp, #616	; 0x268
 80058f2:	e974 2350 	ldrd	r2, r3, [r4, #-320]!	; 0x140
 80058f6:	9d08      	ldr	r5, [sp, #32]
 80058f8:	e9c5 2300 	strd	r2, r3, [r5]
 80058fc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005900:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8005904:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8005908:	e010      	b.n	800592c <__kernel_rem_pio2+0x684>
 800590a:	9c08      	ldr	r4, [sp, #32]
 800590c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800590e:	6023      	str	r3, [r4, #0]
 8005910:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8005912:	6120      	str	r0, [r4, #16]
 8005914:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800591c:	60a3      	str	r3, [r4, #8]
 800591e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8005920:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005924:	60e3      	str	r3, [r4, #12]
 8005926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800592a:	6163      	str	r3, [r4, #20]
 800592c:	9d02      	ldr	r5, [sp, #8]
 800592e:	f005 0007 	and.w	r0, r5, #7
 8005932:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593a:	3c18      	subs	r4, #24
 800593c:	468a      	mov	sl, r1
 800593e:	a90e      	add	r1, sp, #56	; 0x38
 8005940:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f47f aea4 	bne.w	8005692 <__kernel_rem_pio2+0x3ea>
 800594a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800594e:	3c18      	subs	r4, #24
 8005950:	e7f5      	b.n	800593e <__kernel_rem_pio2+0x696>
 8005952:	bf00      	nop
 8005954:	f3af 8000 	nop.w

08005958 <__kernel_sin>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	ec55 4b10 	vmov	r4, r5, d0
 8005960:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005964:	b085      	sub	sp, #20
 8005966:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800596a:	ed8d 1b00 	vstr	d1, [sp]
 800596e:	4682      	mov	sl, r0
 8005970:	da07      	bge.n	8005982 <__kernel_sin+0x2a>
 8005972:	ee10 0a10 	vmov	r0, s0
 8005976:	4629      	mov	r1, r5
 8005978:	f7fb f878 	bl	8000a6c <__aeabi_d2iz>
 800597c:	2800      	cmp	r0, #0
 800597e:	f000 808c 	beq.w	8005a9a <__kernel_sin+0x142>
 8005982:	4622      	mov	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	4620      	mov	r0, r4
 8005988:	4629      	mov	r1, r5
 800598a:	f7fa fdd5 	bl	8000538 <__aeabi_dmul>
 800598e:	4622      	mov	r2, r4
 8005990:	462b      	mov	r3, r5
 8005992:	4606      	mov	r6, r0
 8005994:	460f      	mov	r7, r1
 8005996:	f7fa fdcf 	bl	8000538 <__aeabi_dmul>
 800599a:	a346      	add	r3, pc, #280	; (adr r3, 8005ab4 <__kernel_sin+0x15c>)
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	4680      	mov	r8, r0
 80059a2:	4689      	mov	r9, r1
 80059a4:	4630      	mov	r0, r6
 80059a6:	4639      	mov	r1, r7
 80059a8:	f7fa fdc6 	bl	8000538 <__aeabi_dmul>
 80059ac:	a343      	add	r3, pc, #268	; (adr r3, 8005abc <__kernel_sin+0x164>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fa fc0d 	bl	80001d0 <__aeabi_dsub>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4630      	mov	r0, r6
 80059bc:	4639      	mov	r1, r7
 80059be:	f7fa fdbb 	bl	8000538 <__aeabi_dmul>
 80059c2:	a340      	add	r3, pc, #256	; (adr r3, 8005ac4 <__kernel_sin+0x16c>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fc04 	bl	80001d4 <__adddf3>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4630      	mov	r0, r6
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fa fdb0 	bl	8000538 <__aeabi_dmul>
 80059d8:	a33c      	add	r3, pc, #240	; (adr r3, 8005acc <__kernel_sin+0x174>)
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f7fa fbf7 	bl	80001d0 <__aeabi_dsub>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4630      	mov	r0, r6
 80059e8:	4639      	mov	r1, r7
 80059ea:	f7fa fda5 	bl	8000538 <__aeabi_dmul>
 80059ee:	a339      	add	r3, pc, #228	; (adr r3, 8005ad4 <__kernel_sin+0x17c>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f7fa fbee 	bl	80001d4 <__adddf3>
 80059f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059fc:	f1ba 0f00 	cmp.w	sl, #0
 8005a00:	d117      	bne.n	8005a32 <__kernel_sin+0xda>
 8005a02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a06:	4630      	mov	r0, r6
 8005a08:	4639      	mov	r1, r7
 8005a0a:	f7fa fd95 	bl	8000538 <__aeabi_dmul>
 8005a0e:	a326      	add	r3, pc, #152	; (adr r3, 8005aa8 <__kernel_sin+0x150>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f7fa fbdc 	bl	80001d0 <__aeabi_dsub>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4649      	mov	r1, r9
 8005a20:	f7fa fd8a 	bl	8000538 <__aeabi_dmul>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4620      	mov	r0, r4
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	f7fa fbd2 	bl	80001d4 <__adddf3>
 8005a30:	e035      	b.n	8005a9e <__kernel_sin+0x146>
 8005a32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a36:	2200      	movs	r2, #0
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <__kernel_sin+0x158>)
 8005a3a:	f7fa fd7d 	bl	8000538 <__aeabi_dmul>
 8005a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a42:	4682      	mov	sl, r0
 8005a44:	468b      	mov	fp, r1
 8005a46:	4640      	mov	r0, r8
 8005a48:	4649      	mov	r1, r9
 8005a4a:	f7fa fd75 	bl	8000538 <__aeabi_dmul>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4650      	mov	r0, sl
 8005a54:	4659      	mov	r1, fp
 8005a56:	f7fa fbbb 	bl	80001d0 <__aeabi_dsub>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4630      	mov	r0, r6
 8005a60:	4639      	mov	r1, r7
 8005a62:	f7fa fd69 	bl	8000538 <__aeabi_dmul>
 8005a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a6a:	f7fa fbb1 	bl	80001d0 <__aeabi_dsub>
 8005a6e:	a30e      	add	r3, pc, #56	; (adr r3, 8005aa8 <__kernel_sin+0x150>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fa fd5c 	bl	8000538 <__aeabi_dmul>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4630      	mov	r0, r6
 8005a86:	4639      	mov	r1, r7
 8005a88:	f7fa fba4 	bl	80001d4 <__adddf3>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7fa fb9c 	bl	80001d0 <__aeabi_dsub>
 8005a98:	e001      	b.n	8005a9e <__kernel_sin+0x146>
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	ec41 0b10 	vmov	d0, r0, r1
 8005aa2:	b005      	add	sp, #20
 8005aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa8:	55555549 	.word	0x55555549
 8005aac:	3fc55555 	.word	0x3fc55555
 8005ab0:	3fe00000 	.word	0x3fe00000
 8005ab4:	5acfd57c 	.word	0x5acfd57c
 8005ab8:	3de5d93a 	.word	0x3de5d93a
 8005abc:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ac0:	3e5ae5e6 	.word	0x3e5ae5e6
 8005ac4:	57b1fe7d 	.word	0x57b1fe7d
 8005ac8:	3ec71de3 	.word	0x3ec71de3
 8005acc:	19c161d5 	.word	0x19c161d5
 8005ad0:	3f2a01a0 	.word	0x3f2a01a0
 8005ad4:	1110f8a6 	.word	0x1110f8a6
 8005ad8:	3f811111 	.word	0x3f811111
 8005adc:	f3af 8000 	nop.w

08005ae0 <atan>:
 8005ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	ec55 4b10 	vmov	r4, r5, d0
 8005ae8:	4b55      	ldr	r3, [pc, #340]	; (8005c40 <atan+0x160>)
 8005aea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005aee:	429e      	cmp	r6, r3
 8005af0:	46ab      	mov	fp, r5
 8005af2:	dd13      	ble.n	8005b1c <atan+0x3c>
 8005af4:	4953      	ldr	r1, [pc, #332]	; (8005c44 <atan+0x164>)
 8005af6:	428e      	cmp	r6, r1
 8005af8:	dc01      	bgt.n	8005afe <atan+0x1e>
 8005afa:	d107      	bne.n	8005b0c <atan+0x2c>
 8005afc:	b134      	cbz	r4, 8005b0c <atan+0x2c>
 8005afe:	4620      	mov	r0, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	4622      	mov	r2, r4
 8005b04:	462b      	mov	r3, r5
 8005b06:	f7fa fb65 	bl	80001d4 <__adddf3>
 8005b0a:	e16f      	b.n	8005dec <atan+0x30c>
 8005b0c:	f1bb 0f00 	cmp.w	fp, #0
 8005b10:	f340 8166 	ble.w	8005de0 <atan+0x300>
 8005b14:	a146      	add	r1, pc, #280	; (adr r1, 8005c30 <atan+0x150>)
 8005b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b1a:	e167      	b.n	8005dec <atan+0x30c>
 8005b1c:	4b4a      	ldr	r3, [pc, #296]	; (8005c48 <atan+0x168>)
 8005b1e:	429e      	cmp	r6, r3
 8005b20:	dc14      	bgt.n	8005b4c <atan+0x6c>
 8005b22:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005b26:	429e      	cmp	r6, r3
 8005b28:	f300 809a 	bgt.w	8005c60 <atan+0x180>
 8005b2c:	a342      	add	r3, pc, #264	; (adr r3, 8005c38 <atan+0x158>)
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	ee10 0a10 	vmov	r0, s0
 8005b36:	4629      	mov	r1, r5
 8005b38:	f7fa fb4c 	bl	80001d4 <__adddf3>
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	4b43      	ldr	r3, [pc, #268]	; (8005c4c <atan+0x16c>)
 8005b40:	f7fa ff8a 	bl	8000a58 <__aeabi_dcmpgt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f040 814f 	bne.w	8005de8 <atan+0x308>
 8005b4a:	e089      	b.n	8005c60 <atan+0x180>
 8005b4c:	f000 f988 	bl	8005e60 <fabs>
 8005b50:	4b3f      	ldr	r3, [pc, #252]	; (8005c50 <atan+0x170>)
 8005b52:	429e      	cmp	r6, r3
 8005b54:	ec55 4b10 	vmov	r4, r5, d0
 8005b58:	dc3a      	bgt.n	8005bd0 <atan+0xf0>
 8005b5a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005b5e:	429e      	cmp	r6, r3
 8005b60:	ee10 0a10 	vmov	r0, s0
 8005b64:	4629      	mov	r1, r5
 8005b66:	dc1c      	bgt.n	8005ba2 <atan+0xc2>
 8005b68:	ee10 2a10 	vmov	r2, s0
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	f7fa fb31 	bl	80001d4 <__adddf3>
 8005b72:	2200      	movs	r2, #0
 8005b74:	4b35      	ldr	r3, [pc, #212]	; (8005c4c <atan+0x16c>)
 8005b76:	f7fa fb2b 	bl	80001d0 <__aeabi_dsub>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	460f      	mov	r7, r1
 8005b80:	4620      	mov	r0, r4
 8005b82:	4629      	mov	r1, r5
 8005b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b88:	f7fa fb24 	bl	80001d4 <__adddf3>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4630      	mov	r0, r6
 8005b92:	4639      	mov	r1, r7
 8005b94:	f7fa fdfa 	bl	800078c <__aeabi_ddiv>
 8005b98:	f04f 0c00 	mov.w	ip, #0
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	e060      	b.n	8005c64 <atan+0x184>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	4b29      	ldr	r3, [pc, #164]	; (8005c4c <atan+0x16c>)
 8005ba6:	f7fa fb13 	bl	80001d0 <__aeabi_dsub>
 8005baa:	2200      	movs	r2, #0
 8005bac:	4606      	mov	r6, r0
 8005bae:	460f      	mov	r7, r1
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <atan+0x16c>)
 8005bb6:	f7fa fb0d 	bl	80001d4 <__adddf3>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fde3 	bl	800078c <__aeabi_ddiv>
 8005bc6:	f04f 0c01 	mov.w	ip, #1
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460d      	mov	r5, r1
 8005bce:	e049      	b.n	8005c64 <atan+0x184>
 8005bd0:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <atan+0x174>)
 8005bd2:	429e      	cmp	r6, r3
 8005bd4:	dc1d      	bgt.n	8005c12 <atan+0x132>
 8005bd6:	ee10 0a10 	vmov	r0, s0
 8005bda:	4629      	mov	r1, r5
 8005bdc:	2200      	movs	r2, #0
 8005bde:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <atan+0x178>)
 8005be0:	f7fa faf6 	bl	80001d0 <__aeabi_dsub>
 8005be4:	2200      	movs	r2, #0
 8005be6:	4606      	mov	r6, r0
 8005be8:	460f      	mov	r7, r1
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <atan+0x178>)
 8005bf0:	f7fa fca2 	bl	8000538 <__aeabi_dmul>
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <atan+0x16c>)
 8005bf8:	f7fa faec 	bl	80001d4 <__adddf3>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4630      	mov	r0, r6
 8005c02:	4639      	mov	r1, r7
 8005c04:	f7fa fdc2 	bl	800078c <__aeabi_ddiv>
 8005c08:	f04f 0c02 	mov.w	ip, #2
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	460d      	mov	r5, r1
 8005c10:	e028      	b.n	8005c64 <atan+0x184>
 8005c12:	462b      	mov	r3, r5
 8005c14:	2000      	movs	r0, #0
 8005c16:	4911      	ldr	r1, [pc, #68]	; (8005c5c <atan+0x17c>)
 8005c18:	ee10 2a10 	vmov	r2, s0
 8005c1c:	f7fa fdb6 	bl	800078c <__aeabi_ddiv>
 8005c20:	f04f 0c03 	mov.w	ip, #3
 8005c24:	4604      	mov	r4, r0
 8005c26:	460d      	mov	r5, r1
 8005c28:	e01c      	b.n	8005c64 <atan+0x184>
 8005c2a:	bf00      	nop
 8005c2c:	f3af 8000 	nop.w
 8005c30:	54442d18 	.word	0x54442d18
 8005c34:	3ff921fb 	.word	0x3ff921fb
 8005c38:	8800759c 	.word	0x8800759c
 8005c3c:	7e37e43c 	.word	0x7e37e43c
 8005c40:	440fffff 	.word	0x440fffff
 8005c44:	7ff00000 	.word	0x7ff00000
 8005c48:	3fdbffff 	.word	0x3fdbffff
 8005c4c:	3ff00000 	.word	0x3ff00000
 8005c50:	3ff2ffff 	.word	0x3ff2ffff
 8005c54:	40037fff 	.word	0x40037fff
 8005c58:	3ff80000 	.word	0x3ff80000
 8005c5c:	bff00000 	.word	0xbff00000
 8005c60:	f04f 3cff 	mov.w	ip, #4294967295
 8005c64:	4622      	mov	r2, r4
 8005c66:	462b      	mov	r3, r5
 8005c68:	4620      	mov	r0, r4
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	f8cd c004 	str.w	ip, [sp, #4]
 8005c70:	f7fa fc62 	bl	8000538 <__aeabi_dmul>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4680      	mov	r8, r0
 8005c7a:	4689      	mov	r9, r1
 8005c7c:	f7fa fc5c 	bl	8000538 <__aeabi_dmul>
 8005c80:	a361      	add	r3, pc, #388	; (adr r3, 8005e08 <atan+0x328>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	4606      	mov	r6, r0
 8005c88:	460f      	mov	r7, r1
 8005c8a:	f7fa fc55 	bl	8000538 <__aeabi_dmul>
 8005c8e:	a360      	add	r3, pc, #384	; (adr r3, 8005e10 <atan+0x330>)
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f7fa fa9e 	bl	80001d4 <__adddf3>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa fc4a 	bl	8000538 <__aeabi_dmul>
 8005ca4:	a35c      	add	r3, pc, #368	; (adr r3, 8005e18 <atan+0x338>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f7fa fa93 	bl	80001d4 <__adddf3>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	4639      	mov	r1, r7
 8005cb6:	f7fa fc3f 	bl	8000538 <__aeabi_dmul>
 8005cba:	a359      	add	r3, pc, #356	; (adr r3, 8005e20 <atan+0x340>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fa88 	bl	80001d4 <__adddf3>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4630      	mov	r0, r6
 8005cca:	4639      	mov	r1, r7
 8005ccc:	f7fa fc34 	bl	8000538 <__aeabi_dmul>
 8005cd0:	a355      	add	r3, pc, #340	; (adr r3, 8005e28 <atan+0x348>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f7fa fa7d 	bl	80001d4 <__adddf3>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4630      	mov	r0, r6
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	f7fa fc29 	bl	8000538 <__aeabi_dmul>
 8005ce6:	a352      	add	r3, pc, #328	; (adr r3, 8005e30 <atan+0x350>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fa72 	bl	80001d4 <__adddf3>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	f7fa fc1e 	bl	8000538 <__aeabi_dmul>
 8005cfc:	a34e      	add	r3, pc, #312	; (adr r3, 8005e38 <atan+0x358>)
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	4680      	mov	r8, r0
 8005d04:	4689      	mov	r9, r1
 8005d06:	4630      	mov	r0, r6
 8005d08:	4639      	mov	r1, r7
 8005d0a:	f7fa fc15 	bl	8000538 <__aeabi_dmul>
 8005d0e:	a34c      	add	r3, pc, #304	; (adr r3, 8005e40 <atan+0x360>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fa5c 	bl	80001d0 <__aeabi_dsub>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	4639      	mov	r1, r7
 8005d20:	f7fa fc0a 	bl	8000538 <__aeabi_dmul>
 8005d24:	a348      	add	r3, pc, #288	; (adr r3, 8005e48 <atan+0x368>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f7fa fa51 	bl	80001d0 <__aeabi_dsub>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4630      	mov	r0, r6
 8005d34:	4639      	mov	r1, r7
 8005d36:	f7fa fbff 	bl	8000538 <__aeabi_dmul>
 8005d3a:	a345      	add	r3, pc, #276	; (adr r3, 8005e50 <atan+0x370>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fa46 	bl	80001d0 <__aeabi_dsub>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa fbf4 	bl	8000538 <__aeabi_dmul>
 8005d50:	a341      	add	r3, pc, #260	; (adr r3, 8005e58 <atan+0x378>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f7fa fa3b 	bl	80001d0 <__aeabi_dsub>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4630      	mov	r0, r6
 8005d60:	4639      	mov	r1, r7
 8005d62:	f7fa fbe9 	bl	8000538 <__aeabi_dmul>
 8005d66:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005d6a:	f1bc 3fff 	cmp.w	ip, #4294967295
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	d110      	bne.n	8005d96 <atan+0x2b6>
 8005d74:	4640      	mov	r0, r8
 8005d76:	4649      	mov	r1, r9
 8005d78:	f7fa fa2c 	bl	80001d4 <__adddf3>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4620      	mov	r0, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	f7fa fbd8 	bl	8000538 <__aeabi_dmul>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f7fa fa1e 	bl	80001d0 <__aeabi_dsub>
 8005d94:	e02a      	b.n	8005dec <atan+0x30c>
 8005d96:	4640      	mov	r0, r8
 8005d98:	4649      	mov	r1, r9
 8005d9a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8005d9e:	f7fa fa19 	bl	80001d4 <__adddf3>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	f7fa fbc5 	bl	8000538 <__aeabi_dmul>
 8005dae:	4e14      	ldr	r6, [pc, #80]	; (8005e00 <atan+0x320>)
 8005db0:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <atan+0x324>)
 8005db2:	443e      	add	r6, r7
 8005db4:	441f      	add	r7, r3
 8005db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dba:	f7fa fa09 	bl	80001d0 <__aeabi_dsub>
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	f7fa fa05 	bl	80001d0 <__aeabi_dsub>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005dce:	f7fa f9ff 	bl	80001d0 <__aeabi_dsub>
 8005dd2:	f1bb 0f00 	cmp.w	fp, #0
 8005dd6:	da09      	bge.n	8005dec <atan+0x30c>
 8005dd8:	4604      	mov	r4, r0
 8005dda:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005dde:	e003      	b.n	8005de8 <atan+0x308>
 8005de0:	a105      	add	r1, pc, #20	; (adr r1, 8005df8 <atan+0x318>)
 8005de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de6:	e001      	b.n	8005dec <atan+0x30c>
 8005de8:	4620      	mov	r0, r4
 8005dea:	4629      	mov	r1, r5
 8005dec:	ec41 0b10 	vmov	d0, r0, r1
 8005df0:	b003      	add	sp, #12
 8005df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df6:	bf00      	nop
 8005df8:	54442d18 	.word	0x54442d18
 8005dfc:	bff921fb 	.word	0xbff921fb
 8005e00:	08006638 	.word	0x08006638
 8005e04:	08006618 	.word	0x08006618
 8005e08:	e322da11 	.word	0xe322da11
 8005e0c:	3f90ad3a 	.word	0x3f90ad3a
 8005e10:	24760deb 	.word	0x24760deb
 8005e14:	3fa97b4b 	.word	0x3fa97b4b
 8005e18:	a0d03d51 	.word	0xa0d03d51
 8005e1c:	3fb10d66 	.word	0x3fb10d66
 8005e20:	c54c206e 	.word	0xc54c206e
 8005e24:	3fb745cd 	.word	0x3fb745cd
 8005e28:	920083ff 	.word	0x920083ff
 8005e2c:	3fc24924 	.word	0x3fc24924
 8005e30:	5555550d 	.word	0x5555550d
 8005e34:	3fd55555 	.word	0x3fd55555
 8005e38:	2c6a6c2f 	.word	0x2c6a6c2f
 8005e3c:	bfa2b444 	.word	0xbfa2b444
 8005e40:	52defd9a 	.word	0x52defd9a
 8005e44:	3fadde2d 	.word	0x3fadde2d
 8005e48:	af749a6d 	.word	0xaf749a6d
 8005e4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005e50:	fe231671 	.word	0xfe231671
 8005e54:	3fbc71c6 	.word	0x3fbc71c6
 8005e58:	9998ebc4 	.word	0x9998ebc4
 8005e5c:	3fc99999 	.word	0x3fc99999

08005e60 <fabs>:
 8005e60:	ec51 0b10 	vmov	r0, r1, d0
 8005e64:	ec53 2b10 	vmov	r2, r3, d0
 8005e68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e6c:	ec43 2b10 	vmov	d0, r2, r3
 8005e70:	4770      	bx	lr
 8005e72:	0000      	movs	r0, r0
 8005e74:	0000      	movs	r0, r0
	...

08005e78 <floor>:
 8005e78:	ec51 0b10 	vmov	r0, r1, d0
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	f3c1 590a 	ubfx	r9, r1, #20, #11
 8005e84:	f2a9 38ff 	subw	r8, r9, #1023	; 0x3ff
 8005e88:	f1b8 0f13 	cmp.w	r8, #19
 8005e8c:	ee10 4a10 	vmov	r4, s0
 8005e90:	460d      	mov	r5, r1
 8005e92:	460e      	mov	r6, r1
 8005e94:	4607      	mov	r7, r0
 8005e96:	dc35      	bgt.n	8005f04 <floor+0x8c>
 8005e98:	f1b8 0f00 	cmp.w	r8, #0
 8005e9c:	da15      	bge.n	8005eca <floor+0x52>
 8005e9e:	a336      	add	r3, pc, #216	; (adr r3, 8005f78 <floor+0x100>)
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f7fa f996 	bl	80001d4 <__adddf3>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f7fa fdd4 	bl	8000a58 <__aeabi_dcmpgt>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d05a      	beq.n	8005f6a <floor+0xf2>
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	da56      	bge.n	8005f66 <floor+0xee>
 8005eb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005ebc:	4323      	orrs	r3, r4
 8005ebe:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <floor+0x108>)
 8005ec0:	f04f 0700 	mov.w	r7, #0
 8005ec4:	bf18      	it	ne
 8005ec6:	461e      	movne	r6, r3
 8005ec8:	e04f      	b.n	8005f6a <floor+0xf2>
 8005eca:	4b2e      	ldr	r3, [pc, #184]	; (8005f84 <floor+0x10c>)
 8005ecc:	fa43 f908 	asr.w	r9, r3, r8
 8005ed0:	ea09 0301 	and.w	r3, r9, r1
 8005ed4:	4303      	orrs	r3, r0
 8005ed6:	d04a      	beq.n	8005f6e <floor+0xf6>
 8005ed8:	a327      	add	r3, pc, #156	; (adr r3, 8005f78 <floor+0x100>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa f979 	bl	80001d4 <__adddf3>
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f7fa fdb7 	bl	8000a58 <__aeabi_dcmpgt>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d03d      	beq.n	8005f6a <floor+0xf2>
 8005eee:	2d00      	cmp	r5, #0
 8005ef0:	da04      	bge.n	8005efc <floor+0x84>
 8005ef2:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8005ef6:	fa46 f608 	asr.w	r6, r6, r8
 8005efa:	442e      	add	r6, r5
 8005efc:	ea26 0609 	bic.w	r6, r6, r9
 8005f00:	2700      	movs	r7, #0
 8005f02:	e032      	b.n	8005f6a <floor+0xf2>
 8005f04:	f1b8 0f33 	cmp.w	r8, #51	; 0x33
 8005f08:	dd08      	ble.n	8005f1c <floor+0xa4>
 8005f0a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8005f0e:	d12e      	bne.n	8005f6e <floor+0xf6>
 8005f10:	ee10 2a10 	vmov	r2, s0
 8005f14:	460b      	mov	r3, r1
 8005f16:	f7fa f95d 	bl	80001d4 <__adddf3>
 8005f1a:	e028      	b.n	8005f6e <floor+0xf6>
 8005f1c:	f2a9 4313 	subw	r3, r9, #1043	; 0x413
 8005f20:	f04f 3aff 	mov.w	sl, #4294967295
 8005f24:	fa2a fa03 	lsr.w	sl, sl, r3
 8005f28:	ea1a 0f00 	tst.w	sl, r0
 8005f2c:	d01f      	beq.n	8005f6e <floor+0xf6>
 8005f2e:	a312      	add	r3, pc, #72	; (adr r3, 8005f78 <floor+0x100>)
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f7fa f94e 	bl	80001d4 <__adddf3>
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f7fa fd8c 	bl	8000a58 <__aeabi_dcmpgt>
 8005f40:	b198      	cbz	r0, 8005f6a <floor+0xf2>
 8005f42:	2d00      	cmp	r5, #0
 8005f44:	da0c      	bge.n	8005f60 <floor+0xe8>
 8005f46:	f1b8 0f14 	cmp.w	r8, #20
 8005f4a:	d008      	beq.n	8005f5e <floor+0xe6>
 8005f4c:	f5c9 6986 	rsb	r9, r9, #1072	; 0x430
 8005f50:	f109 0903 	add.w	r9, r9, #3
 8005f54:	2701      	movs	r7, #1
 8005f56:	fa07 f709 	lsl.w	r7, r7, r9
 8005f5a:	193f      	adds	r7, r7, r4
 8005f5c:	d300      	bcc.n	8005f60 <floor+0xe8>
 8005f5e:	1c6e      	adds	r6, r5, #1
 8005f60:	ea27 070a 	bic.w	r7, r7, sl
 8005f64:	e001      	b.n	8005f6a <floor+0xf2>
 8005f66:	2700      	movs	r7, #0
 8005f68:	463e      	mov	r6, r7
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	ec41 0b10 	vmov	d0, r0, r1
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	bf00      	nop
 8005f78:	8800759c 	.word	0x8800759c
 8005f7c:	7e37e43c 	.word	0x7e37e43c
 8005f80:	bff00000 	.word	0xbff00000
 8005f84:	000fffff 	.word	0x000fffff

08005f88 <scalbn>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	eeb0 1a40 	vmov.f32	s2, s0
 8005f8e:	eef0 1a60 	vmov.f32	s3, s1
 8005f92:	ec53 2b10 	vmov	r2, r3, d0
 8005f96:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	461d      	mov	r5, r3
 8005f9e:	b9a1      	cbnz	r1, 8005fca <scalbn+0x42>
 8005fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	ec51 0b10 	vmov	r0, r1, d0
 8005faa:	d052      	beq.n	8006052 <scalbn+0xca>
 8005fac:	4b2e      	ldr	r3, [pc, #184]	; (8006068 <scalbn+0xe0>)
 8005fae:	4d2f      	ldr	r5, [pc, #188]	; (800606c <scalbn+0xe4>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f7fa fac1 	bl	8000538 <__aeabi_dmul>
 8005fb6:	42ac      	cmp	r4, r5
 8005fb8:	ec41 0b11 	vmov	d1, r0, r1
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	db37      	blt.n	8006030 <scalbn+0xa8>
 8005fc0:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8005fc4:	461d      	mov	r5, r3
 8005fc6:	3936      	subs	r1, #54	; 0x36
 8005fc8:	e00b      	b.n	8005fe2 <scalbn+0x5a>
 8005fca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d107      	bne.n	8005fe2 <scalbn+0x5a>
 8005fd2:	ec51 0b10 	vmov	r0, r1, d0
 8005fd6:	ee10 2a10 	vmov	r2, s0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	f7fa f8fa 	bl	80001d4 <__adddf3>
 8005fe0:	e037      	b.n	8006052 <scalbn+0xca>
 8005fe2:	190b      	adds	r3, r1, r4
 8005fe4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	dc11      	bgt.n	8006010 <scalbn+0x88>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dd08      	ble.n	8006002 <scalbn+0x7a>
 8005ff0:	f025 45ff 	bic.w	r5, r5, #2139095040	; 0x7f800000
 8005ff4:	f425 05e0 	bic.w	r5, r5, #7340032	; 0x700000
 8005ff8:	ec51 0b11 	vmov	r0, r1, d1
 8005ffc:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8006000:	e027      	b.n	8006052 <scalbn+0xca>
 8006002:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8006006:	da17      	bge.n	8006038 <scalbn+0xb0>
 8006008:	f24c 3350 	movw	r3, #50000	; 0xc350
 800600c:	429c      	cmp	r4, r3
 800600e:	dd09      	ble.n	8006024 <scalbn+0x9c>
 8006010:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006058 <scalbn+0xd0>
 8006014:	f000 f90f 	bl	8006236 <copysign>
 8006018:	a30f      	add	r3, pc, #60	; (adr r3, 8006058 <scalbn+0xd0>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	ec51 0b10 	vmov	r0, r1, d0
 8006022:	e014      	b.n	800604e <scalbn+0xc6>
 8006024:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006060 <scalbn+0xd8>
 8006028:	f000 f905 	bl	8006236 <copysign>
 800602c:	ec51 0b10 	vmov	r0, r1, d0
 8006030:	a30b      	add	r3, pc, #44	; (adr r3, 8006060 <scalbn+0xd8>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	e00a      	b.n	800604e <scalbn+0xc6>
 8006038:	f025 45ff 	bic.w	r5, r5, #2139095040	; 0x7f800000
 800603c:	3336      	adds	r3, #54	; 0x36
 800603e:	f425 05e0 	bic.w	r5, r5, #7340032	; 0x700000
 8006042:	ec51 0b11 	vmov	r0, r1, d1
 8006046:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <scalbn+0xe8>)
 800604c:	2200      	movs	r2, #0
 800604e:	f7fa fa73 	bl	8000538 <__aeabi_dmul>
 8006052:	ec41 0b10 	vmov	d0, r0, r1
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	8800759c 	.word	0x8800759c
 800605c:	7e37e43c 	.word	0x7e37e43c
 8006060:	c2f8f359 	.word	0xc2f8f359
 8006064:	01a56e1f 	.word	0x01a56e1f
 8006068:	43500000 	.word	0x43500000
 800606c:	ffff3cb0 	.word	0xffff3cb0
 8006070:	3c900000 	.word	0x3c900000
 8006074:	f3af 8000 	nop.w

08006078 <atanf>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	ee10 5a10 	vmov	r5, s0
 800607e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006082:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8006086:	eef0 7a40 	vmov.f32	s15, s0
 800608a:	db10      	blt.n	80060ae <atanf+0x36>
 800608c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006090:	dd02      	ble.n	8006098 <atanf+0x20>
 8006092:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	eddf 7a50 	vldr	s15, [pc, #320]	; 80061dc <atanf+0x164>
 800609c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80061e0 <atanf+0x168>
 80060a0:	2d00      	cmp	r5, #0
 80060a2:	bfcc      	ite	gt
 80060a4:	eeb0 0a67 	vmovgt.f32	s0, s15
 80060a8:	eeb0 0a47 	vmovle.f32	s0, s14
 80060ac:	bd38      	pop	{r3, r4, r5, pc}
 80060ae:	4b4d      	ldr	r3, [pc, #308]	; (80061e4 <atanf+0x16c>)
 80060b0:	429c      	cmp	r4, r3
 80060b2:	dc0f      	bgt.n	80060d4 <atanf+0x5c>
 80060b4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80060b8:	da40      	bge.n	800613c <atanf+0xc4>
 80060ba:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80061e8 <atanf+0x170>
 80060be:	ee70 6a26 	vadd.f32	s13, s0, s13
 80060c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80060c6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80060ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ce:	f300 8082 	bgt.w	80061d6 <atanf+0x15e>
 80060d2:	e033      	b.n	800613c <atanf+0xc4>
 80060d4:	f000 f8a8 	bl	8006228 <fabsf>
 80060d8:	4b44      	ldr	r3, [pc, #272]	; (80061ec <atanf+0x174>)
 80060da:	429c      	cmp	r4, r3
 80060dc:	dc19      	bgt.n	8006112 <atanf+0x9a>
 80060de:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80060e2:	429c      	cmp	r4, r3
 80060e4:	dc0b      	bgt.n	80060fe <atanf+0x86>
 80060e6:	eef0 7a00 	vmov.f32	s15, #0
 80060ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xf0
 80060ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 80060f2:	2300      	movs	r3, #0
 80060f4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80060f8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80060fc:	e020      	b.n	8006140 <atanf+0xc8>
 80060fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8006102:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006106:	ee30 0a07 	vadd.f32	s0, s0, s14
 800610a:	2301      	movs	r3, #1
 800610c:	eec7 7a80 	vdiv.f32	s15, s15, s0
 8006110:	e016      	b.n	8006140 <atanf+0xc8>
 8006112:	4b37      	ldr	r3, [pc, #220]	; (80061f0 <atanf+0x178>)
 8006114:	429c      	cmp	r4, r3
 8006116:	dc0b      	bgt.n	8006130 <atanf+0xb8>
 8006118:	eeb7 7a08 	vmov.f32	s14, #120	; 0x78
 800611c:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8006120:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006124:	2302      	movs	r3, #2
 8006126:	ee70 6a47 	vsub.f32	s13, s0, s14
 800612a:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 800612e:	e007      	b.n	8006140 <atanf+0xc8>
 8006130:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 8006134:	eec7 7a80 	vdiv.f32	s15, s15, s0
 8006138:	2303      	movs	r3, #3
 800613a:	e001      	b.n	8006140 <atanf+0xc8>
 800613c:	f04f 33ff 	mov.w	r3, #4294967295
 8006140:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006144:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80061f4 <atanf+0x17c>
 8006148:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80061f8 <atanf+0x180>
 800614c:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 80061fc <atanf+0x184>
 8006150:	ee26 7a06 	vmul.f32	s14, s12, s12
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	eee7 6a25 	vfma.f32	s13, s14, s11
 800615a:	eddf 5a29 	vldr	s11, [pc, #164]	; 8006200 <atanf+0x188>
 800615e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006162:	eddf 6a28 	vldr	s13, [pc, #160]	; 8006204 <atanf+0x18c>
 8006166:	eee7 6a25 	vfma.f32	s13, s14, s11
 800616a:	eddf 5a27 	vldr	s11, [pc, #156]	; 8006208 <atanf+0x190>
 800616e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006172:	eddf 6a26 	vldr	s13, [pc, #152]	; 800620c <atanf+0x194>
 8006176:	eee7 6a25 	vfma.f32	s13, s14, s11
 800617a:	eddf 5a25 	vldr	s11, [pc, #148]	; 8006210 <atanf+0x198>
 800617e:	eea7 5a25 	vfma.f32	s10, s14, s11
 8006182:	eddf 5a24 	vldr	s11, [pc, #144]	; 8006214 <atanf+0x19c>
 8006186:	eee7 5a05 	vfma.f32	s11, s14, s10
 800618a:	ed9f 5a23 	vldr	s10, [pc, #140]	; 8006218 <atanf+0x1a0>
 800618e:	eea7 5a25 	vfma.f32	s10, s14, s11
 8006192:	eddf 5a22 	vldr	s11, [pc, #136]	; 800621c <atanf+0x1a4>
 8006196:	eee7 5a05 	vfma.f32	s11, s14, s10
 800619a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800619e:	ee06 7a26 	vmla.f32	s14, s12, s13
 80061a2:	d104      	bne.n	80061ae <atanf+0x136>
 80061a4:	eeb0 0a67 	vmov.f32	s0, s15
 80061a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80061ac:	bd38      	pop	{r3, r4, r5, pc}
 80061ae:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <atanf+0x1a8>)
 80061b0:	491c      	ldr	r1, [pc, #112]	; (8006224 <atanf+0x1ac>)
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	441a      	add	r2, r3
 80061b6:	440b      	add	r3, r1
 80061b8:	edd3 6a00 	vldr	s13, [r3]
 80061bc:	eed7 6a87 	vfnms.f32	s13, s15, s14
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80061c6:	edd2 6a00 	vldr	s13, [r2]
 80061ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80061ce:	da02      	bge.n	80061d6 <atanf+0x15e>
 80061d0:	eeb1 0a67 	vneg.f32	s0, s15
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
 80061d6:	eeb0 0a67 	vmov.f32	s0, s15
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	3fc90fdb 	.word	0x3fc90fdb
 80061e0:	bfc90fdb 	.word	0xbfc90fdb
 80061e4:	3edfffff 	.word	0x3edfffff
 80061e8:	7149f2ca 	.word	0x7149f2ca
 80061ec:	3f97ffff 	.word	0x3f97ffff
 80061f0:	401bffff 	.word	0x401bffff
 80061f4:	3c8569d7 	.word	0x3c8569d7
 80061f8:	3d4bda59 	.word	0x3d4bda59
 80061fc:	bd6ef16b 	.word	0xbd6ef16b
 8006200:	3d886b35 	.word	0x3d886b35
 8006204:	3dba2e6e 	.word	0x3dba2e6e
 8006208:	3e124925 	.word	0x3e124925
 800620c:	3eaaaaab 	.word	0x3eaaaaab
 8006210:	bd15a221 	.word	0xbd15a221
 8006214:	bd9d8795 	.word	0xbd9d8795
 8006218:	bde38e38 	.word	0xbde38e38
 800621c:	be4ccccd 	.word	0xbe4ccccd
 8006220:	08006668 	.word	0x08006668
 8006224:	08006658 	.word	0x08006658

08006228 <fabsf>:
 8006228:	ee10 2a10 	vmov	r2, s0
 800622c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006230:	ee00 3a10 	vmov	s0, r3
 8006234:	4770      	bx	lr

08006236 <copysign>:
 8006236:	b530      	push	{r4, r5, lr}
 8006238:	ec51 0b10 	vmov	r0, r1, d0
 800623c:	ec55 4b11 	vmov	r4, r5, d1
 8006240:	ec53 2b10 	vmov	r2, r3, d0
 8006244:	f005 4000 	and.w	r0, r5, #2147483648	; 0x80000000
 8006248:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800624c:	ea40 0301 	orr.w	r3, r0, r1
 8006250:	ec43 2b10 	vmov	d0, r2, r3
 8006254:	bd30      	pop	{r4, r5, pc}
	...

08006258 <_init>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr

08006264 <_fini>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	bf00      	nop
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr
